Socket常用的数据结构

struct sockaddr {

    unsigned short sa_family;  address family, AF_xxx

    char sa_data[14];  14 bytes of protocol address

};

此数据结构用做bind、connect、recvfrom、sendto等函数的参数，指明地址信息。

　

但一般编程中并不直接针对此数据结构操作，而是使用另一个与sockaddr等价的数据结构sockaddr_in（在netinetin.h中定义）：

struct sockaddr_in {

    short int sin_family;  Address family

    unsigned short int sin_port;  Port number

    struct in_addr sin_addr;  Internet address

    unsigned char sin_zero[8];  Same size as struct sockaddr

};

在编程中大多数是使用sockaddr_in这个结构来设置获取地址信息。

sin_family指代协议族，在socket编程中只能是AF_INET

sin_port存储端口号（使用网络字节顺序）

sin_addr存储IP地址，使用in_addr这个数据结构

    struct in_addr {

        unsigned long s_addr;

    };

    这个数据结构是由于历史原因保留下来的，主要用作与以前的格式兼容。

    s_addr按照网络字节顺序存储IP地址

sin_zero是为了让sockaddr与sockaddr_in两个数据结构保持大小相同而保留的空字节。

　

设置地址信息的示例：

    struct sockaddr_in sa;

    sa.sin_family = AF_INET;
    sa.sin_port = htons(3490);  short, NBO
    sa.sin_addr.s_addr = inet_addr("132.241.5.10");
    bzero(&(sa.sin_zero), 8);

    注意：如果sa.sin_addr.s_addr ＝ INADDR_ANY，则不指定IP地址（用于Server程序）