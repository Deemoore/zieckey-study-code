<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://fanqiang.chinaunix.net/a4/b7/20010508/112131.html -->
<HTML><HEAD><TITLE>[ 永远的UNIX > Linux网络编程--5. 用户数据报发送 ]</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<STYLE type=text/css>BODY {
	FONT: 12pt 宋体
}
TH {
	FONT: 12pt 宋体
}
INPUT {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
TEXTAREA {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
checkbox {
	FONT: 12pt 宋体
}
A:link {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:visited {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:hover {
	COLOR: #ffff00; TEXT-DECORATION: underline
}
BODY {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
TD {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
P {
	FONT-SIZE: 9pt; LINE-HEIGHT: 150%
}
</STYLE>

<META content="MSHTML 6.00.2900.3157" name=GENERATOR></HEAD>
<BODY text=#ffffff bgColor=#000000 
background="Linux网络编程--5_ 用户数据报发送 ].files/bline.gif">
<DIV align=center>
<CENTER>
<TABLE height=400 cellSpacing=0 cellPadding=0 width=750 border=0>
  <TBODY>
  <TR>
    <TD height=45>
      <P align=center><IMG alt="[ 永远的UNIX::UNIX技术资料的宝库 ]" 
      src="Linux网络编程--5_ 用户数据报发送 ].files/title.gif"></P></TD></TR>
  <TR>
  <TR>
    <TD vAlign=bottom align=left height=40><SMALL><A 
      href="http://fanqiang.chinaunix.net/">首页</A> &gt; 编程技术 &gt; 网络编程 &gt; 
      正文</SMALL></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--5_ 用户数据报发送 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=center align=middle height=40><FONT size=5><B>Linux网络编程--5. 
      用户数据报发送</B></FONT></TD></TR>
  <TR>
    <TD align=middle height=20><FONT color=#999999><SMALL>http://linuxc.51.net 
      作者:hoyt<HOYTLUO@21CN.COM> (2001-05-08 11:21:31)</SMALL></FONT></TD></TR>
  <TR>
    <TD align=middle>
      <TABLE cellSpacing=0 cellPadding=0 width=700 align=center border=0>
        <TBODY>
        <TR>
          <TD vAlign=top><FONT 
            color=#cccccc><BR>&nbsp;&nbsp;&nbsp;&nbsp;我们前面已经学习网络程序的一个很大的部分,由这个部分的知识,我们实际上可以写出大部分的基于TCP协议的网络程序了.现在在Linux下的大部分程序都是用我们上面所学的知识来写的.我们可以去找一些源程序来参考一下.这一章,我们简单的学习一下基于UDP协议的网络程序.&nbsp; 
            <BR><BR>5.1&nbsp;两个常用的函数&nbsp; 
            <BR><BR>&nbsp;&nbsp;&nbsp;int&nbsp;recvfrom(int&nbsp;sockfd,void&nbsp;*buf,int&nbsp;len,unsigned&nbsp;int&nbsp;flags,struct&nbsp;sockaddr&nbsp;*&nbsp;from&nbsp;int&nbsp;*fromlen) 
            <BR>&nbsp;&nbsp;&nbsp;int&nbsp;sendto(int&nbsp;sockfd,const&nbsp;void&nbsp;*msg,int&nbsp;len,unsigned&nbsp;int&nbsp;flags,struct&nbsp;sockaddr&nbsp;*to&nbsp;int&nbsp;tolen) 
            <BR><BR>sockfd,buf,len的意义和read,write一样,分别表示套接字描述符,发送或接收的缓冲区及大小.recvfrom负责从sockfd接收数据,如果from不是NULL,那么在from里面存储了信息来源的情况,如果对信息的来源不感兴趣,可以将from和fromlen设置为NULL.sendto负责向to发送信息.此时在to里面存储了收信息方的详细资料.&nbsp; 
            <BR><BR><BR>5.2&nbsp;一个实例&nbsp; 
            <BR><BR>/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务端程序&nbsp;&nbsp;server.c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR><BR>#include&nbsp;<SYS types.h> <BR>#include&nbsp;<SYS socket.h> 
            <BR>#include&nbsp;<NETINET in.h> <BR>#include&nbsp;<STDIO.H> 
            <BR>#include&nbsp;<ERRNO.H> 
            <BR>#define&nbsp;SERVER_PORT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8888 
            <BR>#define&nbsp;MAX_MSG_SIZE&nbsp;&nbsp;&nbsp;&nbsp;1024 
            <BR><BR>void&nbsp;udps_respon(int&nbsp;sockfd) <BR>{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;sockaddr_in&nbsp;addr; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addrlen,n; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;msg[MAX_MSG_SIZE]; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;从网络上度,写到网络上面去&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n=recvfrom(sockfd,msg,MAX_MSG_SIZE,0, 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(struct&nbsp;sockaddr*)&amp;addr,&amp;addrlen); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg[n]=0; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;显示服务端已经收到了信息&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stdout,"I&nbsp;have&nbsp;received&nbsp;%s",msg); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendto(sockfd,msg,n,0,(struct&nbsp;sockaddr*)&amp;addr,addrlen); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR>} 
            <BR><BR>int&nbsp;main(void) <BR>{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;sockfd; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;sockaddr_in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sockfd=socket(AF_INET,SOCK_DGRAM,0); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(sockfd&lt;0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Socket&nbsp;Error:%s\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bzero(&amp;addr,sizeof(struct&nbsp;sockaddr_in)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr.sin_family=AF_INET; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr.sin_addr.s_addr=htonl(INADDR_ANY); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr.sin_port=htons(SERVER_PORT); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(bind(sockfd,(struct&nbsp;sockaddr&nbsp;*)&amp;ddr,sizeof(struct&nbsp;sockaddr_in))&lt;0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Bind&nbsp;Error:%s\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;udps_respon(sockfd); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(sockfd); 
            <BR>} 
            <BR><BR><BR>/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;客户端程序&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>#include&nbsp;<SYS types.h> <BR>#include&nbsp;<SYS socket.h> 
            <BR>#include&nbsp;<NETINET in.h> <BR>#include&nbsp;<ERRNO.H> 
            <BR>#include&nbsp;<STDIO.H> <BR>#include&nbsp;<UNISTD.H> 
            <BR>#define&nbsp;MAX_BUF_SIZE&nbsp;&nbsp;&nbsp;&nbsp;1024 
            <BR><BR>void&nbsp;udpc_requ(int&nbsp;sockfd,const&nbsp;struct&nbsp;sockaddr_in&nbsp;*addr,int&nbsp;len) 
            <BR>{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;buffer[MAX_BUF_SIZE]; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;n; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;从键盘读入,写到服务端&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fgets(buffer,MAX_BUF_SIZE,stdin); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendto(sockfd,buffer,strlen(buffer),0,addr,len); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bzero(buffer,MAX_BUF_SIZE); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;从网络上读,写到屏幕上&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n=recvfrom(sockfd,buffer,MAX_BUF_SIZE,0,NULL,NULL); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffer[n]=0; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fputs(buffer,stdout); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <BR>} 
            <BR><BR>int&nbsp;main(int&nbsp;argc,char&nbsp;**argv) <BR>{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;sockfd,port; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;sockaddr_in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(argc!=3) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Usage:%s&nbsp;server_ip&nbsp;server_port\n",argv[0]); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if((port=atoi(argv[2]))&lt;0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Usage:%s&nbsp;server_ip&nbsp;server_port\n",argv[0]); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sockfd=socket(AF_INET,SOCK_DGRAM,0); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(sockfd&lt;0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Socket&nbsp;&nbsp;Error:%s\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;填充服务端的资料&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bzero(&amp;addr,sizeof(struct&nbsp;sockaddr_in)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr.sin_family=AF_INET; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addr.sin_port=htons(port); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(inet_aton(argv[1],&amp;addr.sin_addr)&lt;0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Ip&nbsp;error:%s\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;udpc_requ(sockfd,&amp;addr,sizeof(struct&nbsp;sockaddr_in)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(sockfd); 
            <BR>} 
            <BR><BR>###########&nbsp;编译文件&nbsp;Makefile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;########## 
            <BR>all:server&nbsp;client <BR>server:server.c 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gcc&nbsp;-o&nbsp;server&nbsp;server.c 
            <BR>client:client.c 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gcc&nbsp;-o&nbsp;client&nbsp;client.c 
            <BR>clean: 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm&nbsp;-f&nbsp;server 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm&nbsp;-f&nbsp;client 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm&nbsp;-f&nbsp;core 
            <BR><BR>上面的实例如果大家编译运行的话,会发现一个小问题的.&nbsp;在我机器上面,我先运行服务端,然后运行客户端.在客户端输入信息,发送到服务端,&nbsp;在服务端显示已经收到信息,但是客户端没有反映.再运行一个客户端,向服务端发出信息&nbsp;却可以得到反应.我想可能是第一个客户端已经阻塞了.如果谁知道怎么解决的话,请告诉我,谢谢.&nbsp;由于UDP协议是不保证可靠接收数据的要求,所以我们在发送信息的时候,系统并不能够保证我们发出的信息都正确无误的到达目的地.一般的来说我们在编写网络程序的时候都是选用TCP协议的.&nbsp; 
            <BR>(<A 
            href="http://www.fanqiang.com/">http://www.fanqiang.com/</A>) 
            </FONT>&nbsp;&nbsp;&nbsp;&nbsp;进入【<A 
            href="http://www.chinaunix.net/">UNIX论坛</A>】 </TD></TR>
        <TR>
          <TD>
            <HR>
          </TD></TR>
        <TR>
          <TD><B>相关文章</B> </TD></TR>
        <TR>
          <TD><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010810/1200001101.html">Proxy源代码分析--谈谈如何学习linux网络编程</A> 
            <SMALL>(2001-08-10 12:00:00)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112433.html">Linux网络编程--10. 
            原始套接字 --11. 后记</A> <SMALL>(2001-05-08 11:26:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112359.html">Linux网络编程--9. 
            服务器模型</A> <SMALL>(2001-05-08 11:23:59)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112324.html">Linux网络编程--8. 
            套接字选项</A> <SMALL>(2001-05-08 11:23:24)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112240.html">Linux网络编程--7. 
            TCP/IP协议</A> <SMALL>(2001-05-08 11:22:40)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112209.html">Linux网络编程--6. 
            高级套接字函数</A> <SMALL>(2001-05-08 11:22:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112131.html">Linux网络编程--5. 
            用户数据报发送</A> <SMALL>(2001-05-08 11:21:31)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112052.html">Linux网络编程--4. 
            完整的读写函数</A> <SMALL>(2001-05-08 11:20:52)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112014.html">Linux网络编程--3. 
            服务器和客户机的信息函数</A> <SMALL>(2001-05-08 11:20:14)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/111934.html">Linux网络编程--2. 
            初等网络函数介绍（TCP）</A> <SMALL>(2001-05-08 
        11:19:34)</SMALL></FONT><BR></TD></TR>
        <TR>
        <TR>
          <TD><BR>===<A 
            href="http://fanqiang.chinaunix.net/cgi-bin/find.cgi?key=Linux网络编程">更多相关</A>===</TD></TR>
        <TR>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--5_ 用户数据报发送 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=top width="100%" colSpan=5 height=40>
      <P align=center><FONT color=#ffffff>★&nbsp;&nbsp;樊强制作 欢迎分享&nbsp;&nbsp;★ 
      </FONT></P></TD></TR></TBODY></TABLE></CENTER></DIV></BODY></HTML>
