Linux网络编程

http://fanqiang.chinaunix.net/a4/b7/20010508/112052.html

1. Linux网络知识介绍

1.1 客户端程序和服务端程序
网络程序和普通的程序有一个最大的区别是网络程序是由两个部分组成的--客户端和服务器端.

网络程序是先有服务器程序启动,等待客户端的程序运行并建立连接.
一般的来说是服务端的程序 在一个端口上监听,直到有一个客户端的程序发来了请求.

1.2 常用的命令
由于网络程序是有两个部分组成,所以在调试的时候比较麻烦,为此我们有必要知道一些常用的网络命令

netstat
命令netstat是用来显示网络的连接,路由表和接口统计等网络的信息.
netstat有许多的选项 我们常用的选项是 -an 用来显示详细的网络状态.至于其它的选项我们可以使用帮助手册获得详细的情况.

telnet
telnet是一个用来远程控制的程序,但是我们完全可以用这个程序来调试我们的服务端程序的. 
比如我们的服务器程序在监听8888端口,我们可以用telnet localhost 8888来查看服务端的状况.

1.3 TCP/UDP介绍
TCP(Transfer Control Protocol)传输控制协议是一种面向连接的协议,
当我们的网络程序使用 这个协议的时候,网络可以保证我们的客户端和服务端的连接是可靠的,安全的.

UDP(User Datagram Protocol)用户数据报协议是一种非面向连接的协议,
这种协议并不能保证我们 的网络程序的连接是可靠的,所以我们现在编写的程序一般是采用TCP协议的. 


2. 初等网络函数介绍（TCP）

Linux系统是通过提供套接字(socket)来进行网络编程的.网络程序通过socket和其它几个函数的调用,
会返回一个通讯的文件描述符,我们可以将这个描述符看成普通的文件的描述符来操作,
这就是linux的设备无关性的好处.我们可以通过向描述符读写操作实现网络之间的数据交流.

2.1 socket
int socket(int domain, int type,int protocol)

domain:说明我们网络程序所在的主机采用的通讯协族(AF_UNIX和AF_INET等). 
AF_UNIX只能够用于单一的Unix系统进程间通信,而AF_INET是针对Internet的,
因而可以允许在远程 主机之间通信(当我们 man socket时发现 domain可选项是 PF_*而不是AF_*,
因为glibc是posix的实现所以用PF代替了AF,不过我们都可以使用的).

type:我们网络程序所采用的通讯协议(SOCK_STREAM,SOCK_DGRAM等) SOCK_STREAM表明我们用的是TCP协议,
这样会提供按顺序的,可靠,双向,面向连接的比特流. SOCK_DGRAM 表明我们用的是UDP协议,
这样只会提供定长的,不可靠,无连接的通信.

protocol:由于我们指定了type,所以这个地方我们一般只要用0来代替就可以了 socket为网络通讯做基本的准备.
成功时返回文件描述符,失败时返回-1,看error可知道出错的详细情况.


2.2 bind
  一旦你有一个套接字,你可能要将套接字和机器上的一定的端口关联 起来。(如果你想用listen()来侦听一定端口的
数据,这是必要一步)如果你只想用 connect(),那么这个步 骤没有必要。但是无论如何,请继续读下去。
这里是系统调用 bind() 的大概:
int bind(int sockfd, struct sockaddr *my_addr, int addrlen)

sockfd:是由socket调用返回的文件描述符.

addrlen:是sockaddr结构的长度.

my_addr:是一个指向sockaddr的指针. 在中有 sockaddr的定义

struct sockaddr{
unisgned short as_family;
char sa_data[14];
};

不过由于系统的兼容性,我们一般不用这个头文件,而使用另外一个结构(struct sockaddr_in) 来代替.
在中有sockaddr_in的定义
struct sockaddr_in{
unsigned short sin_family;
unsigned short int sin_port;
struct in_addr sin_addr;
unsigned char sin_zero[8];
}

我们主要使用Internet所以sin_family一般为AF_INET,
sin_addr设置为INADDR_ANY表示可以和任何的主机通信,sin_port是我们要监听的端口号.
sin_zero[8]是用来填充的. bind将本地的端口同socket返回的文件描述符捆绑在一起.
成功是返回0,失败的情况和socket一样

2.3 listen
                        假如你不希望与远程的一个地址相连,或者说, 仅仅是将它踢开,那你就需要等待接入请求并
且用各种方法处理它们。处 理过程分两步:首先,你听--listen(),然后,你接受--accept() (请看下面的 内容)。
除了要一点解释外,系统调用 listen 也相当简单。
int listen(int sockfd, int backlog);
sockfd 是调用 socket() 返回的套接字文件描述符。backlog 是在进入 队列中允许的连接数目。什么意思呢? 进入的连
接是在队列中一直等待直 到你接受 (accept() 请看下面的文章)连接。它们的数目限制于队列的允许。 大多数系统的允
许数目是20,你也可以设置为5到10。
和别的函数一样,在发生错误的时候返回-1,并设置全局错误变量 errno。
你可能想象到了,在你调用 listen() 前你或者要调用 bind() 或者让内 核随便选择一个端口。如果你想侦听进入的连
接,那么系统调用的顺序可 能是这样的:

socket();
  bind();
listen();
  /* accept() 应该在这 */

2.4 accept
  准备好了,系统调用 accept() 会有点古怪的地方的!你可以想象发生 这样的事情:有人从很远的地方通过一个你在
侦听 (listen()) 的端口连接 (connect()) 到你的机器。它的连接将加入到等待接受 (accept()) 的队列 中。你调用
accept() 告诉它你有空闲的连接。它将返回一个新的套接字文 件描述符!这样你就有两个套接字了,原来的一个还在侦
听你的那个端口, 新的在准备发送 (send()) 和接收 ( recv()) 数据。这就是这个过程!

int accept(int sockfd, struct sockaddr *addr,int *addrlen)

sockfd:是listen后的文件描述符.

addr, addrlen是用来给客户端的程序填写的,服务器端只要传递指针就可以了. 
bind,listen和accept是服务器端用的函数,
accept调用时,服务器端的程序会一直阻塞到有一个 客户程序发出了连接. 
accept成功时返回最后的服务器端的文件描述符,这个时候服务器端可以向该描述符写信息了. 失败时返回-1


2.5 connect
int connect(int sockfd, struct sockaddr * serv_addr,int addrlen)

sockfd:socket返回的文件描述符.

serv_addr:储存了服务器端的连接信息.其中sin_add是服务端的地址

addrlen:serv_addr的长度

connect函数是客户端用来同服务端连接的.成功时返回0,sockfd是同服务端通讯的文件描述符 失败时返回-1.

    现在我们假设你是个 telnet 程序。你的用户命令你得到套接字的文件 描述符。你听从命令调用了socket()。下一
步,你的用户告诉你通过端口 23(标准 telnet 端口)连接到"132.241.5.10"。你该怎么做呢? 幸运的是,你正在阅读
connect()--如何连接到远程主机这一章。你可 不想让你的用户失望。
connect() 系统调用是这样的:
#include <sys/types.h>
#include <sys/socket.h>
int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);
sockfd 是系统调用 socket() 返回的套接字文件描述符。serv_addr 是 保存着目的地端口和 IP 地址的数据结构 struct
sockaddr。addrlen 设置 为 sizeof(struct sockaddr)。
想知道得更多吗?让我们来看个例子:
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#define DEST_IP "132.241.5.10"
  #define DEST_PORT 23
main()
   {
int sockfd;
struct sockaddr_in dest_addr; /* 目的地址*/
sockfd = socket(AF_INET, SOCK_STREAM, 0); /* 错误检查 */
dest_addr.sin_family = AF_INET; /* host byte order */
dest_addr.sin_port = htons(DEST_PORT); /* short, network byte order */
dest_addr.sin_addr.s_addr = inet_addr(DEST_IP);
bzero(&(dest_addr.sin_zero),; /* zero the rest of the struct */
/* don't forget to error check the connect()! */
connect(sockfd, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr));
   .

2.6重要的结构题介绍
首先是简单的一个:socket描述符。它是下面的类型:
int
仅仅是一个常见的 int。
从现在起,事情变得不可思议了,而你所需做的就是继续看下去。注 意这样的事实:有两种字节排列顺序:重要的字节 (
有时叫 "octet",即八 位位组) 在前面,或者不重要的字节在前面。前一种叫“网络字节顺序 (Network Byte Order)
”。有些机器在内部是按照这个顺序储存数据,而另外 一些则不然。当我说某数据必须按照 NBO 顺序,那么你要调用函
数(例如 htons() )来将它从本机字节顺序 (Host Byte Order) 转换过来。如果我没有 提到 NBO, 那么就让它保持本机
字节顺序。
我的第一个结构(在这个技术手册TM中)--struct sockaddr.。这个结构 为许多类型的套接字储存套接字地址信息:
struct sockaddr {
   unsigned short sa_family; /* 地址家族, AF_xxx */
   char sa_data[14]; /*14字节协议地址*/
   };
sa_family 能够是各种各样的类型,但是在这篇文章中都是 "AF_INET"。 sa_data包含套接字中的目标地址和端口信息。
这好像有点 不明智。
为了处理struct sockaddr,程序员创造了一个并列的结构: struct sockaddr_in ("in" 代表 "Internet"。)
struct sockaddr_in {
   short int sin_family; /* 通信类型 */
   unsigned short int sin_port; /* 端口 */
   struct in_addr sin_addr; /* Internet 地址 */
   unsigned char sin_zero[8]; /* 与sockaddr结构的长度相同*/
   };
用这个数据结构可以轻松处理套接字地址的基本元素。注意 sin_zero (它被加入到这个结构,并且长度和 struct
sockaddr 一样) 应该使用函数 bzero() 或 memset() 来全部置零。 同时,这一重要的字节,一个指向 sockaddr_in结构
体的指针也可以被指向结构体sockaddr并且代替它。这 样的话即使 socket() 想要的是 struct sockaddr *,你仍然可以
使用 struct sockaddr_in,并且在最后转换。同时,注意 sin_family 和 struct sockaddr 中的 sa_family 一致并能够
设置为 "AF_INET"。最后,sin_port和 sin_addr 必须是网络字节顺序 (Network Byte Order)!
你也许会反对道:"但是,怎么让整个数据结构 struct in_addr sin_addr 按照网络字节顺序呢?" 要知道这个问题的答
案,我们就要仔细的看一看这 个数据结构: struct in_addr, 有这样一个联合 (unions):
/* Internet 地址 (一个与历史有关的结构) */
   struct in_addr {
   unsigned long s_addr;
   };
它曾经是个最坏的联合,但是现在那些日子过去了。如果你声明 "ina" 是数据结构 struct sockaddr_in 的实例,那么
"ina.sin_addr.s_addr" 就储 存4字节的 IP 地址(使用网络字节顺序)。如果你不幸的系统使用的还是恐 怖的联合
struct in_addr ,你还是可以放心4字节的 IP地址并且和上面 我说的一样(这是因为使用了“#define”。)


struct hostent结构体
这个数据结构是这样的： 
	struct hostent { 
	char *h_name; 
	char **h_aliases; 
	int h_addrtype; 
	int h_length; 
	char **h_addr_list; 
	}; 
	#define h_addr h_addr_list[0]  
这里是这个数据结构的详细资料：  
struct hostent:  
　　h_name – 地址的正式名称。 
　　h_aliases – 空字节-地址的预备名称的指针。 
　　h_addrtype –地址类型; 通常是AF_INET。  
　　h_length – 地址的比特长度。 
　　h_addr_list – 零字节-主机网络地址指针。网络字节顺序。 
　　h_addr - h_addr_list中的第一地址。 

2.7本机转换
  我们现在到了新的章节。我们曾经讲了很多网络到本机字节顺序的转 换,现在可以实践了!
你能够转换两种类型: short (两个字节)和 long (四个字节)。这个函 数对于变量类型 unsigned 也适用。假设你想将
short 从本机字节顺序转 换为网络字节顺序。用 "h" 表示 "本机 (host)",接着是 "to",然后用 "n" 表 示 "网络
(network)",最后用 "s" 表示 "short": h-to-n-s, 或者 htons() ("Host to Network Short")。
太简单了...
如果不是太傻的话,你一定想到了由"n","h","s",和 "l"形成的正确 组合,例如这里肯定没有stolh() ("Short to
Long Host") 函数,不仅在这里 没有,所有场合都没有。但是这里有:
htons()--"Host to Network Short"
  htonl()--"Host to Network Long"
  ntohs()--"Network to Host Short"
  ntohl()--"Network to Host Long"
现在,你可能想你已经知道它们了。你也可能想:“如果我想改变 char 的顺序要怎么办呢?” 但是你也许马上就想到,
“用不着考虑的”。你也许 会想到:我的 68000 机器已经使用了网络字节顺序,我没有必要去调用 htonl() 转换 IP 地
址。你可能是对的,但是当你移植你的程序到别的机器 上的时候,你的程序将失败。可移植性!这里是 Unix 世界!记
住:在你 将数据放到网络上的时候,确信它们是网络字节顺序的。
最后一点:为什么在数据结构 struct sockaddr_in 中, sin_addr 和 sin_port 需要转换为网络字节顺序,而
sin_family 需不需要呢? 答案是: sin_addr 和 sin_port 分别封装在包的 IP 和 UDP 层。因此,它们必须要 是网络字
节顺序。但是 sin_family 域只是被内核 (kernel) 使用来决定在数 据结构中包含什么类型的地址,所以它必须是本机字
节顺序。同时, sin_family 没有发送到网络上,它们可以是本机字节顺序。



2.8 实例

服务器端程序


/******* 服务器程序 (server.c) ************/
/********************************************************************************************
**	Name:server.c
**	Used to study the network programming in Linux OS.
**	Showing how to use the functions,
** like socket,bind,listen,accept and write.
**	This is the server program.
**	Author:zeickey
**	Date:2006/9/16		
**	Copyright (c) 2006,All Rights Reserved!
*********************************************************************************************/
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

int main(int argc, char *argv[])
{
	int sockfd,new_fd;
	struct sockaddr_in server_addr;
	struct sockaddr_in client_addr;
	int sin_size,portnumber;
	char hello[]="Hello! Are You Fine?\n";
	
	if(argc!=2)
	{
		fprintf(stderr,"Usage:%s portnumber\a\n",argv[0]);
		return 1;
	}
	
	if( (portnumber = atoi(argv[1])) < 0 )
	{
		fprintf(stderr,"Usage:%s portnumber\a\n",argv[0]);
		return 1;
	}
	
	/* 服务器端开始建立socket描述符 */
	if( (sockfd = socket(AF_INET,SOCK_STREAM, 0)) == -1 )
	{
		fprintf(stderr,"Socket error:%s\n\a",strerror(errno));
		return 1;
	}
	
	/* 服务器端填充 sockaddr结构 */
	//bzero(&server_addr, sizeof(struct sockaddr_in));
	memset(&server_addr, 0, sizeof(struct sockaddr_in));
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	server_addr.sin_port = htons(portnumber);
	
	/* 捆绑sockfd描述符，为下面的listen函数作准备 */
	if( bind(sockfd,(struct sockaddr *)(&server_addr),sizeof(struct sockaddr))==-1 )
	{
		fprintf(stderr,"Bind error:%s\n\a",strerror(errno));
		return 1;
	}
	
	/* 监听sockfd描述符 */
	if( -1 == listen(sockfd,5) )
	{
		fprintf(stderr,"Listen error:%s\n\a",strerror(errno));
		return 1;
	}
	
	while(1)
	{
		/* 服务器阻塞,直到客户程序建立连接 */
		sin_size=sizeof(struct sockaddr_in);
		//if( (new_fd = accept(sockfd, (struct sockaddr *)(&client_addr), &sin_size)) == -1)
		new_fd = accept(sockfd, (struct sockaddr *)(&client_addr), &sin_size);
		if( -1 == new_fd )
		{
			fprintf(stderr,"Accept error:%s\n\a",strerror(errno));
			return 1;
		}
		
		fprintf(stderr,"Server get connection from %s\n", inet_ntoa(client_addr.sin_addr));
		if(write(new_fd,hello,strlen(hello))==-1)
		{
			fprintf(stderr,"Write Error:%s\n",strerror(errno));
			return 1;
		}
		/* 这个通讯已经结束 */
		close(new_fd);
		/* 循环下一个 */
	}
	close(sockfd);
	return 0;
}



客户端程序

/******* 客户端程序 client.c ************/
/********************************************************************************************
**	Name:client.c
**	Used to study the network programming in Linux OS.
**	Showing how to use the functions,
** like socket,bind,listen,accept and write.
**	This is the client program.
**	Author:zeickey
**	Date:2006/9/16		
**	Copyright (c) 2006,All Rights Reserved!
*********************************************************************************************/
#include <sys/types.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <unistd.h>
#include <errno.h>

int main(int argc, char *argv[])
{
	int sockfd;
	char buffer[1024];
	struct sockaddr_in server_addr;
	//struct hostent *host;
	char *ip;
	int portnumber,nbytes;
	
	if(argc!=3)
	{
		fprintf(stderr,"Usage:%s ip portnumber\a\n",argv[0]);
		return 1;
	}
	
	//if((host=gethostbyname(argv[1]))==NULL)
	printf("agrv[1] = %s\n",argv[1]);
	if( strlen(ip=argv[1])< 7 )
	{
		fprintf(stderr,"Get Ip address error\n");
		return 1;
	}
	
	if((portnumber=atoi(argv[2]))<0)
	{
		fprintf(stderr,"Usage:%s ip portnumber\a\n",argv[0]);
		return 1;
	}
	
	/* 客户程序开始建立 sockfd描述符 */
	if((sockfd=socket(AF_INET,SOCK_STREAM,0))==-1)
	{
		fprintf(stderr,"Socket Error:%s\a\n",strerror(errno));
		return 1;
	}
	
	/* 客户程序填充服务端的资料 */
	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(portnumber);
	//server_addr.sin_addr = *( (struct in_addr *)host->h_addr );
	//server_addr.sin_addr.s_addr = inet_addr(host->h_addr);
	server_addr.sin_addr.s_addr = inet_addr(ip);
	//server_addr.sin_addr.s_addr = ((struct in_addr*)(host->h_addr))->s_addr;
	
	/* 客户程序发起连接请求 */
	if(connect(sockfd,(struct sockaddr *)(&server_addr),sizeof(struct sockaddr))==-1)
	{
		fprintf(stderr,"Connect Error:%s\a\n",strerror(errno));
		return 1;
	}
	
	/* 连接成功了 */
	if((nbytes=read(sockfd,buffer,1024))==-1)
	{
		fprintf(stderr,"Read Error:%s\n",strerror(errno));
		return 1;
	}
	buffer[nbytes]='\0';
	printf("I have received:%s\n",buffer);
	/* 结束通讯 */
	close(sockfd);
	return 0;
}

MakeFile
这里我们使用GNU 的make实用程序来编译. 关于make的详细说明见 Make 使用介绍

######### Makefile ###########
all:server client
server:server.c
gcc $^ -o $@
client:client.c
gcc $^ -o $@

运行make后会产生两个程序server(服务器端)和client(客户端) 先运行./server portnumber& (portnumber随便取一个大于1204且不在/etc/services中出现的号码 就用8888好了),然后运行 ./client localhost 8888 看看有什么结果. (你也可以用telnet和netstat试一试.) 上面是一个最简单的网络程序,不过是不是也有点烦.上面有许多函数我们还没有解释. 我会在下一章进行的详细的说明.


2.9 总结
总的来说网络程序是由两个部分组成的--客户端和服务器端.它们的建立步骤一般是:

服务器端
socket-->bind-->listen-->accept

客户端
socket-->connect

