/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef logger_TYPES_H
#define logger_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace logger {

typedef struct _LogMessage__isset {
  _LogMessage__isset() : timestamp(false), message(false) {}
  bool timestamp;
  bool message;
} _LogMessage__isset;

class LogMessage {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  LogMessage() : timestamp(0), message("") {
  }

  virtual ~LogMessage() throw() {}

  int64_t timestamp;
  std::string message;

  _LogMessage__isset __isset;

  void __set_timestamp(const int64_t val) {
    timestamp = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const LogMessage & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const LogMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LogMessageBatch__isset {
  _LogMessageBatch__isset() : msgs(false) {}
  bool msgs;
} _LogMessageBatch__isset;

class LogMessageBatch {
 public:

  static const char* ascii_fingerprint; // = "86100D71C9FEB96BF8E1AC2FFFDBF56D";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x10,0x0D,0x71,0xC9,0xFE,0xB9,0x6B,0xF8,0xE1,0xAC,0x2F,0xFF,0xDB,0xF5,0x6D};

  LogMessageBatch() {
  }

  virtual ~LogMessageBatch() throw() {}

  std::vector<LogMessage>  msgs;

  _LogMessageBatch__isset __isset;

  void __set_msgs(const std::vector<LogMessage> & val) {
    msgs = val;
  }

  bool operator == (const LogMessageBatch & rhs) const
  {
    if (!(msgs == rhs.msgs))
      return false;
    return true;
  }
  bool operator != (const LogMessageBatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogMessageBatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LoggingException__isset {
  _LoggingException__isset() : msg(false) {}
  bool msg;
} _LoggingException__isset;

class LoggingException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  LoggingException() : msg("") {
  }

  virtual ~LoggingException() throw() {}

  std::string msg;

  _LoggingException__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const LoggingException & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const LoggingException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoggingException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
