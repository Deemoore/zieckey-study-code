/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef UserExchange_H
#define UserExchange_H

#include <TProcessor.h>
#include "hello_types.h"

namespace hello {

class UserExchangeIf {
 public:
  virtual ~UserExchangeIf() {}
  virtual void ping() = 0;
  virtual int32_t add_user(const User& u) = 0;
  virtual void get_user(User& _return, const int32_t uid) = 0;
  virtual void clear_list() = 0;
};

class UserExchangeNull : virtual public UserExchangeIf {
 public:
  virtual ~UserExchangeNull() {}
  void ping() {
    return;
  }
  int32_t add_user(const User& /* u */) {
    int32_t _return = 0;
    return _return;
  }
  void get_user(User& /* _return */, const int32_t /* uid */) {
    return;
  }
  void clear_list() {
    return;
  }
};


class UserExchange_ping_args {
 public:

  UserExchange_ping_args() {
  }

  virtual ~UserExchange_ping_args() throw() {}


  bool operator == (const UserExchange_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserExchange_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserExchange_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserExchange_ping_pargs {
 public:


  virtual ~UserExchange_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserExchange_ping_result {
 public:

  UserExchange_ping_result() {
  }

  virtual ~UserExchange_ping_result() throw() {}


  bool operator == (const UserExchange_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserExchange_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserExchange_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserExchange_ping_presult {
 public:


  virtual ~UserExchange_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserExchange_add_user_args__isset {
  _UserExchange_add_user_args__isset() : u(false) {}
  bool u;
} _UserExchange_add_user_args__isset;

class UserExchange_add_user_args {
 public:

  UserExchange_add_user_args() {
  }

  virtual ~UserExchange_add_user_args() throw() {}

  User u;

  _UserExchange_add_user_args__isset __isset;

  void __set_u(const User& val) {
    u = val;
  }

  bool operator == (const UserExchange_add_user_args & rhs) const
  {
    if (!(u == rhs.u))
      return false;
    return true;
  }
  bool operator != (const UserExchange_add_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserExchange_add_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserExchange_add_user_pargs {
 public:


  virtual ~UserExchange_add_user_pargs() throw() {}

  const User* u;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserExchange_add_user_result__isset {
  _UserExchange_add_user_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _UserExchange_add_user_result__isset;

class UserExchange_add_user_result {
 public:

  UserExchange_add_user_result() : success(0) {
  }

  virtual ~UserExchange_add_user_result() throw() {}

  int32_t success;
  InvalidValueException e;

  _UserExchange_add_user_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_e(const InvalidValueException& val) {
    e = val;
  }

  bool operator == (const UserExchange_add_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const UserExchange_add_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserExchange_add_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserExchange_add_user_presult__isset {
  _UserExchange_add_user_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _UserExchange_add_user_presult__isset;

class UserExchange_add_user_presult {
 public:


  virtual ~UserExchange_add_user_presult() throw() {}

  int32_t* success;
  InvalidValueException e;

  _UserExchange_add_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserExchange_get_user_args__isset {
  _UserExchange_get_user_args__isset() : uid(false) {}
  bool uid;
} _UserExchange_get_user_args__isset;

class UserExchange_get_user_args {
 public:

  UserExchange_get_user_args() : uid(0) {
  }

  virtual ~UserExchange_get_user_args() throw() {}

  int32_t uid;

  _UserExchange_get_user_args__isset __isset;

  void __set_uid(const int32_t val) {
    uid = val;
  }

  bool operator == (const UserExchange_get_user_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UserExchange_get_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserExchange_get_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserExchange_get_user_pargs {
 public:


  virtual ~UserExchange_get_user_pargs() throw() {}

  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserExchange_get_user_result__isset {
  _UserExchange_get_user_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _UserExchange_get_user_result__isset;

class UserExchange_get_user_result {
 public:

  UserExchange_get_user_result() {
  }

  virtual ~UserExchange_get_user_result() throw() {}

  User success;
  InvalidValueException e;

  _UserExchange_get_user_result__isset __isset;

  void __set_success(const User& val) {
    success = val;
  }

  void __set_e(const InvalidValueException& val) {
    e = val;
  }

  bool operator == (const UserExchange_get_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const UserExchange_get_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserExchange_get_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserExchange_get_user_presult__isset {
  _UserExchange_get_user_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _UserExchange_get_user_presult__isset;

class UserExchange_get_user_presult {
 public:


  virtual ~UserExchange_get_user_presult() throw() {}

  User* success;
  InvalidValueException e;

  _UserExchange_get_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class UserExchange_clear_list_args {
 public:

  UserExchange_clear_list_args() {
  }

  virtual ~UserExchange_clear_list_args() throw() {}


  bool operator == (const UserExchange_clear_list_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserExchange_clear_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserExchange_clear_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserExchange_clear_list_pargs {
 public:


  virtual ~UserExchange_clear_list_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class UserExchangeClient : virtual public UserExchangeIf {
 public:
  UserExchangeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  UserExchangeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t add_user(const User& u);
  void send_add_user(const User& u);
  int32_t recv_add_user();
  void get_user(User& _return, const int32_t uid);
  void send_get_user(const int32_t uid);
  void recv_get_user(User& _return);
  void clear_list();
  void send_clear_list();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserExchangeProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<UserExchangeIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (UserExchangeProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserExchangeProcessor(boost::shared_ptr<UserExchangeIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &UserExchangeProcessor::process_ping;
    processMap_["add_user"] = &UserExchangeProcessor::process_add_user;
    processMap_["get_user"] = &UserExchangeProcessor::process_get_user;
    processMap_["clear_list"] = &UserExchangeProcessor::process_clear_list;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~UserExchangeProcessor() {}
};

class UserExchangeMultiface : virtual public UserExchangeIf {
 public:
  UserExchangeMultiface(std::vector<boost::shared_ptr<UserExchangeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserExchangeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserExchangeIf> > ifaces_;
  UserExchangeMultiface() {}
  void add(boost::shared_ptr<UserExchangeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping();
    }
  }

  int32_t add_user(const User& u) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->add_user(u);
      } else {
        ifaces_[i]->add_user(u);
      }
    }
  }

  void get_user(User& _return, const int32_t uid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_user(_return, uid);
        return;
      } else {
        ifaces_[i]->get_user(_return, uid);
      }
    }
  }

  void clear_list() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->clear_list();
    }
  }

};

} // namespace

#endif
