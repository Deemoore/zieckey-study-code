#include <stdio.h>
#include <string.h>

#include "rsa.h"
#include "slrsa.h"

#ifdef H_OS_WINDOWS
#	pragma comment(lib,"libslrsa.lib")
#endif

const unsigned char prvFileKey[706] = {
    0x00,0x04,0xAC,0xD7,0x96,0xBB,0x73,0x3C,0xB4,0x3D,0xD0,0x3E,0x0D,0xE9,0x99,0x9E,0x31,0xDD,0x20,0x80,0xC5,0xD9,0x7E,0x50,0xE9,0x19,0x21,0xB1,0x6A,0xF4,0xF3,0xE4,
    0x83,0xFE,0xDF,0xC3,0xCF,0x03,0x98,0x79,0xC6,0x44,0xEE,0x26,0x9F,0x36,0x65,0x8D,0x7F,0x71,0x9C,0x3D,0xF0,0xE0,0x6E,0xF9,0xCA,0x41,0xED,0x81,0xB6,0xE5,0x33,0xA0,
    0xB9,0xD7,0x5C,0xD6,0xFB,0x5B,0x97,0x31,0xF9,0x8C,0xA7,0x4F,0x87,0x8F,0xE8,0xCF,0x7A,0x07,0x70,0x5A,0xC1,0x7F,0x70,0x06,0xAD,0xF6,0x48,0x03,0xEC,0x72,0xB5,0x7B,
    0x30,0xEE,0x61,0xED,0xB9,0x0F,0x05,0x90,0x6B,0x48,0x4F,0xDD,0xFC,0x98,0x42,0xAA,0x09,0xE9,0xC3,0x7C,0xF9,0xE6,0xB5,0xC3,0xA3,0x52,0x96,0xCE,0x91,0xA1,0xA9,0x8D,
    0x41,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
    0x00,0x01,0x20,0x45,0x30,0x33,0x57,0x54,0xA2,0x22,0x58,0x5A,0xFD,0xA5,0xFB,0xB4,0x79,0x82,0xDB,0xAA,0xAF,0x45,0xE8,0x3B,0x9B,0x09,0xC2,0x2C,0xA9,0xD7,0x8A,0x21,
    0xC4,0x33,0x35,0xFC,0x0D,0x0E,0x92,0xCD,0x49,0xA3,0x5D,0x03,0x80,0xFE,0x5A,0xFF,0x8C,0x27,0xDE,0x10,0x02,0x85,0x24,0xB3,0x26,0x7C,0x20,0xA7,0xF3,0x49,0xDF,0xD5,
    0xC6,0x5C,0x8C,0x97,0xBD,0xB1,0xD6,0x5D,0x8A,0x27,0x6A,0xDB,0x4F,0x31,0x02,0xB9,0x75,0x6D,0x66,0x68,0x32,0xD2,0xAC,0x2B,0x65,0xAB,0x6E,0xDB,0xD3,0x51,0x6A,0x36,
    0xFB,0xCE,0x2E,0x34,0x14,0xC4,0xA4,0x1D,0x9D,0x12,0x3C,0x62,0x1F,0x82,0x67,0x89,0x7D,0x23,0x8D,0x93,0x0A,0x16,0x41,0x47,0x63,0xC5,0xB1,0x09,0xC2,0xB2,0xA8,0x54,
    0xF3,0xC1,0xE0,0x34,0x2C,0x46,0xB9,0x3C,0x70,0x25,0x6D,0xB7,0x4A,0xD3,0x2E,0xBB,0x00,0x3F,0xBC,0x3C,0x18,0xC2,0x16,0x3B,0xFA,0xD5,0xE3,0xDC,0xE5,0x5C,0xE1,0x97,
    0xF7,0x65,0x85,0x92,0xA8,0x4E,0xDE,0x30,0x4E,0xC7,0x4C,0xBC,0x51,0xBB,0xC2,0x86,0x1B,0x14,0x0E,0x52,0x43,0xDD,0x21,0x7F,0xB9,0x04,0x68,0xF1,0x95,0xA3,0x7A,0x76,
    0x28,0xBD,0xC5,0x5A,0xB4,0xC5,0x47,0x6B,0x1B,0x55,0x8B,0xB7,0xFE,0xE2,0xAE,0x4F,0xE4,0x00,0xDD,0x98,0x66,0x10,0x79,0x37,0x09,0x59,0x5F,0x10,0x22,0xAD,0x1A,0x42,
    0xAB,0x7E,0x1B,0x53,0x38,0x67,0x42,0x5B,0xFC,0x5F,0x01,0x32,0xFE,0x33,0xF9,0x52,0x72,0xF4,0x9D,0x83,0x42,0x70,0x1C,0x0E,0x3F,0xE5,0x22,0x68,0xD4,0xE6,0xF0,0x6A,
    0x9D,0x6D,0x1F,0xBA,0x02,0x51,0xF7,0xC0,0x7F,0xB6,0x2C,0x32,0x75,0xDA,0x30,0x90,0xB1,0xD6,0x53,0x12,0xC6,0x06,0x21,0x13,0x57,0xC9,0x90,0xB7,0x1F,0x95,0xE7,0x2E,
    0x94,0x09,0xBF,0xBF,0x23,0x26,0x15,0xF7,0x0C,0x0E,0xD3,0xE3,0x0A,0x45,0xE1,0x9F,0x0C,0x91,0xE7,0xFC,0xE8,0x31,0x90,0x9D,0xFC,0x56,0x8D,0x6B,0x32,0x5B,0xB1,0xE6,
    0xAA,0x99,0x44,0x02,0x15,0xF9,0x45,0xBB,0x2B,0x18,0x37,0xA5,0x98,0x38,0x15,0x49,0x82,0x90,0xA9,0xCC,0x32,0x9F,0xCA,0xA5,0xA4,0x9B,0x1F,0x9F,0x37,0xD3,0xDF,0x10,
    0xCA,0x78,0x12,0x82,0x83,0x15,0x52,0x50,0xD0,0x8F,0x0C,0xA2,0xBD,0xE6,0xBB,0x2C,0x26,0x61,0x15,0x46,0x7E,0x46,0x93,0xE4,0x75,0x30,0x48,0xC3,0x47,0x5A,0xAD,0xCE,
    0x8F,0xA1,0xCC,0x1D,0x54,0xB9,0xE0,0x11,0x1E,0xA3,0x27,0x98,0x1F,0x57,0x71,0x15,0xB9,0x2B,0xEF,0xEB,0xEA,0x47,0x7E,0x84,0x15,0x67,0x54,0xD7,0xBC,0x56,0xB0,0xDF,
    0x7B,0x13,0x2F,0xF2,0x9A,0x27,0x10,0xBC,0x4F,0x6B,0xAE,0x8B,0xB7,0xB3,0x07,0x08,0xE3,0xED,0x71,0x47,0x69,0x9E,0xAA,0xEA,0x6B,0x6A,0x2C,0x96,0x31,0x90,0x3F,0xE9,
    0xC8,0x99
};

const unsigned char pubFileKey[258] = {
    0x00,0x04,0xAC,0xD7,0x96,0xBB,0x73,0x3C,0xB4,0x3D,0xD0,0x3E,0x0D,0xE9,0x99,0x9E,0x31,0xDD,0x20,0x80,0xC5,0xD9,0x7E,0x50,0xE9,0x19,0x21,0xB1,0x6A,0xF4,0xF3,0xE4,
    0x83,0xFE,0xDF,0xC3,0xCF,0x03,0x98,0x79,0xC6,0x44,0xEE,0x26,0x9F,0x36,0x65,0x8D,0x7F,0x71,0x9C,0x3D,0xF0,0xE0,0x6E,0xF9,0xCA,0x41,0xED,0x81,0xB6,0xE5,0x33,0xA0,
    0xB9,0xD7,0x5C,0xD6,0xFB,0x5B,0x97,0x31,0xF9,0x8C,0xA7,0x4F,0x87,0x8F,0xE8,0xCF,0x7A,0x07,0x70,0x5A,0xC1,0x7F,0x70,0x06,0xAD,0xF6,0x48,0x03,0xEC,0x72,0xB5,0x7B,
    0x30,0xEE,0x61,0xED,0xB9,0x0F,0x05,0x90,0x6B,0x48,0x4F,0xDD,0xFC,0x98,0x42,0xAA,0x09,0xE9,0xC3,0x7C,0xF9,0xE6,0xB5,0xC3,0xA3,0x52,0x96,0xCE,0x91,0xA1,0xA9,0x8D,
    0x41,0x79,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
    0x00,0x01
};

bool Get360SignHash( unsigned char* output, unsigned int* outputLen, unsigned char* input, unsigned int inputLen, const unsigned char *pchPubKey )
{
    printf( "entering %s \n", __FUNCTION__ );
    bool ret = ! RSAPublicDecrypt( output, outputLen, input, inputLen, ( R_RSA_PUBLIC_KEY * )pchPubKey );
    printf( "leaving %s \n" , __FUNCTION__);
    return ret;
}

bool Make360SignHash( unsigned char* output, unsigned int* outputLen, unsigned char* input, unsigned int inputLen, const unsigned char *pchPriKey )
{
    printf( "entering %s \n" , __FUNCTION__);
    bool ret = !RSAPrivateEncrypt( output, outputLen, input, inputLen, ( R_RSA_PRIVATE_KEY * )pchPriKey );
    printf( "leaving %s \n" , __FUNCTION__);
    return ret;
}

int main( int argc, char* argv[] )
{
    unsigned char* input = (unsigned char*)"8b2a649ecb880316db6a8c340b836b0c";

    const BYTE* g_rsa_prvFileKey = prvFileKey;
    const BYTE* g_rsa_pubFileKey = pubFileKey;

    const size_t MD5LEN = 33;
    char md5[MD5LEN];
    int inlen = MD5LEN - 1;
    char signatContent[128];
    char signatContent2[128];
    unsigned int sign_len = 128;

    char outmd5[MD5LEN];
    int outmd5Len = MD5LEN;

    /*
    R_RSA_PRIVATE_KEY rsaprivkey;    
    R_RSA_PUBLIC_KEY  rsapubkey;    
    
    printf("public key offset, address bits=%d\n", (unsigned long)&rsapubkey.bits );
    printf("public key offset, address modulus=%d\n", (unsigned long)&rsapubkey.modulus );
    printf("public key offset, address exponent=%d\n", (unsigned long)&rsapubkey.exponent );

    printf("private key offset, address bits=%d\n", (unsigned long)&rsaprivkey.bits );
    printf("private key offset, address modulus=%d\n", (unsigned long)&rsaprivkey.modulus );
    printf("private key offset, address publicExponent=%d\n", (unsigned long)&rsaprivkey.publicExponent );
    printf("private key offset, address exponent=%d\n", (unsigned long)&rsaprivkey.exponent );
    printf("private key offset, address prime=%d\n", (unsigned long)&rsaprivkey.prime );
    printf("private key offset, address primeExponent=%d\n", (unsigned long)&rsaprivkey.primeExponent );
    printf("private key offset, address coefficient=%d\n", (unsigned long)&rsaprivkey.coefficient );    
    */
    
    printf("sizeof(R_RSA_PUBLIC_KEY)=%lu\n", sizeof(R_RSA_PUBLIC_KEY));    
    printf("sizeof(R_RSA_PRIVATE_KEY)=%lu\n", sizeof(R_RSA_PRIVATE_KEY));


    memcpy( md5, input, MD5LEN);
    bool bResult = Make360SignHash( (unsigned char*)signatContent, (unsigned int*)&sign_len,  (unsigned char*)md5, inlen,  ( const unsigned char*)g_rsa_prvFileKey );

    bResult =  Get360SignHash( (unsigned char*) outmd5, (unsigned int*)&outmd5Len, (unsigned char*)signatContent, sign_len, (const BYTE *)g_rsa_pubFileKey );
    if ( bResult )
    {
        if ( 0 == strncmp( md5, outmd5, MD5LEN ) )
        {
            printf("pass the same!\n");
        }
        else
        {
            printf("it is not the same.!!!!!!\n");
        }
    }
    else
    {
        printf("Get360SignHash error\n");
    }


    
    int ret = slrsa_sign( (unsigned char*)md5, inlen, (const unsigned char*)g_rsa_prvFileKey, (unsigned char*)signatContent2, (unsigned int*)&sign_len);
    if ( ret )
    {
        printf("sign_len=%d\n", sign_len);
        ret =  slrsa_verify( (unsigned char*)md5, inlen, (const BYTE *)g_rsa_pubFileKey, (unsigned char*)signatContent2, sign_len );
        if ( ret )
        {
            printf("slrsa_verify pass the same!\n");
        }
        else
        {
            printf("slrsa_verify it is not the same.!!!!!!\n");
        }
    }

//    printf("press any key to continue...");
//    scanf("%d", &outmd5Len );

    return 0;
}
