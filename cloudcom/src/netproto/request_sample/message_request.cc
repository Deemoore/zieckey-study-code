
//#include "netproto/include/test_common.h"
#include "util.h"

#include "netproto/include/npp_config.h"
#include "netproto/include/message_packer.h"
#include "netproto/include/message_unpacker.h"
#include "netproto/include/idea_wrapper.h"

#include "test_rsa_self_pair_key.h"
#include "client_rsa_key.h"
#include "server_rsa_key.h"
#include "idea_key.h"

#include "message_request.h"

#include <iostream>
#include <sstream>

#include "curl/curl.h"

namespace npp { namespace ext {

    //! Name: auto_delete
    template<class T>
    struct auto_delete
    {
        T*& ptr_ref_to_be_deleted_;
        auto_delete( T*& pointer )
            : ptr_ref_to_be_deleted_( pointer )
        {
        }

        ~auto_delete()
        {
            if ( ptr_ref_to_be_deleted_ )
            {
                delete ptr_ref_to_be_deleted_;
                ptr_ref_to_be_deleted_ = 0;
            }
        }

        void noop() {}
    private:
        auto_delete(const auto_delete&);
        auto_delete&operator=(const auto_delete&);
    };

    template<class T>
    struct auto_delete<T*>; //! \note Leave it be. Do not write any implementation
    }
}

namespace npp { namespace ext {
    template<> inline
        auto_delete< npp::NppConfig >::~auto_delete()
    {
        if ( ptr_ref_to_be_deleted_ )
        {
            delete ptr_ref_to_be_deleted_;
            ptr_ref_to_be_deleted_ = NULL;
        }
    }
}
}

namespace
{
    npp::NppConfig* CreateNppConfig(bool support_plain, bool sign_pack, bool verify_sign)
    {
        npp::NppConfig* npp_config = new npp::NppConfig(support_plain, sign_pack, verify_sign);
#define H_ADD_KEY(no) {\
        npp_config->AddIdeaKey(no, idea_key##no);\
        npp_config->AddSimpleRSAKey(no, g_slrsa_private_key##no, g_slrsa_private_key##no##_len, g_slrsa_public_key##no, g_slrsa_public_key##no##_len);\
        npp_config->AddOpenSSLRSAKey(no, g_rsa_private_key##no, g_rsa_private_key##no##_len, g_rsa_public_key##no, g_rsa_public_key##no##_len);\
        }

        H_ADD_KEY(1);
        H_ADD_KEY(2);
        H_ADD_KEY(3);
        H_ADD_KEY(4);

#undef  H_ADD_KEY

        return npp_config;
    }

    npp::NppConfig* CreateServerNppConfig(bool support_plain, bool sign_pack, bool verify_sign)
    {
        npp::NppConfig* npp_config = new npp::NppConfig(support_plain, sign_pack, verify_sign);
#define H_ADD_KEY(no) {\
            npp_config->AddIdeaKey(no, idea_key##no);\
            npp_config->AddSimpleRSAKey(no, g_server_slrsa_private_key##no, g_server_slrsa_private_key##no##_len, g_server_slrsa_public_key##no, g_server_slrsa_public_key##no##_len);\
            npp_config->AddOpenSSLRSAKey(no, g_server_rsa_private_key##no, g_server_rsa_private_key##no##_len, g_server_rsa_public_key##no, g_server_rsa_public_key##no##_len);\
        }

        H_ADD_KEY(1);
        H_ADD_KEY(2);
        H_ADD_KEY(3);
        H_ADD_KEY(4);

#undef  H_ADD_KEY

        return npp_config;
    }

    npp::NppConfig* CreateClientNppConfig(bool support_plain, bool sign_pack, bool verify_sign)
    {
        npp::NppConfig* npp_config = new npp::NppConfig(support_plain, sign_pack, verify_sign);
#define H_ADD_KEY(no) {\
            npp_config->AddIdeaKey(no, idea_key##no);\
            npp_config->AddSimpleRSAKey(no, g_client_slrsa_private_key##no, g_client_slrsa_private_key##no##_len, g_client_slrsa_public_key##no, g_client_slrsa_public_key##no##_len);\
            npp_config->AddOpenSSLRSAKey(no, g_client_rsa_private_key##no, g_client_rsa_private_key##no##_len, g_client_rsa_public_key##no, g_client_rsa_public_key##no##_len);\
        }

        H_ADD_KEY(1);
        H_ADD_KEY(2);
        H_ADD_KEY(3);
        H_ADD_KEY(4);

#undef  H_ADD_KEY

        return npp_config;
    }
}

size_t curl_write_func( void* ptr, size_t size, size_t nmemb, void *usrptr )
{
    std::stringstream* ss = ( std::stringstream* ) usrptr;
    ss->write( (char*)ptr, size * nmemb );
    return nmemb * size;
}

bool do_curl_post(const std::string& server_url, const std::string& request_data, std::string& result)
{
    std::stringstream ss;
    CURL *curl_handler = curl_easy_init();

    ::curl_easy_setopt( curl_handler, CURLOPT_URL, server_url.data() );
    ::curl_easy_setopt( curl_handler, CURLOPT_NOSIGNAL, (long)1L );
    ::curl_easy_setopt( curl_handler, CURLOPT_TIMEOUT, (long)10000L );

    ::curl_easy_setopt( curl_handler, CURLOPT_WRITEFUNCTION, curl_write_func );
    ::curl_easy_setopt( curl_handler, CURLOPT_WRITEDATA, &ss );//this will be used in writeFunc as the usrptr
    ::curl_easy_setopt( curl_handler, CURLOPT_CONNECTTIMEOUT, (long)10000L );

    ::curl_easy_setopt( curl_handler, CURLOPT_POSTFIELDS, request_data.data() );
    ::curl_easy_setopt( curl_handler, CURLOPT_POSTFIELDSIZE, request_data.size() );
    curl_slist* m_curl_slist = NULL;
    m_curl_slist = ::curl_slist_append( m_curl_slist, "Expect:" );
    ::curl_easy_setopt( curl_handler, CURLOPT_HTTPHEADER, m_curl_slist );

    CURLcode curl_code = ::curl_easy_perform(curl_handler);
    curl_slist_free_all( m_curl_slist );
    if (CURLE_OK == curl_code)
    {
        result = ss.str();
        return true;
    }
    else
    {
        result = curl_easy_strerror(curl_code);
        fprintf(stderr, "curl_easy_perform ret=%d [%s]\n", curl_code, result.data());
        return false;
    }
}

bool do_curl_multi_part_post(const std::string& server_url, const std::string& post_key, const std::string& request_data, std::string& result)
{
    std::stringstream ss;
    CURL *curl_handler = curl_easy_init();

    ::curl_easy_setopt( curl_handler, CURLOPT_URL, server_url.data() );
    ::curl_easy_setopt( curl_handler, CURLOPT_NOSIGNAL, (long)1L );
    ::curl_easy_setopt( curl_handler, CURLOPT_TIMEOUT, (long)10000L );

    ::curl_easy_setopt( curl_handler, CURLOPT_WRITEFUNCTION, curl_write_func );
    ::curl_easy_setopt( curl_handler, CURLOPT_WRITEDATA, &ss );//this will be used in writeFunc as the usrptr
    ::curl_easy_setopt( curl_handler, CURLOPT_CONNECTTIMEOUT, (long)10000L );

    curl_slist* m_curl_slist = NULL;
    m_curl_slist = ::curl_slist_append( m_curl_slist, "Expect:" );
    ::curl_easy_setopt( curl_handler, CURLOPT_HTTPHEADER, m_curl_slist );

    struct curl_httppost* formpost = NULL;
    struct curl_httppost* lastformpost = NULL;
    
    CURLFORMcode fcode = ::curl_formadd( &formpost,
        &lastformpost,
        CURLFORM_COPYNAME, post_key.data(),//"p2sp_request",
        CURLFORM_COPYCONTENTS, request_data.data(),
        CURLFORM_CONTENTSLENGTH, (long)request_data.size(),
        CURLFORM_END );

    if(  fcode != CURL_FORMADD_OK )
    {
        return false;
    }

    curl_easy_setopt( curl_handler, CURLOPT_HTTPPOST, formpost );

    CURLcode curl_code = ::curl_easy_perform(curl_handler);
    curl_slist_free_all( m_curl_slist );
    if (CURLE_OK == curl_code)
    {
        result = ss.str();
        return true;
    }
    else
    {
        result = curl_easy_strerror(curl_code);
        fprintf(stderr, "curl_easy_perform ret=%d [%s]\n", curl_code, result.data());
        return false;
    }
}

bool do_http_request(const std::string& server_url, const std::string& request_data, std::string& result)
{
    npp::NppConfig* npp_config = CreateNppConfig(false, true, true);
    npp::ext::auto_delete<npp::NppConfig> npp_config_auto_deleted(npp_config);
    const char * raw_data = request_data.data();
    size_t raw_data_len = request_data.size();

    char packed_data[1024] = {};
    size_t packed_data_len = sizeof(packed_data);
    npp::MessagePacker packer;
    assert(packer.Pack(raw_data, raw_data_len, packed_data, packed_data_len));

    std::string server_resp_encrypt_data;
    if (do_curl_post(server_url, std::string(packed_data, packed_data_len), server_resp_encrypt_data))
    {
        npp::MessageUnpacker unpacker;
        if (unpacker.Unpack(server_resp_encrypt_data.data(), server_resp_encrypt_data.size()))
        {
            result = std::string(unpacker.Data(), unpacker.Size());
            return true;
        }
        else
        {
            result = unpacker.strerror();
            return false;
        }
    }
    else
    {
        result = std::string("Http request failed:") + result;
        return false;
    }
}



bool do_p2sp_key_test()
{
    /** RSA key */
    /*{{{*/
    //use to sign output packet sign
    const u_char private_key1[1024] = {48,130,1,58,2,1,0,2,65,0,150,174,244,171,118,131,0,41,228,219,169,104,69,56,73,121,97,219,246,66,161,196,101,134,19,47,56,169,24,249,117,173,45,183,218,17,60,15,6,245,0,174,99,86,245,106,251,223,80,238,1,158,146,57,55,1,176,76,115,244,158,155,174,107,2,3,1,0,1,2,64,83,208,193,155,214,114,11,215,65,203,197,177,144,63,60,239,93,181,162,135,113,191,242,208,223,62,246,255,104,58,234,111,45,105,81,190,85,229,126,92,242,73,238,179,2,54,124,149,162,208,123,15,61,51,13,84,246,45,181,53,199,115,202,81,2,33,0,198,207,162,62,146,96,187,246,210,100,105,38,230,39,48,234,151,251,165,234,64,38,242,166,179,32,52,170,156,105,24,111,2,33,0,194,7,56,181,205,123,164,253,164,124,129,46,191,61,72,200,253,128,1,0,203,89,70,121,228,64,139,243,106,120,175,197,2,32,4,197,149,10,85,111,22,243,220,166,230,83,53,176,249,30,152,89,68,233,51,114,251,221,254,108,166,118,245,220,27,231,2,33,0,145,29,3,141,253,67,199,79,40,81,49,240,187,120,227,81,231,62,112,1,159,20,131,0,48,245,17,118,153,31,240,29,2,32,49,195,118,188,169,28,162,148,46,172,77,85,171,127,99,81,155,190,224,52,68,52,187,13,129,35,110,118,234,135,236,219};
    const size_t private_key1_len = 318;

    const u_char private_key2[1024] = {48,130,2,93,2,1,0,2,129,129,0,186,40,28,61,169,207,140,229,184,135,92,221,191,111,122,192,65,79,157,74,40,150,197,245,157,122,186,218,18,57,200,120,15,140,121,212,227,159,40,75,240,201,53,236,157,27,224,56,12,199,21,215,71,181,228,123,229,137,95,226,174,201,250,152,23,124,19,244,203,238,203,237,61,115,231,154,21,133,187,250,155,94,59,55,184,57,31,138,152,63,49,65,128,255,16,183,13,30,135,14,193,21,58,164,67,36,234,126,235,199,180,114,113,92,212,119,226,53,102,119,198,15,220,219,227,3,69,93,2,3,1,0,1,2,129,128,30,226,114,181,4,76,75,234,252,239,112,71,213,239,239,228,159,177,78,190,51,247,183,198,37,39,108,130,171,141,108,166,6,166,94,188,36,59,142,154,242,202,223,40,111,116,101,129,199,20,236,153,183,235,4,138,77,173,185,251,200,213,247,190,37,142,36,176,27,249,10,215,125,188,55,190,172,165,35,206,44,175,144,220,2,138,169,110,64,19,113,241,93,8,151,247,219,28,157,4,154,27,138,101,7,64,190,229,4,206,250,26,252,185,165,234,248,149,223,13,43,116,39,167,117,199,238,189,2,65,0,220,248,93,216,176,32,167,155,52,111,171,235,204,131,252,34,130,164,46,151,89,223,122,214,196,163,189,168,156,201,233,49,93,127,120,159,227,8,121,100,251,45,160,31,67,5,92,237,215,171,179,214,114,96,50,233,56,0,199,73,199,102,181,107,2,65,0,215,170,232,70,253,194,65,152,234,15,242,111,171,199,215,188,5,24,193,153,148,10,28,73,142,221,66,22,104,117,92,64,94,115,193,63,186,108,109,154,128,68,46,255,52,66,193,132,52,63,58,47,120,37,211,150,152,99,40,202,202,252,90,87,2,65,0,196,6,197,98,68,165,67,107,9,114,131,198,180,112,230,13,75,110,17,51,13,116,151,9,205,250,32,119,99,88,47,186,46,98,182,4,201,40,172,96,171,255,70,204,84,237,126,10,53,72,202,74,84,191,8,139,34,182,118,20,250,131,32,47,2,65,0,188,240,158,179,235,6,111,63,142,247,79,150,163,176,221,128,124,26,151,41,123,247,107,150,201,209,111,95,128,62,41,6,191,120,187,185,160,17,243,231,162,45,153,218,188,167,43,48,46,49,162,65,10,10,97,151,18,131,244,173,205,45,77,219,2,64,111,194,245,128,231,116,168,62,184,99,16,14,36,107,164,54,216,39,84,32,101,63,23,191,22,88,243,175,148,112,60,36,35,245,175,218,16,72,109,209,189,69,86,40,104,218,104,144,219,98,156,192,149,130,132,39,247,108,68,109,230,164,93,243};
    const size_t private_key2_len = 609;


    //use to verify input packet sign
    const u_char public_key1[1024] = {48,72,2,65,0,150,174,244,171,118,131,0,41,228,219,169,104,69,56,73,121,97,219,246,66,161,196,101,134,19,47,56,169,24,249,117,173,45,183,218,17,60,15,6,245,0,174,99,86,245,106,251,223,80,238,1,158,146,57,55,1,176,76,115,244,158,155,174,107,2,3,1,0,1};
    const size_t public_key1_len = 74;

    const u_char public_key2[1024] = {48,129,137,2,129,129,0,186,40,28,61,169,207,140,229,184,135,92,221,191,111,122,192,65,79,157,74,40,150,197,245,157,122,186,218,18,57,200,120,15,140,121,212,227,159,40,75,240,201,53,236,157,27,224,56,12,199,21,215,71,181,228,123,229,137,95,226,174,201,250,152,23,124,19,244,203,238,203,237,61,115,231,154,21,133,187,250,155,94,59,55,184,57,31,138,152,63,49,65,128,255,16,183,13,30,135,14,193,21,58,164,67,36,234,126,235,199,180,114,113,92,212,119,226,53,102,119,198,15,220,219,227,3,69,93,2,3,1,0,1};
    const size_t public_key2_len = 140;

    const unsigned char g_rsa_prvFileKey1[706] = {
        0x00,0x04,0xc4,0x44,0x11,0x7f,0xd4,0x53,0x1b,0xc2,0x92,0x7e,0x4d,0xb2,0x8a,0x3a,0x9f,0xdc,0xde,0x7a,0x98,0x29,0x68,0xc5,0x24,0x7f,0x43,0x69,0x48,0x70,0x5e,0x9a,
        0x9d,0xc3,0x00,0x66,0x86,0xee,0xc7,0x52,0xd4,0xea,0xdc,0x1b,0xd5,0xaf,0xd5,0x49,0x22,0x3d,0x8a,0x9b,0x8c,0xd1,0xda,0x22,0x6b,0xb5,0x7d,0x17,0xcc,0x12,0x84,0xd2,
        0x45,0x8c,0x63,0x86,0xae,0x5b,0x23,0xd1,0x52,0xb0,0xe1,0x83,0x6e,0x2b,0xb3,0xa0,0xc1,0xdd,0xba,0xf3,0xb6,0x27,0x8f,0x49,0x8d,0xc1,0x2f,0x13,0x5f,0xb7,0x04,0x93,
        0x76,0x3a,0x6b,0xf0,0x2b,0x5b,0x0d,0x20,0x67,0x05,0x06,0x5e,0x27,0x40,0x02,0xbe,0x63,0xbe,0x4a,0x19,0xf3,0xd4,0x75,0xec,0xd4,0xeb,0xc7,0xca,0x30,0xcb,0xaf,0x00,
        0xda,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
        0x00,0x01,0x55,0x8c,0xf2,0x2f,0xcd,0x46,0x78,0xc8,0x44,0x80,0xe7,0xaf,0x56,0x8f,0x9d,0x55,0x72,0x68,0xef,0xe0,0xc4,0xf9,0x82,0x22,0x33,0x29,0x36,0x59,0x3c,0xf3,
        0x9a,0xa7,0x00,0x8a,0xb0,0x70,0x6e,0xd4,0x0d,0x59,0x5e,0x9e,0x87,0x73,0xc0,0xbd,0xc3,0x3e,0x1e,0x28,0x15,0xa6,0xf7,0xb5,0x9f,0x4b,0x99,0xfe,0x80,0x86,0xe5,0xfc,
        0x9e,0x31,0x83,0x3d,0x64,0x8a,0x04,0x02,0x68,0xaa,0xee,0x44,0x15,0xba,0x5d,0x6e,0x63,0x37,0x94,0x3e,0x5b,0x1e,0x45,0x17,0x4f,0xf8,0x39,0xb1,0x51,0xbe,0x74,0xe6,
        0x28,0xa0,0x22,0xff,0x44,0xcc,0xe0,0xb8,0x89,0x73,0xfe,0x5d,0x49,0xad,0x24,0xd5,0xee,0xd1,0x45,0xc9,0x73,0xb7,0xab,0x6f,0x76,0xea,0x12,0xb8,0x8f,0x6a,0xeb,0x6a,
        0xcc,0x0d,0xe7,0xeb,0xfe,0x1b,0x61,0x62,0x95,0x1c,0x41,0x0c,0xa5,0x4f,0x99,0x4e,0x13,0x64,0x4d,0xf4,0xc4,0x30,0xfb,0x73,0xae,0xfe,0x08,0xb0,0x93,0x0b,0x8d,0xb4,
        0xcf,0xaa,0xc1,0xda,0xed,0x1b,0xe1,0x5e,0xe2,0xa0,0xcd,0xc8,0xee,0x74,0x14,0xe4,0x6c,0xf7,0x99,0x3f,0x63,0x95,0x75,0xdd,0x62,0x98,0xd3,0xb9,0x17,0x37,0x88,0xcc,
        0xb2,0xf3,0xd8,0xa4,0x69,0xdf,0x22,0x05,0x18,0xfe,0x1e,0xf1,0xe5,0x6f,0x01,0x65,0x05,0x0a,0xa8,0xab,0x9c,0x26,0xfc,0x2a,0xec,0x12,0xf8,0xd9,0x26,0x0d,0x7c,0xb9,
        0x97,0x30,0x94,0x16,0x8d,0xa6,0xfe,0x2e,0xfc,0xe8,0x90,0x80,0x24,0xf1,0x79,0x05,0x67,0x26,0x6d,0xcc,0x54,0x08,0x8e,0xf5,0x1b,0x1d,0xae,0x62,0xe5,0xf2,0xa6,0x08,
        0x11,0xbb,0x30,0x59,0xbb,0xd5,0x3b,0x7d,0x50,0xf6,0xdd,0xfc,0xe3,0xed,0xef,0x59,0x1e,0xa3,0xd7,0xb8,0xc2,0xba,0x2f,0x82,0x13,0xa6,0x74,0x6b,0x53,0x8c,0xa2,0x13,
        0x63,0x04,0x07,0x7c,0x3b,0xd8,0x87,0x28,0xbf,0xf8,0xa4,0x4e,0x52,0xa0,0x32,0xc6,0xd8,0x8c,0xda,0x0f,0x24,0x14,0xc1,0xc8,0xd0,0xc8,0x69,0xc3,0x79,0xba,0xa3,0x33,
        0x81,0xcf,0x29,0x8d,0x4f,0x69,0x26,0xc3,0x47,0x89,0xe6,0x31,0x8b,0x4a,0x01,0x40,0x78,0xf9,0x14,0x64,0xe5,0xec,0x6c,0x4d,0x67,0x3e,0x34,0x50,0xa2,0x05,0xd0,0x38,
        0x60,0x91,0x46,0xb6,0x14,0xb1,0x44,0xeb,0x8a,0x42,0xa9,0x04,0x8b,0x11,0x6d,0x9e,0xe5,0xab,0xef,0x3f,0x53,0x96,0xd8,0xa4,0x96,0x70,0xd8,0xf3,0xcb,0x1b,0x01,0x51,
        0x66,0xe5,0xca,0xc3,0x77,0x3a,0x86,0x5a,0x25,0x2e,0x31,0xf7,0x85,0xbc,0x46,0x12,0x07,0x15,0xaf,0x39,0x1a,0x87,0x31,0x91,0x57,0x74,0xde,0x10,0x6e,0xbf,0xa4,0x25,
        0xd9,0x14,0x33,0xce,0x34,0x8b,0xe3,0xdf,0x57,0x78,0xbd,0xed,0x64,0x78,0x9d,0x29,0x63,0xdb,0xb5,0x15,0x83,0x42,0x2d,0x6e,0xfc,0xcc,0xf8,0x50,0x06,0x17,0x48,0xae,
        0xd3,0x38
    };

    const unsigned char g_rsa_pubFileKey1[258] = {
        0x00,0x04,0xc4,0x44,0x11,0x7f,0xd4,0x53,0x1b,0xc2,0x92,0x7e,0x4d,0xb2,0x8a,0x3a,0x9f,0xdc,0xde,0x7a,0x98,0x29,0x68,0xc5,0x24,0x7f,0x43,0x69,0x48,0x70,0x5e,0x9a,
        0x9d,0xc3,0x00,0x66,0x86,0xee,0xc7,0x52,0xd4,0xea,0xdc,0x1b,0xd5,0xaf,0xd5,0x49,0x22,0x3d,0x8a,0x9b,0x8c,0xd1,0xda,0x22,0x6b,0xb5,0x7d,0x17,0xcc,0x12,0x84,0xd2,
        0x45,0x8c,0x63,0x86,0xae,0x5b,0x23,0xd1,0x52,0xb0,0xe1,0x83,0x6e,0x2b,0xb3,0xa0,0xc1,0xdd,0xba,0xf3,0xb6,0x27,0x8f,0x49,0x8d,0xc1,0x2f,0x13,0x5f,0xb7,0x04,0x93,
        0x76,0x3a,0x6b,0xf0,0x2b,0x5b,0x0d,0x20,0x67,0x05,0x06,0x5e,0x27,0x40,0x02,0xbe,0x63,0xbe,0x4a,0x19,0xf3,0xd4,0x75,0xec,0xd4,0xeb,0xc7,0xca,0x30,0xcb,0xaf,0x00,
        0xda,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
        0x00,0x01

    };


    const unsigned char g_rsa_prvFileKey2[706] = {
        0x00,0x04,0xb0,0xe9,0xa4,0x51,0x8a,0xdc,0x0c,0x06,0x9c,0x8d,0xbc,0x22,0x9f,0x95,0x4d,0xdc,0xd3,0x3d,0x58,0xa5,0x4a,0x1a,0x68,0x27,0x90,0x5f,0x77,0xfa,0xc8,0x80,
        0x5e,0x3b,0xa9,0xd5,0x45,0x5c,0x47,0x62,0xb7,0x36,0x15,0x56,0xfc,0xf8,0x8a,0xc8,0x65,0x7b,0x1a,0xd6,0x25,0xbd,0x31,0x58,0xd9,0x76,0x60,0xd4,0xc5,0xce,0x5b,0x26,
        0x34,0xfa,0xc8,0x9c,0x0e,0x28,0x52,0x03,0xab,0x18,0x91,0x1f,0x95,0x10,0x59,0xec,0xed,0xa7,0x20,0x25,0x13,0xa9,0x9d,0xe9,0xdd,0xc6,0x26,0x17,0xfc,0x87,0x43,0x2d,
        0xae,0x86,0xfc,0x99,0xe0,0xf9,0x06,0x47,0x5e,0x05,0x7e,0x44,0x3a,0xe3,0xb5,0x37,0xec,0xac,0x4f,0xe5,0xe2,0x8d,0xc1,0x5c,0x7c,0xbd,0x07,0x91,0x9d,0xb6,0x6a,0x81,
        0xfc,0xe1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
        0x00,0x01,0x4c,0x7c,0x56,0xec,0x62,0x2a,0x8c,0x90,0x77,0x32,0xd7,0xf9,0xe8,0x20,0xb6,0xcf,0x18,0x0c,0xd7,0xbc,0x6e,0x73,0x48,0x40,0x82,0xac,0xa3,0xc4,0xaa,0xd6,
        0xc4,0xe6,0xea,0xa0,0x28,0x22,0xa3,0x42,0x4c,0x8f,0x77,0x5e,0x6a,0x74,0x52,0x1c,0x1d,0xb3,0xc1,0x80,0x80,0x44,0x71,0x87,0x46,0x4d,0x65,0xc3,0xd7,0xd9,0x45,0x93,
        0x19,0x27,0xf3,0x48,0x10,0x5f,0xf0,0xa4,0x5f,0xb8,0x29,0x4f,0x94,0xf4,0x5b,0x99,0xdf,0x44,0x1a,0x41,0xe3,0x2d,0x03,0x98,0x20,0x5b,0x9d,0x00,0xb1,0x24,0x00,0x28,
        0x8b,0xff,0x8a,0x21,0x49,0x9b,0x76,0x38,0x25,0x28,0xeb,0x2a,0xed,0x40,0xcb,0x74,0xe6,0xf0,0x46,0xa1,0xfc,0x98,0xbf,0x5f,0xf0,0x9a,0xda,0x56,0x73,0x86,0x3f,0xb1,
        0xbb,0xa1,0xde,0xf5,0xa2,0x79,0x32,0x14,0x62,0x30,0xf0,0xaa,0x4b,0x4e,0x1f,0x0f,0xf2,0xf5,0x16,0x03,0x97,0x01,0xc6,0xbf,0x8d,0x84,0x88,0x3d,0x17,0x04,0x47,0x2f,
        0x46,0x8d,0x01,0x31,0x21,0xe1,0xc1,0xc9,0x6c,0x8e,0x05,0x80,0x70,0x7b,0x25,0xad,0xe1,0x4c,0xbe,0xf5,0xbb,0x75,0x47,0xd5,0x62,0x59,0xee,0x91,0x85,0x8c,0x3d,0x89,
        0x1a,0x6d,0xcb,0x21,0x23,0x62,0xa4,0x83,0x3d,0x71,0x87,0x6a,0x4c,0x8f,0x64,0xbf,0x6d,0x3e,0x11,0xcf,0x8b,0x3a,0xe8,0x16,0x33,0xab,0xf2,0x7e,0x31,0xff,0x14,0x18,
        0x2c,0x3c,0x5a,0x45,0x21,0xed,0x8b,0x8c,0x22,0x48,0x5c,0x1f,0xff,0xb7,0xca,0xbd,0x65,0x71,0x42,0xbf,0x02,0x43,0x10,0xfc,0x53,0x0c,0x47,0xb3,0x30,0x63,0xf8,0x9a,
        0xe3,0xc5,0x4e,0xc5,0x55,0xbb,0x9f,0xd7,0xd7,0xc1,0x16,0xa5,0xf3,0xa9,0x0c,0x0c,0x64,0x77,0xf6,0x69,0x1a,0x46,0xc4,0x63,0x14,0xaa,0x88,0x3f,0x9d,0x0c,0x23,0xe2,
        0x2d,0xf8,0xcf,0x3c,0xfe,0x8d,0x76,0x1b,0xa5,0xc0,0x9f,0x6c,0xfb,0x50,0x66,0xc5,0x81,0xdd,0xcd,0x71,0x9f,0xe3,0x15,0x97,0xec,0x01,0x7d,0xe9,0xe7,0xd6,0xde,0x3e,
        0xbc,0x19,0x7e,0x85,0x21,0x79,0x2b,0x66,0xe3,0x3a,0x77,0x51,0xea,0x65,0xd6,0x26,0xb5,0x70,0x57,0xbf,0xa1,0xc5,0x0b,0x11,0xe9,0x15,0x4c,0x70,0xf5,0xcb,0x1f,0x44,
        0xff,0x28,0x88,0x41,0x4f,0x24,0x9a,0x2a,0xaa,0x9f,0xcf,0x61,0xce,0xf1,0x37,0x42,0x48,0x91,0x07,0x35,0xd9,0xbe,0xd4,0x31,0x95,0xb8,0xac,0x60,0x1b,0xdf,0xe8,0xd4,
        0xf0,0xd1,0xa2,0x51,0xe4,0xb7,0x8a,0x47,0x2e,0x58,0xaa,0x16,0x83,0xc3,0x49,0xf7,0xdb,0xa9,0x8b,0x91,0x5d,0xa7,0x65,0x01,0x0e,0xde,0xf9,0x20,0x58,0x81,0x04,0x71,
        0x88,0x2c,0xcd,0xdf,0x98,0xd0,0x79,0x37,0x15,0x1c,0x0b,0x87,0x62,0xa2,0x63,0x7b,0x81,0xab,0x49,0xaf,0x47,0x45,0x12,0xa8,0x54,0x87,0x88,0x80,0xe8,0x07,0x40,0x70,
        0x17,0x64
    };

    const unsigned char g_rsa_pubFileKey2[258] = {
        0x00,0x04,0xb0,0xe9,0xa4,0x51,0x8a,0xdc,0x0c,0x06,0x9c,0x8d,0xbc,0x22,0x9f,0x95,0x4d,0xdc,0xd3,0x3d,0x58,0xa5,0x4a,0x1a,0x68,0x27,0x90,0x5f,0x77,0xfa,0xc8,0x80,
        0x5e,0x3b,0xa9,0xd5,0x45,0x5c,0x47,0x62,0xb7,0x36,0x15,0x56,0xfc,0xf8,0x8a,0xc8,0x65,0x7b,0x1a,0xd6,0x25,0xbd,0x31,0x58,0xd9,0x76,0x60,0xd4,0xc5,0xce,0x5b,0x26,
        0x34,0xfa,0xc8,0x9c,0x0e,0x28,0x52,0x03,0xab,0x18,0x91,0x1f,0x95,0x10,0x59,0xec,0xed,0xa7,0x20,0x25,0x13,0xa9,0x9d,0xe9,0xdd,0xc6,0x26,0x17,0xfc,0x87,0x43,0x2d,
        0xae,0x86,0xfc,0x99,0xe0,0xf9,0x06,0x47,0x5e,0x05,0x7e,0x44,0x3a,0xe3,0xb5,0x37,0xec,0xac,0x4f,0xe5,0xe2,0x8d,0xc1,0x5c,0x7c,0xbd,0x07,0x91,0x9d,0xb6,0x6a,0x81,
        0xfc,0xe1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
        0x00,0x01
    };
    /*}}}*/
    const unsigned char k1[16]={0x33,0xA1,0x20,0xAE,0x56,0x05,0x67,0x07,0x88,0x09,0x92,0x8B,0xC1,0x0D,0xE3,0x3F};
    const unsigned char k2[16]={0x7E,0xC2,0x44,0xAD,0x36,0x15,0x67,0x76,0x8F,0x20,0x91,0x1C,0xC5,0x1D,0xE8,0x5A};

    bool support_plain = false;
    bool sign_pack     = true;
    bool verify_sign   = true;
    npp::NppConfig* npp_config = new npp::NppConfig(support_plain, sign_pack, verify_sign);
    npp::ext::auto_delete<npp::NppConfig> npp_config_auto_deleted(npp_config);

    npp_config->AddOpenSSLRSAKey(1, private_key1, private_key1_len, public_key1, public_key1_len);
    npp_config->AddOpenSSLRSAKey(2, private_key2, private_key2_len, public_key2, public_key2_len);

    npp_config->AddSimpleRSAKey(1, g_rsa_prvFileKey1, sizeof(g_rsa_prvFileKey1), g_rsa_pubFileKey1, sizeof(g_rsa_pubFileKey1));
    npp_config->AddSimpleRSAKey(2, g_rsa_prvFileKey2, sizeof(g_rsa_prvFileKey2), g_rsa_pubFileKey2, sizeof(g_rsa_pubFileKey2));

    npp_config->AddIdeaKey(1, k1);
    npp_config->AddIdeaKey(2, k2);

    for (int i = 1; i <= 2; ++i)
    {

        //OpenSSL RSA
        {
            const char * raw_data = "0047880d4a1cf095fa4b13f9cc9f06f8";
            size_t raw_data_len = strlen(raw_data);
            npp::OpenSSLRSA* rsa = npp_config->GetOpenSSLRSA(i);
            assert(rsa);
            std::string sigret;
            assert(rsa->sign(npp::OpenSSLRSA::ST_NID_sha1, raw_data, raw_data_len, sigret));
            assert(rsa->verify(npp::OpenSSLRSA::ST_NID_sha1, raw_data, raw_data_len, sigret.data(), sigret.size()));
        }

        //Simple RSA
        {
            const char * raw_data = "0047880d4a1cf095fa4b13f9cc9f06f8";
            size_t raw_data_len = strlen(raw_data);
            npp::SimpleRSA* rsa = npp_config->GetSimpleRSA(i);
            assert(rsa);
            std::string sigret;
            assert(rsa->sign(raw_data, raw_data_len, sigret));
            assert(rsa->verify(raw_data, raw_data_len, sigret.data(), sigret.size()));
        }
    }

    std::string request_data = 
        "fid=59e20e2ec60d5946ad54b64a3deb1c83\r\n"
        "mid=ac9219aa5232c4e519ae5fcb4d77ae5b\r\n"
        "product=dlctest\r\n"
        "combo=dlctest\r\n"
        "version=4.4\r\n";

    std::string compressed_data;
    assert(zlib_compress_data(request_data.data(), request_data.length(), compressed_data));
   
    char packed_data[1024] = {};
    size_t packed_data_len = sizeof(packed_data);
    npp::MessagePacker packer;
    assert(packer.Pack(compressed_data.data(), compressed_data.length(), packed_data, packed_data_len));

    std::string server_resp_encrypt_data;
    
    if (do_curl_multi_part_post("http://build7.kill.corp.qihoo.net:8011/urlquery", "p2sp_request", std::string(packed_data, packed_data_len), server_resp_encrypt_data))
    {
        npp::MessageUnpacker unpacker;
        if (unpacker.Unpack(server_resp_encrypt_data.data(), server_resp_encrypt_data.size()))
        {
            std::string result;
            assert(zlib_uncompress_data(unpacker.Data(), unpacker.Size(), result));
            fprintf(stdout, "p2s request OK!\n%s\n", result.data());
            return true;
        }
        else
        {
            std::string result = unpacker.strerror();
            fprintf(stderr, "error:[%s]\n", result.data());
            return false;
        }
    }
    else
    {
        fprintf(stderr, "http request failed! %s\n", server_resp_encrypt_data.data());
    }

    return true;
}


bool do_msv_test()
{
    /** RSA key */ 
    /*{{{*/ 
    //openssl RSA_sign RSA_verify API key
    //use to sign output packet sign 
    static const u_char g_rsa_private_key1[319] = { 48,130,1,59,2,1,0,2,65,0,231,79,8,95,4,52,152,131,196,32,101,161,234,45,39,86,210,114,255,153,115,38,76,144,222,73,31,160,27,221,73,65,164,153,90,17,53,137,199,102,6,144,20,97,124,172,169,234,84,148,184,38,111,207,131,240,197,95,192,142,164,27,59,119,2,3,1,0,1,2,65,0,223,197,20,123,31,77,102,146,106,165,80,205,0,8,40,187,148,162,77,229,124,129,123,166,214,116,117,84,230,64,0,129,218,105,66,177,127,159,240,177,115,52,111,133,111,5,195,240,2,112,38,244,60,227,128,252,93,214,9,216,188,197,6,217,2,33,0,253,150,253,24,229,212,223,54,222,249,136,4,181,209,17,68,209,74,166,178,237,16,104,1,141,150,73,190,111,236,44,115,2,33,0,233,129,212,239,7,254,100,187,121,243,143,86,186,226,139,164,71,161,92,14,79,236,131,188,6,2,240,118,251,121,87,237,2,32,69,163,73,251,165,89,176,182,115,194,216,124,90,165,127,245,130,247,218,17,54,146,147,205,33,97,140,252,179,229,138,75,2,32,103,98,44,60,136,117,129,115,223,210,142,44,0,34,61,97,70,181,146,100,99,206,123,164,203,164,145,130,156,100,101,33,2,33,0,183,203,22,164,85,38,37,19,198,184,200,249,135,168,42,11,126,30,53,164,242,29,20,243,255,219,26,30,89,132,25,234 };
    static const size_t g_rsa_private_key1_len = 319;

    static const u_char g_rsa_private_key2[609] = { 48,130,2,93,2,1,0,2,129,129,0,215,126,134,113,238,82,216,72,167,228,105,144,218,200,90,127,190,219,84,255,90,174,48,101,92,138,46,186,97,162,62,150,115,109,90,108,103,126,104,249,92,220,65,182,216,14,73,223,170,75,223,170,106,243,77,204,173,48,242,155,130,23,193,88,74,67,63,92,240,64,0,1,209,175,229,237,202,63,34,243,218,200,93,120,19,124,21,67,220,194,132,186,167,186,76,183,227,67,53,80,171,159,131,130,62,24,141,150,54,57,195,35,36,67,188,178,167,19,117,2,228,238,242,155,248,102,184,5,2,3,1,0,1,2,129,129,0,131,218,163,32,235,22,61,200,151,18,39,149,190,136,128,247,81,44,155,33,115,182,201,93,251,245,129,10,1,219,104,56,94,128,54,167,197,219,143,23,165,62,15,231,116,227,169,71,245,199,95,31,195,57,4,13,140,155,58,150,244,78,220,185,173,168,102,132,155,86,126,14,66,162,89,55,139,194,113,135,34,57,203,43,198,47,58,201,122,222,134,160,216,218,125,154,154,80,107,142,228,250,77,237,221,252,241,116,66,233,38,193,216,74,6,19,142,115,22,160,150,172,189,213,166,146,196,177,2,65,0,235,158,154,92,71,155,112,94,115,185,146,212,57,244,54,35,124,233,169,51,182,60,147,5,212,120,121,1,105,248,50,6,29,117,170,79,42,153,0,197,145,130,127,173,214,88,44,48,94,234,47,241,166,249,51,131,29,251,6,62,31,119,193,15,2,65,0,234,34,72,4,220,65,212,83,91,155,230,234,165,193,129,187,18,51,75,234,146,9,165,148,111,168,218,28,96,60,123,192,25,86,129,202,172,168,185,45,211,78,122,227,107,14,153,103,252,234,213,225,31,28,179,80,219,226,76,211,177,181,13,171,2,64,75,119,150,91,94,56,36,42,172,136,80,198,22,245,232,109,63,114,27,214,203,84,229,134,101,130,92,199,158,40,119,229,75,132,71,147,105,194,109,227,217,242,97,112,205,137,154,69,183,240,236,128,75,9,224,124,235,154,94,106,129,107,186,243,2,65,0,186,22,53,23,103,216,10,97,150,85,250,218,84,147,208,0,87,30,222,31,185,162,97,47,240,239,75,43,114,113,160,9,182,25,195,94,202,139,239,98,52,168,19,147,220,234,229,146,120,186,76,243,120,62,223,102,76,221,56,34,169,3,53,177,2,64,115,124,252,220,40,51,171,96,230,223,101,13,91,69,80,226,247,225,247,63,8,136,168,175,201,85,175,139,128,82,60,205,29,21,241,249,78,219,215,20,173,153,252,166,105,114,141,148,200,224,109,26,65,160,105,204,11,229,89,235,246,62,132,83 };
    static const size_t g_rsa_private_key2_len = 609;


    //use to verify input packet sign
    static const u_char g_rsa_public_key1[74] = {48,72,2,65,0,231,79,8,95,4,52,152,131,196,32,101,161,234,45,39,86,210,114,255,153,115,38,76,144,222,73,31,160,27,221,73,65,164,153,90,17,53,137,199,102,6,144,20,97,124,172,169,234,84,148,184,38,111,207,131,240,197,95,192,142,164,27,59,119,2,3,1,0,1};
    static const size_t g_rsa_public_key1_len = 74;

    static const u_char g_rsa_public_key2[140] = { 48,129,137,2,129,129,0,215,126,134,113,238,82,216,72,167,228,105,144,218,200,90,127,190,219,84,255,90,174,48,101,92,138,46,186,97,162,62,150,115,109,90,108,103,126,104,249,92,220,65,182,216,14,73,223,170,75,223,170,106,243,77,204,173,48,242,155,130,23,193,88,74,67,63,92,240,64,0,1,209,175,229,237,202,63,34,243,218,200,93,120,19,124,21,67,220,194,132,186,167,186,76,183,227,67,53,80,171,159,131,130,62,24,141,150,54,57,195,35,36,67,188,178,167,19,117,2,228,238,242,155,248,102,184,5,2,3,1,0,1 };
    static const size_t g_rsa_public_key2_len = 140;

    //simple rsa, not openssl, if you have any problem, please contact to weizili@360.cn
    static const unsigned char g_slrsa_private_key1[706] = { 0x00, 0x04, 0xb6, 0x55, 0xc9, 0x38, 0x57, 0xa7, 0xf4, 0x65, 0x13, 0x96, 0x53, 0xdf, 0x4b, 0xd4, 0xc1, 0xc8, 0x5a, 0x0c, 0x05, 0x0d, 0x7b, 0xa1, 0xda, 0xd6, 0xe9, 0x7d, 0x82, 0x55, 0xbb, 0x9a, 0xb0, 0x36, 0x07, 0xea, 0xff, 0xbf, 0xcf, 0x3c, 0x5e, 0x69, 0xb8, 0xb7, 0xc8, 0x22, 0xbf, 0xb4, 0x32, 0xa5, 0x80, 0x74, 0x17, 0xb0, 0x2f, 0xda, 0xb3, 0x57, 0xe7, 0x78, 0xd6, 0xb3, 0xd3, 0x83, 0x0e, 0x50, 0x58, 0xbb, 0xc3, 0xfa, 0x66, 0xca, 0x02, 0x25, 0xb8, 0x6c, 0xdb, 0x8e, 0xfc, 0x24, 0x07, 0xf4, 0x85, 0x40, 0xfe, 0x91, 0x15, 0xf2, 0xf4, 0x1e, 0x11, 0x38, 0xea, 0x91, 0x86, 0x6f, 0x51, 0xa0, 0x75, 0xda, 0xde, 0xbd, 0x71, 0x8b, 0x08, 0x44, 0x53, 0xb4, 0x2f, 0x05, 0xe5, 0x0d, 0x00, 0x7f, 0x81, 0x2b, 0xb1, 0xba, 0xc2, 0x75, 0x83, 0x9f, 0x9d, 0x81, 0xe6, 0x3d, 0x07, 0x3f, 0x5e, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x7b, 0xf4, 0xf2, 0x29, 0x35, 0x9e, 0x5f, 0x0d, 0xe0, 0x35, 0x10, 0xab, 0xfb, 0x97, 0x96, 0x6e, 0x28, 0x99, 0x87, 0x4d, 0xd5, 0x41, 0x01, 0xcf, 0x9d, 0x48, 0xd0, 0x34, 0x8c, 0xa7, 0xeb, 0x27, 0xb0, 0x56, 0x58, 0xac, 0x03, 0xad, 0x1c, 0xda, 0x6e, 0xd3, 0xb2, 0x61, 0xbd, 0x46, 0x3a, 0x30, 0x3d, 0x95, 0xaf, 0x0c, 0xfe, 0x5b, 0x86, 0x15, 0x3a, 0xad, 0xf1, 0xf8, 0xaa, 0xd0, 0xac, 0x07, 0x59, 0xa8, 0xad, 0x63, 0x10, 0x30, 0xbe, 0x84, 0xd0, 0xaa, 0xee, 0xfa, 0xed, 0xf2, 0x44, 0x56, 0x78, 0x12, 0x08, 0x5e, 0x66, 0x88, 0x15, 0xab, 0xd4, 0x5a, 0x12, 0x06, 0x58, 0xdc, 0x60, 0xd5, 0xc9, 0x02, 0xa1, 0x47, 0x72, 0x44, 0x0a, 0xb3, 0x8f, 0xb6, 0xcd, 0xbe, 0xbc, 0xc5, 0x16, 0x08, 0x78, 0x09, 0x23, 0x96, 0x53, 0x35, 0xd7, 0x32, 0x76, 0x71, 0x3a, 0x9c, 0x1a, 0x51, 0x74, 0x11, 0xd8, 0xf0, 0x72, 0x86, 0x41, 0xa8, 0xe1, 0x86, 0xab, 0x75, 0xb2, 0x19, 0x27, 0x50, 0x39, 0xe0, 0xab, 0xeb, 0x82, 0x20, 0x54, 0x6c, 0x16, 0x78, 0x3b, 0x5c, 0xd0, 0x94, 0x3b, 0x89, 0x77, 0x4a, 0xbb, 0xc3, 0x17, 0x66, 0xad, 0xf2, 0x68, 0xe8, 0x90, 0x56, 0x18, 0x9b, 0xc9, 0x52, 0xa4, 0x52, 0x1b, 0x2e, 0x11, 0xc8, 0x56, 0x98, 0x68, 0x72, 0x44, 0x76, 0x57, 0x3b, 0x47, 0x12, 0x4d, 0x7f, 0xd7, 0x2a, 0x4d, 0x66, 0x0c, 0x14, 0x23, 0x44, 0x54, 0x1c, 0xa3, 0x69, 0x23, 0xa4, 0x51, 0xdc, 0x1c, 0xac, 0x18, 0xa7, 0xe0, 0x58, 0x3e, 0x30, 0x98, 0xe2, 0xb2, 0x11, 0x5d, 0x09, 0xfe, 0xf5, 0x38, 0x82, 0xa9, 0x3a, 0xf4, 0xf1, 0xc2, 0x02, 0x14, 0x6a, 0x8c, 0x31, 0xfd, 0xd3, 0xe0, 0xe2, 0xbf, 0x83, 0x5b, 0x05, 0xe2, 0x37, 0x29, 0xff, 0xe9, 0x6d, 0xa5, 0x3f, 0x3f, 0xb0, 0xb0, 0xcd, 0x95, 0xbc, 0x69, 0x1f, 0xf7, 0xe4, 0x0c, 0x3e, 0x3a, 0xcc, 0x92, 0xf0, 0x3f, 0xad, 0x65, 0x35, 0x89, 0x14, 0x96, 0x0d, 0xa0, 0x97, 0xb6, 0x6e, 0xa8, 0x72, 0xa8, 0xd9, 0x17, 0xbb, 0x0b, 0x66, 0xbe, 0xf0, 0xaa, 0x8f, 0x49, 0xd2, 0xfe, 0xcc, 0x3f, 0x0b, 0xde, 0x12, 0x71, 0x44, 0x24, 0x7d, 0x33, 0x9b, 0x79, 0xd4, 0xb0, 0xc8, 0xa3, 0x96, 0xf3, 0x60, 0x47, 0x57, 0x77, 0xf7, 0xcf, 0x1b, 0x6d, 0xbd, 0xc3, 0xb0, 0x32, 0xa4, 0xea, 0xbf, 0xe4, 0xee, 0x9e, 0x61, 0xf7, 0xad, 0xcd, 0x9a, 0xa8, 0x7d, 0x16, 0x2e, 0x39, 0x7c, 0x88, 0x6b, 0x9c, 0xee, 0xb2, 0xc7, 0xac, 0x5e, 0x76, 0xcd, 0x77, 0xbf, 0x1c, 0xb5, 0x57, 0x4d, 0x1f, 0x18, 0x94, 0x75, 0x2b, 0x80, 0x2b, 0xe8, 0x2f, 0x21, 0x37, 0x70, 0xb5, 0xb2, 0x30, 0x88, 0xd6, 0x41, 0x12, 0x3b, 0xbc, 0x36, 0xa0, 0x33, 0x6c, 0x59, 0x34, 0xd4, 0x9e, 0xd1, 0x85, 0xb6, 0xa9, 0x09, 0xb8, 0x90, 0x33, 0x90, 0x0f, 0xde, 0xaf, 0x80, 0xbb, 0x97, 0x04, 0x69, 0xda, 0x15, 0xdd, 0xcc, 0x85, 0x28, 0x72, 0x39, 0x65, 0x97, 0x9f, 0x64, 0x55, 0x3e, 0x59, 0x5e, 0x5f, 0x16, 0xb4, 0xdd, 0x18, 0xb6, 0x14, 0x15, 0x74, 0x7d, 0xf6, 0xc7, 0x7e, 0x65, 0x77, 0x67, 0x94, 0xfb, 0x3a, 0xfa, 0x80, 0xb3, 0x10, 0xf0, 0xff, 0x27, 0x1b, 0x74 };

    static const unsigned char g_slrsa_public_key1[258] = { 0x00, 0x04, 0xb6, 0x55, 0xc9, 0x38, 0x57, 0xa7, 0xf4, 0x65, 0x13, 0x96, 0x53, 0xdf, 0x4b, 0xd4, 0xc1, 0xc8, 0x5a, 0x0c, 0x05, 0x0d, 0x7b, 0xa1, 0xda, 0xd6, 0xe9, 0x7d, 0x82, 0x55, 0xbb, 0x9a, 0xb0, 0x36, 0x07, 0xea, 0xff, 0xbf, 0xcf, 0x3c, 0x5e, 0x69, 0xb8, 0xb7, 0xc8, 0x22, 0xbf, 0xb4, 0x32, 0xa5, 0x80, 0x74, 0x17, 0xb0, 0x2f, 0xda, 0xb3, 0x57, 0xe7, 0x78, 0xd6, 0xb3, 0xd3, 0x83, 0x0e, 0x50, 0x58, 0xbb, 0xc3, 0xfa, 0x66, 0xca, 0x02, 0x25, 0xb8, 0x6c, 0xdb, 0x8e, 0xfc, 0x24, 0x07, 0xf4, 0x85, 0x40, 0xfe, 0x91, 0x15, 0xf2, 0xf4, 0x1e, 0x11, 0x38, 0xea, 0x91, 0x86, 0x6f, 0x51, 0xa0, 0x75, 0xda, 0xde, 0xbd, 0x71, 0x8b, 0x08, 0x44, 0x53, 0xb4, 0x2f, 0x05, 0xe5, 0x0d, 0x00, 0x7f, 0x81, 0x2b, 0xb1, 0xba, 0xc2, 0x75, 0x83, 0x9f, 0x9d, 0x81, 0xe6, 0x3d, 0x07, 0x3f, 0x5e, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01 };


    static const unsigned char g_slrsa_private_key2[706] = {0x00, 0x04, 0xb0, 0x94, 0xdc, 0xd2, 0xf6, 0xf4, 0xc7, 0xab, 0xa1, 0x12, 0xf2, 0x44, 0xe7, 0x45, 0xa1, 0xc5, 0xba, 0xe7, 0xe6, 0x18, 0xfe, 0x18, 0x7d, 0x3a, 0xeb, 0xd6, 0xa2, 0xdc, 0x8d, 0xf1, 0x72, 0xd8, 0x6c, 0x85, 0x0a, 0x72, 0x3f, 0xdb, 0x45, 0x48, 0x30, 0x90, 0xd5, 0x39, 0x19, 0x77, 0x11, 0x5b, 0xf2, 0x85, 0xf8, 0x3a, 0xf3, 0x0e, 0x2b, 0xac, 0x7a, 0xdd, 0xdf, 0xc5, 0xf1, 0x24, 0x41, 0x9e, 0x29, 0xfa, 0xc2, 0x0d, 0x84, 0xb7, 0x05, 0xff, 0xfd, 0xc1, 0x71, 0xfc, 0x07, 0x6f, 0x86, 0x4c, 0x6c, 0x82, 0xa6, 0x48, 0x97, 0x70, 0x08, 0xf0, 0x87, 0xaa, 0x67, 0x2c, 0x48, 0x5d, 0xe7, 0x90, 0xc4, 0xb0, 0x35, 0x35, 0xdb, 0x16, 0xfa, 0x76, 0xfa, 0x15, 0x96, 0x2b, 0x78, 0xd1, 0xa1, 0x82, 0x90, 0x79, 0xc3, 0xd0, 0x07, 0x1f, 0x07, 0x4e, 0x1e, 0xdf, 0x20, 0xf2, 0xb7, 0x34, 0x5b, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x63, 0x97, 0xa2, 0x30, 0x6e, 0x4e, 0xc2, 0xaa, 0xff, 0x4e, 0xf3, 0x4b, 0x7f, 0x71, 0x1b, 0x7b, 0xad, 0x1e, 0x0b, 0xfd, 0xfe, 0x9a, 0x0b, 0x4f, 0x87, 0x22, 0x68, 0x7a, 0xa2, 0xa8, 0x12, 0x51, 0x14, 0x6b, 0xb8, 0xe7, 0x95, 0x32, 0x73, 0x91, 0xf2, 0xaa, 0x4d, 0x48, 0x46, 0x1f, 0x8c, 0xaf, 0xe2, 0x4a, 0x43, 0x25, 0xe4, 0x5e, 0x12, 0xad, 0xd6, 0x22, 0x7b, 0x8a, 0x65, 0xa6, 0x40, 0x47, 0x27, 0x16, 0x05, 0xd0, 0x42, 0x2e, 0xed, 0xe4, 0xf1, 0x8d, 0xb5, 0xd0, 0x39, 0x88, 0x10, 0x4b, 0x38, 0x4f, 0x15, 0xae, 0xcf, 0x4c, 0x27, 0x46, 0x53, 0xc9, 0x16, 0x19, 0x4a, 0x9d, 0xad, 0x9c, 0x57, 0xca, 0x18, 0x7b, 0xc8, 0x27, 0x0e, 0x38, 0x48, 0xc2, 0xa2, 0x63, 0x90, 0x79, 0x81, 0x89, 0x70, 0x1d, 0x9b, 0x77, 0x55, 0xbe, 0xc9, 0xb0, 0x02, 0x16, 0x2c, 0x6a, 0x30, 0x31, 0xa8, 0xf1, 0xe3, 0xef, 0xff, 0xf4, 0xc5, 0xf3, 0x17, 0x7f, 0x38, 0xe5, 0xcf, 0x0b, 0xc4, 0x4f, 0xd7, 0xa1, 0x54, 0x63, 0x42, 0xfc, 0x24, 0x64, 0x66, 0x9c, 0x3c, 0x0e, 0xd2, 0x01, 0xb7, 0xd7, 0xe4, 0x25, 0xb8, 0x83, 0xa0, 0x3b, 0x2f, 0x79, 0x17, 0xe7, 0xd7, 0x81, 0x84, 0x50, 0xb1, 0x17, 0x30, 0xaf, 0x1d, 0x22, 0x46, 0x4d, 0xe8, 0xe7, 0x1c, 0x25, 0xf0, 0x52, 0x23, 0xe7, 0x32, 0xad, 0x05, 0x9d, 0xc6, 0x52, 0x41, 0x1f, 0x23, 0x43, 0xd6, 0x6d, 0xfd, 0x6a, 0xb3, 0x7c, 0x1d, 0x07, 0x94, 0xe1, 0xa6, 0xe0, 0x42, 0x45, 0x1f, 0x3a, 0xa8, 0x18, 0x5d, 0x97, 0x5f, 0x60, 0xa6, 0x83, 0x64, 0xd0, 0xf0, 0x14, 0x73, 0x4e, 0x7b, 0x88, 0x1f, 0x14, 0xeb, 0xf7, 0xfb, 0x1f, 0x63, 0x78, 0x21, 0xf2, 0xaa, 0xf1, 0x2f, 0x40, 0xe8, 0xe5, 0x3f, 0xaa, 0xe3, 0x50, 0x64, 0x09, 0x66, 0xad, 0xe7, 0x4d, 0x9d, 0x00, 0xf5, 0x97, 0x4e, 0xba, 0x51, 0x17, 0x0a, 0xc4, 0x10, 0xc7, 0x94, 0x23, 0x42, 0xee, 0x17, 0x48, 0x80, 0x1d, 0x59, 0x9b, 0xe6, 0xa9, 0xfb, 0x1c, 0x62, 0x3f, 0x58, 0xb8, 0xd6, 0xa7, 0xbc, 0xde, 0xbd, 0x81, 0xc7, 0x03, 0x6c, 0x19, 0xff, 0xf1, 0x70, 0x88, 0x7c, 0x52, 0xf2, 0xef, 0xcb, 0xeb, 0x8d, 0xed, 0xa0, 0x5d, 0x80, 0xa0, 0x09, 0x57, 0x2a, 0xef, 0xd7, 0x92, 0x22, 0x69, 0x6a, 0xc8, 0xef, 0x77, 0xac, 0xad, 0x62, 0x50, 0x67, 0x1b, 0x84, 0xf9, 0x57, 0x48, 0x35, 0xca, 0x2a, 0xe8, 0xa5, 0xc6, 0x42, 0x42, 0x7b, 0x30, 0x63, 0x74, 0x96, 0x4e, 0x9c, 0x5a, 0x33, 0x76, 0xad, 0x4e, 0xd5, 0xa7, 0x74, 0xac, 0x9e, 0xcf, 0xcd, 0x1f, 0x01, 0x80, 0xad, 0x36, 0x8a, 0x50, 0xf7, 0xea, 0x55, 0xdf, 0x45, 0x87, 0xea, 0xf8, 0x40, 0xdd, 0x90, 0x7f, 0xdf, 0x61, 0xd4, 0x21, 0x6c, 0x8b, 0xec, 0x7e, 0x2b, 0xce, 0x04, 0x79, 0x53, 0x72, 0x07, 0xcd, 0x22, 0xa4, 0x8e, 0xa7, 0xcf, 0xbb, 0x9f, 0x8a, 0x61, 0xbd, 0xa4, 0x5f, 0xe2, 0xd4, 0x40, 0xbc, 0xec, 0xc3, 0x03, 0x52, 0x07, 0xf2, 0x42, 0x83, 0x18, 0xd5, 0xf7, 0x83, 0xd9, 0xd0, 0xbc, 0x6c, 0xe1, 0x0d, 0x6d, 0x7c, 0x14, 0x20, 0xbe, 0x96, 0xdc, 0xdc, 0x5b, 0xd1, 0x02, 0xa4, 0xef, 0x8d, 0x89, 0x55, 0x90, 0x4e };

    static const unsigned char g_slrsa_public_key2[258] = { 0x00, 0x04, 0xb0, 0x94, 0xdc, 0xd2, 0xf6, 0xf4, 0xc7, 0xab, 0xa1, 0x12, 0xf2, 0x44, 0xe7, 0x45, 0xa1, 0xc5, 0xba, 0xe7, 0xe6, 0x18, 0xfe, 0x18, 0x7d, 0x3a, 0xeb, 0xd6, 0xa2, 0xdc, 0x8d, 0xf1, 0x72, 0xd8, 0x6c, 0x85, 0x0a, 0x72, 0x3f, 0xdb, 0x45, 0x48, 0x30, 0x90, 0xd5, 0x39, 0x19, 0x77, 0x11, 0x5b, 0xf2, 0x85, 0xf8, 0x3a, 0xf3, 0x0e, 0x2b, 0xac, 0x7a, 0xdd, 0xdf, 0xc5, 0xf1, 0x24, 0x41, 0x9e, 0x29, 0xfa, 0xc2, 0x0d, 0x84, 0xb7, 0x05, 0xff, 0xfd, 0xc1, 0x71, 0xfc, 0x07, 0x6f, 0x86, 0x4c, 0x6c, 0x82, 0xa6, 0x48, 0x97, 0x70, 0x08, 0xf0, 0x87, 0xaa, 0x67, 0x2c, 0x48, 0x5d, 0xe7, 0x90, 0xc4, 0xb0, 0x35, 0x35, 0xdb, 0x16, 0xfa, 0x76, 0xfa, 0x15, 0x96, 0x2b, 0x78, 0xd1, 0xa1, 0x82, 0x90, 0x79, 0xc3, 0xd0, 0x07, 0x1f, 0x07, 0x4e, 0x1e, 0xdf, 0x20, 0xf2, 0xb7, 0x34, 0x5b, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01 };
    /*}}}*/

    static const unsigned char k1[16]={0x3a,0xA1,0x20,0xAE,0x76,0x05,0x68,0x07,0x8A,0x09,0xB2,0x8B,0xC1,0x0D,0xE3,0x3F};
    static const unsigned char k2[16]={0x7E,0xC2,0x33,0xAD,0x96,0x15,0x66,0x76,0x8E,0x20,0x61,0x1C,0xC5,0x1D,0xE8,0x5A};

    bool support_plain = false;
    bool sign_pack     = true;
    bool verify_sign   = true;
    npp::NppConfig* npp_config = new npp::NppConfig(support_plain, sign_pack, verify_sign);
    npp::ext::auto_delete<npp::NppConfig> npp_config_auto_deleted(npp_config);

    npp_config->AddOpenSSLRSAKey(1, g_rsa_private_key1, g_rsa_private_key1_len, g_rsa_public_key1, g_rsa_public_key1_len);
    npp_config->AddOpenSSLRSAKey(2, g_rsa_private_key2, g_rsa_private_key2_len, g_rsa_public_key2, g_rsa_public_key2_len);

    npp_config->AddSimpleRSAKey(1, g_slrsa_private_key1, 706, g_slrsa_public_key1, 258);
    npp_config->AddSimpleRSAKey(2, g_slrsa_private_key2, 706, g_slrsa_public_key2, 258);

    npp_config->AddIdeaKey(1, k1);
    npp_config->AddIdeaKey(2, k2);

    for (int i = 1; i <= 2; ++i)
    {

        //OpenSSL RSA
        {
            const char * raw_data = "0047880d4a1cf095fa4b13f9cc9f06f8";
            size_t raw_data_len = strlen(raw_data);
            npp::OpenSSLRSA* rsa = npp_config->GetOpenSSLRSA(i);
            assert(rsa);
            std::string sigret;
            assert(rsa->sign(npp::OpenSSLRSA::ST_NID_sha1, raw_data, raw_data_len, sigret));
            assert(rsa->verify(npp::OpenSSLRSA::ST_NID_sha1, raw_data, raw_data_len, sigret.data(), sigret.size()));
        }

        //Simple RSA
        {
            const char * raw_data = "0047880d4a1cf095fa4b13f9cc9f06f8";
            size_t raw_data_len = strlen(raw_data);
            npp::SimpleRSA* rsa = npp_config->GetSimpleRSA(i);
            assert(rsa);
            std::string sigret;
            assert(rsa->sign(raw_data, raw_data_len, sigret));
            assert(rsa->verify(raw_data, raw_data_len, sigret.data(), sigret.size()));
        }
    }

    std::string request_data = 
        "mid=ac9219aa5232c4e519ae5fcb4d77ae5b\r\n"
        "product=dlctest\r\n"
        "combo=dlctest\r\n"
        "version=4.4\r\n"
        "appext=\r\n"
        "sample_0=a05ae0fdd08f22f895c8ae84fb55e89f\ne:/the/path/to/sample1\n12635838\n1\n2d361a19246a3ebf4a043d8e31009d77|9d145f6facb9bfe90c902fb85cdbacee|bb3a1cdea67508dc89a24359c00dcdf9\n\n1\n\n\r\n";

    std::string compressed_data;
    assert(zlib_compress_data(request_data.data(), request_data.length(), compressed_data));

    char packed_data[1024] = {};
    size_t packed_data_len = sizeof(packed_data);
    npp::MessagePacker packer;
    assert(packer.Pack(compressed_data.data(), compressed_data.length(), packed_data, packed_data_len));

    std::string server_resp_encrypt_data;
    const char* url = "http://bkill1.safe.bjt.qihoo.net/msvquery";
    //const char* url = "http://build7.kill.corp.qihoo.net:8089/msvquery";
    if (do_curl_multi_part_post(url, "micropattern_bole_query", std::string(packed_data, packed_data_len), server_resp_encrypt_data))
    {
        npp::MessageUnpacker unpacker;
        if (unpacker.Unpack(server_resp_encrypt_data.data(), server_resp_encrypt_data.size()))
        {
            std::string result;
            assert(zlib_uncompress_data(unpacker.Data(), unpacker.Size(), result));
            fprintf(stdout, "request ok, response:\n%s", result.data());
            return true;
        }
        else
        {
            std::string result = unpacker.strerror();
            fprintf(stderr, "error:[%s]\n", result.data());
            return false;
        }
    }
    else
    {
        fprintf(stderr, "http request failed! %s\n", server_resp_encrypt_data.data());
    }

    return true;
}




bool do_tutorial_test()
{
    static const unsigned char idea_key1[16] = {0x14, 0xf4, 0xca, 0x24, 0x5b, 0x57, 0xc6, 0x7e, 0xba, 0xd4, 0x5a, 0xb8, 0x69, 0x78, 0x6c, 0x91};

    static const unsigned char idea_key2[16] = {0xd2, 0xc6, 0x3a, 0xe3, 0x97, 0x6e, 0x60, 0xca, 0x3b, 0x12, 0x47, 0x01, 0xd2, 0x15, 0xdf, 0xba};

    static const unsigned char idea_key3[16] = {0xd2, 0x45, 0xab, 0xa2, 0xda, 0x73, 0x79, 0xc0, 0xd1, 0x09, 0xb2, 0xbb, 0x1f, 0x9f, 0x15, 0xda};

    static const unsigned char idea_key4[16] = {0xdf, 0x1d, 0x93, 0x82, 0x32, 0x0f, 0x94, 0xcc, 0x92, 0xfe, 0x25, 0x54, 0xc4, 0xfb, 0xd9, 0x42};


static const unsigned char g_client_rsa_public_key1[140] = {//{{{
	0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xd5, 0xa2, 0x1c, 0x75, 0xe5, 0x48, 0xf1, 0x39, 0x47, 0x8f, 0xc4, 0x28, 0x8c, 0xbf, 0xd4, 0x12, 0x63, 0x6d, 0xbe, 0xaa, 0xe3, 0xbb, 0xd6, 0x4a, 0xef, 0x5c, 0xa7, 0x06, 0x49, 0xb0, 0x4f, 0xac, 0x60, 0xea, 0x6e, 0xae, 0xe0, 0x17, 0x77, 0x4a, 0x14, 0xa9, 0x60, 0x26, 0xb8, 0x02, 0xc4, 0x87, 0xe2, 0x1b, 0x76, 0xe4, 0xd7, 0x6e, 0x9b, 0xe5, 0x4b, 0x05, 0x60, 0xc4, 0x1b, 0x5e, 0x09, 0x27, 0x62, 0xa2, 0x1d, 0x04, 0x2e, 0x7a, 0x0f, 0x7d, 0xf1, 0x0b, 0xe1, 0xdd, 0xb5, 0xf0, 0xef, 0x2d, 0xb1, 0x35, 0x60, 0xf0, 0xbe, 0x3c, 0x80, 0xcc, 0xf7, 0x73, 0x18, 0xe4, 0xb5, 0xf6, 0x7d, 0xb7, 0x36, 0xd0, 0x6a, 0x09, 0x6d, 0x85, 0xac, 0xf5, 0x1e, 0x9d, 0xb2, 0x3c, 0x35, 0x64, 0xb5, 0xc5, 0xb7, 0xb7, 0xbc, 0x71, 0xdd, 0x69, 0x39, 0xc9, 0xb2, 0x89, 0x4f, 0x4e, 0xfa, 0xc9, 0x8f, 0x45, 0x02, 0x03, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_rsa_public_key1_len = 140;

static const unsigned char g_client_rsa_private_key1[609] = {//{{{
	0x30, 0x82, 0x02, 0x5d, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xe2, 0x59, 0x85, 0xb7, 0xa6, 0xb5, 0x3f, 0x5d, 0x99, 0xf1, 0x8c, 0xda, 0x36, 0x57, 0x0f, 0x03, 0x61, 0x27, 0x49, 0xeb, 0x36, 0x53, 0x6a, 0xab, 0x09, 0xc4, 0xdf, 0x5a, 0xf8, 0xfc, 0x37, 0x71, 0xa0, 0x09, 0x9c, 0xa3, 0x9c, 0xd5, 0xed, 0x5b, 0x85, 0x81, 0xa0, 0xce, 0x73, 0x87, 0xb8, 0x51, 0xa3, 0x1c, 0x4b, 0xda, 0xfe, 0xb3, 0xb8, 0xbf, 0x1b, 0x1a, 0xe2, 0x5e, 0x51, 0x0c, 0xbf, 0x9e, 0x32, 0xce, 0x0a, 0x16, 0x11, 0xa1, 0x4c, 0xf1, 0x7f, 0xad, 0xe9, 0xb1, 0xa7, 0x2d, 0xec, 0x15, 0x9d, 0x4f, 0x25, 0xa3, 0x99, 0xa0, 0x32, 0xf2, 0x19, 0xb9, 0x24, 0xfe, 0xb3, 0x97, 0x82, 0x66, 0xb8, 0x06, 0x96, 0xe6, 0x6e, 0x6f, 0x1b, 0x89, 0x07, 0xb7, 0xfc, 0x7e, 0x59, 0x2e, 0xdf, 0x50, 0x68, 0x2a, 0x4d, 0x47, 0xc9, 0xc0, 0xe5, 0x0d, 0xa9, 0xed, 0x88, 0xb9, 0x03, 0x67, 0xfe, 0xa3, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x81, 0x00, 0x8d, 0xde, 0xd8, 0x9e, 0x0c, 0x82, 0x6b, 0xee, 0x0a, 0x10, 0x49, 0x5d, 0x78, 0x53, 0xc6, 0xd8, 0x32, 0x6b, 0xc2, 0xbc, 0x07, 0xb7, 0xef, 0x12, 0xb7, 0x33, 0xcb, 0x5f, 0x24, 0xd2, 0x49, 0x1a, 0x11, 0xda, 0x14, 0x70, 0xc4, 0x5b, 0x9d, 0xc3, 0x10, 0x81, 0xf8, 0x3d, 0x8e, 0x52, 0x11, 0xe8, 0x31, 0x59, 0x09, 0xfe, 0x80, 0x48, 0x3b, 0x52, 0xa4, 0xf5, 0x8b, 0xce, 0xdb, 0xf4, 0x26, 0xa1, 0x1e, 0x3c, 0x8b, 0xe6, 0x37, 0x14, 0x95, 0xce, 0xd0, 0xa8, 0x48, 0xe6, 0x7d, 0xfc, 0x90, 0x5a, 0x62, 0x6e, 0x2a, 0x97, 0xff, 0xfe, 0xc2, 0x4a, 0xd5, 0x2e, 0x25, 0xb7, 0xc0, 0x55, 0xde, 0x05, 0x89, 0x14, 0x11, 0xec, 0x7e, 0x94, 0x3b, 0x55, 0xb5, 0x03, 0xb1, 0x0a, 0xf9, 0x70, 0x83, 0x26, 0xba, 0x0e, 0xa8, 0xba, 0xf8, 0x4c, 0xcd, 0x86, 0x5c, 0x90, 0x14, 0xbd, 0x1c, 0x0c, 0x27, 0xc9, 0x02, 0x41, 0x00, 0xfd, 0xee, 0x27, 0x90, 0x13, 0x4e, 0x85, 0x06, 0xb1, 0xf5, 0xd2, 0x10, 0x40, 0xb1, 0x5e, 0x1a, 0x75, 0x6c, 0x74, 0xc2, 0x84, 0x94, 0xd7, 0x23, 0xaf, 0xa9, 0x10, 0x9b, 0xd3, 0xd2, 0x06, 0xef, 0x2d, 0x89, 0x2c, 0xfd, 0x53, 0x60, 0x28, 0x22, 0x4d, 0xb8, 0x2e, 0xd6, 0x38, 0xb6, 0x34, 0x22, 0x11, 0x33, 0xd6, 0xc6, 0xc3, 0xaf, 0xdc, 0x69, 0xa4, 0xf0, 0x4c, 0xaf, 0xf2, 0xa4, 0xb4, 0xaf, 0x02, 0x41, 0x00, 0xe4, 0x31, 0xd1, 0x97, 0x8e, 0x50, 0x35, 0x2d, 0x77, 0x6d, 0x6e, 0xee, 0xb7, 0xba, 0xa8, 0x06, 0x97, 0xde, 0x52, 0x6f, 0x7a, 0x60, 0x0b, 0xd1, 0x8f, 0x01, 0xe5, 0x52, 0x40, 0xa4, 0x0e, 0x89, 0xc0, 0x36, 0xc2, 0x5f, 0x83, 0xaa, 0xe4, 0xb4, 0xc5, 0x2b, 0xcb, 0xcb, 0x9f, 0x57, 0xea, 0x2f, 0xe2, 0x4c, 0xc1, 0x57, 0xb1, 0x0a, 0xc5, 0x80, 0x0d, 0x8c, 0xaa, 0xab, 0x0f, 0x72, 0x3a, 0x4d, 0x02, 0x40, 0x23, 0x98, 0x95, 0xfd, 0x31, 0x67, 0xa9, 0x68, 0x35, 0xdc, 0x32, 0xd5, 0x4a, 0x6c, 0x52, 0xb7, 0xbc, 0xcc, 0x36, 0x55, 0xea, 0x45, 0xff, 0x1e, 0xa6, 0x8a, 0x39, 0xa4, 0xce, 0x7d, 0xbb, 0xb1, 0x1d, 0x9e, 0x04, 0x2b, 0x82, 0xdb, 0x90, 0xe4, 0xb6, 0x26, 0x62, 0x92, 0x6f, 0x22, 0xc3, 0x8e, 0x1f, 0x01, 0x38, 0x53, 0x66, 0xad, 0x29, 0x65, 0xb9, 0xd4, 0x61, 0xbb, 0xac, 0x75, 0x00, 0x4b, 0x02, 0x41, 0x00, 0xa8, 0xfc, 0xef, 0xbe, 0xf1, 0x88, 0x1a, 0x69, 0x6a, 0x38, 0xe3, 0x5e, 0xeb, 0x36, 0xd2, 0x79, 0xd7, 0x7b, 0xaf, 0xc6, 0x98, 0x74, 0x8a, 0x2c, 0x0d, 0x60, 0x95, 0x07, 0x9d, 0x91, 0x20, 0xa7, 0x08, 0x6e, 0x44, 0xf1, 0x60, 0xdb, 0x6c, 0x75, 0x26, 0x52, 0xf1, 0xa0, 0x00, 0x87, 0xa5, 0x89, 0x02, 0x68, 0x5f, 0x01, 0xe6, 0xbd, 0x18, 0x57, 0x65, 0x31, 0x57, 0xae, 0x48, 0x49, 0x0a, 0x3d, 0x02, 0x40, 0x57, 0x76, 0x71, 0xd7, 0x61, 0x58, 0x48, 0xe4, 0x7a, 0x6d, 0xdb, 0xab, 0x95, 0xe8, 0xa6, 0xd6, 0x74, 0x5c, 0xce, 0xf1, 0x39, 0xd3, 0x85, 0x4f, 0xb6, 0x4e, 0x71, 0xe8, 0xcf, 0xf4, 0x37, 0x8d, 0xed, 0xb2, 0x98, 0xe4, 0xf3, 0xbf, 0x92, 0xd5, 0x9f, 0xdc, 0x4f, 0x02, 0x16, 0x0c, 0x7f, 0xa3, 0xd5, 0xb1, 0x52, 0x25, 0x2b, 0x7e, 0xeb, 0xbd, 0x08, 0xf6, 0x15, 0x26, 0x93, 0xb5, 0xa1, 0x53};//}}}
static const size_t g_client_rsa_private_key1_len = 609;


static const unsigned char g_client_rsa_public_key2[140] = {//{{{
	0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xb7, 0x68, 0xb3, 0xf1, 0xa6, 0xa4, 0xda, 0x6f, 0x92, 0x8d, 0x97, 0xe0, 0x29, 0x85, 0x4e, 0xd3, 0x28, 0x00, 0x20, 0xa8, 0xba, 0xb8, 0xba, 0xb9, 0xc4, 0xb2, 0x16, 0xe7, 0x9f, 0x93, 0x2f, 0x6b, 0xa3, 0xe8, 0x43, 0x76, 0x27, 0x66, 0x41, 0x9b, 0x11, 0xbb, 0x75, 0x2a, 0x67, 0x59, 0xc3, 0x31, 0xfd, 0xa0, 0x3d, 0xcd, 0xf8, 0xea, 0xf8, 0x49, 0xab, 0xd6, 0xcd, 0xa9, 0xf6, 0x34, 0x01, 0xc9, 0x8e, 0xe9, 0xe2, 0x2f, 0x4b, 0xd7, 0x94, 0x19, 0x20, 0x10, 0xb9, 0x57, 0xc8, 0x46, 0xdf, 0x9a, 0x34, 0x55, 0x92, 0x4e, 0x08, 0x01, 0x27, 0x17, 0x58, 0xd0, 0xcc, 0xe3, 0xd9, 0x74, 0x18, 0x17, 0xb3, 0x68, 0x02, 0x43, 0xee, 0xb6, 0xa5, 0x05, 0x11, 0x72, 0xe2, 0xae, 0x1b, 0x1e, 0xcc, 0xd1, 0xd2, 0x98, 0x97, 0xed, 0xe3, 0x13, 0x5e, 0x90, 0xc0, 0xe8, 0x92, 0xed, 0xce, 0x55, 0x0f, 0x6d, 0x02, 0x03, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_rsa_public_key2_len = 140;

static const unsigned char g_client_rsa_private_key2[609] = {//{{{
	0x30, 0x82, 0x02, 0x5d, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xc6, 0x59, 0x27, 0xf7, 0x18, 0x77, 0x72, 0x07, 0x26, 0x96, 0xb8, 0x98, 0x27, 0x15, 0x69, 0x3a, 0x09, 0x68, 0x8f, 0xd8, 0x42, 0x1e, 0x2f, 0xcb, 0xa4, 0x81, 0x51, 0xda, 0xc7, 0xe6, 0xa8, 0x94, 0xa4, 0x47, 0x27, 0xf7, 0xf8, 0xf2, 0xd0, 0xb3, 0x6e, 0x03, 0xdf, 0x93, 0xf4, 0xba, 0xda, 0xdc, 0x2e, 0x3e, 0x14, 0xb6, 0x2c, 0x58, 0x87, 0x02, 0xe1, 0x66, 0x76, 0xc3, 0xb0, 0xc0, 0xc0, 0x70, 0xe7, 0x3f, 0x49, 0xa6, 0x5c, 0xb7, 0x95, 0x55, 0x69, 0x93, 0x20, 0x4e, 0xa2, 0xad, 0xa3, 0xa2, 0x37, 0x54, 0x86, 0x5c, 0x22, 0x93, 0xf8, 0x39, 0x88, 0xc4, 0xfe, 0xf3, 0x8b, 0xe0, 0x34, 0x21, 0xe4, 0xeb, 0x4a, 0x7f, 0x93, 0xb6, 0x2f, 0xf3, 0x1b, 0x7c, 0x4c, 0xa6, 0xe5, 0xba, 0xa8, 0xad, 0x70, 0x89, 0x5a, 0x08, 0xbd, 0xb5, 0xee, 0x99, 0xfd, 0x45, 0xb1, 0xdf, 0x26, 0x71, 0x49, 0xc5, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x81, 0x00, 0xab, 0x8b, 0xa6, 0x86, 0x0d, 0xf2, 0x18, 0x7b, 0xd8, 0xc3, 0x18, 0x69, 0xf7, 0xbb, 0x8b, 0xe3, 0xb7, 0x09, 0x69, 0x07, 0x47, 0xbf, 0xe5, 0xe4, 0x81, 0xa5, 0x9b, 0x0e, 0xd6, 0x3f, 0x46, 0xe4, 0x2f, 0xe4, 0x9e, 0xcb, 0xd7, 0xd2, 0xe1, 0xef, 0x9d, 0xa1, 0xd9, 0xf7, 0x93, 0xfd, 0x1b, 0x96, 0xbc, 0xa3, 0xd2, 0xb3, 0xf0, 0x4c, 0xac, 0x90, 0x30, 0x33, 0xb7, 0x59, 0xee, 0x7f, 0xf6, 0xae, 0xe7, 0x2f, 0x8a, 0x58, 0x2f, 0x1f, 0xe4, 0xfd, 0x3e, 0x8e, 0xd3, 0x36, 0x91, 0x99, 0xe3, 0x21, 0xea, 0x8a, 0x44, 0x10, 0x14, 0xa7, 0x5f, 0x4b, 0x73, 0x7d, 0xd5, 0x38, 0xf8, 0x42, 0x6a, 0x71, 0xf9, 0xe3, 0xd9, 0x7a, 0x45, 0x03, 0x67, 0xab, 0x9f, 0x4e, 0xb0, 0x9d, 0x7a, 0xaf, 0xa1, 0xd2, 0x25, 0xcf, 0xc2, 0x73, 0x98, 0x97, 0x85, 0x42, 0x13, 0x7a, 0x29, 0xac, 0xf4, 0x19, 0x13, 0x41, 0x02, 0x41, 0x00, 0xfb, 0x1d, 0x65, 0x30, 0x0c, 0x1f, 0x43, 0x54, 0xaa, 0x24, 0x64, 0x29, 0xe1, 0x53, 0xe4, 0x18, 0x7c, 0xba, 0x4c, 0x1d, 0xdf, 0xfa, 0xd1, 0x4c, 0xbb, 0x13, 0x01, 0xd3, 0x96, 0xf8, 0x4e, 0xd9, 0x00, 0x9a, 0xe5, 0x61, 0x76, 0x75, 0xb9, 0x2b, 0x68, 0x89, 0x20, 0xcb, 0xc7, 0xe5, 0x33, 0x25, 0x19, 0x75, 0xb5, 0xb0, 0xf3, 0xc8, 0x02, 0xe8, 0xbf, 0x16, 0xab, 0x60, 0xc5, 0xff, 0x46, 0x91, 0x02, 0x41, 0x00, 0xca, 0x34, 0xf8, 0xe6, 0x8d, 0x67, 0xa5, 0x3b, 0x81, 0x4a, 0x26, 0xfb, 0xf6, 0x8a, 0x15, 0xc4, 0x9b, 0x88, 0x58, 0x0c, 0xf2, 0x1a, 0x62, 0x0e, 0x4e, 0xd2, 0x23, 0x77, 0x61, 0x66, 0x4a, 0x96, 0x91, 0xd7, 0xec, 0xb2, 0xb3, 0x56, 0x34, 0x0e, 0xc0, 0xb5, 0xd4, 0x18, 0x4f, 0x2e, 0x3f, 0x2d, 0x6c, 0xb0, 0x49, 0x65, 0xa0, 0x8d, 0x9b, 0x5d, 0x16, 0x8b, 0xb7, 0x86, 0xcd, 0x11, 0x31, 0xf5, 0x02, 0x40, 0x07, 0x15, 0xb0, 0x3a, 0x27, 0xcd, 0x65, 0xff, 0xe8, 0x80, 0xf8, 0x56, 0x7a, 0x25, 0xfc, 0xc4, 0x78, 0x18, 0x65, 0x77, 0x5e, 0x4f, 0x5c, 0x42, 0x56, 0xf0, 0xd5, 0x57, 0x5b, 0xe6, 0x0b, 0x8b, 0x71, 0xc9, 0xec, 0xf8, 0xcf, 0xf7, 0xc8, 0x4e, 0xa2, 0x37, 0x64, 0x36, 0x7b, 0xa0, 0x4a, 0xce, 0x1c, 0x26, 0xc7, 0x06, 0x84, 0x0a, 0x3b, 0x92, 0xc7, 0x79, 0x63, 0x42, 0x6a, 0xb3, 0xa6, 0x11, 0x02, 0x40, 0x5a, 0x58, 0xa4, 0xc5, 0x4e, 0x74, 0xfa, 0xcc, 0xc5, 0x8d, 0xbe, 0x31, 0x62, 0x0c, 0x7c, 0x81, 0x66, 0x04, 0xdb, 0x62, 0x9d, 0x61, 0xd0, 0x62, 0x18, 0x31, 0xa8, 0x0b, 0x15, 0x07, 0xc1, 0x57, 0xd9, 0x3e, 0x22, 0xd2, 0x0d, 0x72, 0xfc, 0xbb, 0x82, 0xbb, 0x3b, 0x52, 0xc9, 0x3e, 0x1e, 0x98, 0x4b, 0x31, 0xd0, 0xf9, 0x89, 0x6c, 0xfb, 0xf7, 0xf1, 0xb4, 0xe7, 0x81, 0x61, 0x6a, 0xc7, 0x69, 0x02, 0x41, 0x00, 0xb9, 0x0e, 0x59, 0x09, 0xfe, 0x32, 0x0d, 0x3f, 0xb4, 0x72, 0x5e, 0xb7, 0x8d, 0xd0, 0xec, 0x17, 0x8f, 0xa1, 0x21, 0x9a, 0xcc, 0xc2, 0x50, 0x63, 0x22, 0x4f, 0x31, 0xd7, 0x1d, 0x14, 0xaf, 0x2c, 0xb5, 0x53, 0xe1, 0xbb, 0x6d, 0x7b, 0xcf, 0x26, 0xf6, 0xc6, 0x88, 0xf6, 0x72, 0x6b, 0x9a, 0x2c, 0x61, 0x87, 0x5f, 0x8d, 0xb6, 0x39, 0x2e, 0x4a, 0xf5, 0xfe, 0xfc, 0x66, 0x0e, 0x08, 0x93, 0x4a};//}}}
static const size_t g_client_rsa_private_key2_len = 609;



static const unsigned char g_client_rsa_public_key3[140] = {//{{{
	0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xc1, 0x64, 0xa4, 0x13, 0x15, 0xd5, 0x0b, 0x36, 0x35, 0xed, 0x70, 0xf2, 0x06, 0xda, 0xe2, 0x1c, 0x02, 0x06, 0x95, 0x54, 0xf6, 0x2d, 0x1f, 0x85, 0xcc, 0xe6, 0x06, 0x32, 0xbb, 0xf2, 0xef, 0x50, 0xf3, 0x92, 0x3d, 0xd7, 0xff, 0x9d, 0x82, 0x55, 0xc4, 0xe2, 0x7e, 0xbb, 0xce, 0x20, 0x2d, 0x37, 0x39, 0x90, 0x58, 0x46, 0xf4, 0x06, 0x2c, 0x09, 0x64, 0x1e, 0x2f, 0xdf, 0xe3, 0x33, 0x34, 0xe9, 0xa2, 0xdc, 0xae, 0xf0, 0xb8, 0x5f, 0x77, 0xd2, 0xaa, 0xb3, 0x10, 0x8a, 0x21, 0x65, 0xa8, 0x36, 0xb6, 0x4f, 0x08, 0x0e, 0x6f, 0x27, 0xbc, 0x0d, 0x41, 0x40, 0x95, 0x5b, 0xc1, 0xd7, 0xd6, 0xd0, 0x7b, 0x0c, 0xbc, 0x85, 0xd2, 0xcb, 0x41, 0x75, 0x21, 0x42, 0x6c, 0x02, 0x88, 0x6d, 0xc0, 0xd9, 0x13, 0x87, 0x99, 0x1c, 0xa5, 0x5d, 0x61, 0xb7, 0xc4, 0xeb, 0xa7, 0xb3, 0x68, 0xc7, 0x65, 0x7f, 0x02, 0x03, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_rsa_public_key3_len = 140;

static const unsigned char g_client_rsa_private_key3[607] = {//{{{
	0x30, 0x82, 0x02, 0x5b, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xc0, 0xff, 0x7e, 0x0b, 0xd4, 0x05, 0x5c, 0x2d, 0xc8, 0x71, 0x33, 0x28, 0xa2, 0xee, 0x70, 0x0d, 0x6a, 0x0a, 0xb5, 0x74, 0x08, 0x3a, 0xe3, 0x48, 0x0b, 0xdc, 0x42, 0xd3, 0x41, 0xcd, 0xb8, 0xf2, 0x7b, 0xc1, 0xbb, 0x52, 0xb3, 0xb4, 0x17, 0xe4, 0xfd, 0xd2, 0xa0, 0xff, 0xed, 0x12, 0x37, 0xf6, 0x96, 0x1a, 0xa4, 0x93, 0x72, 0x34, 0x31, 0xfd, 0x6b, 0x11, 0xf9, 0xa4, 0x2f, 0x76, 0x38, 0x53, 0xfd, 0xa9, 0xaa, 0xaf, 0xc2, 0x92, 0x44, 0xee, 0x92, 0x77, 0xe1, 0x18, 0xc3, 0xa2, 0x4c, 0x71, 0xe5, 0x69, 0x03, 0x02, 0xcf, 0x81, 0xbf, 0x68, 0x60, 0x18, 0xbd, 0x9b, 0x5e, 0xa3, 0x87, 0x9e, 0xea, 0xd1, 0xaf, 0xda, 0x72, 0xdb, 0x7f, 0x09, 0x27, 0xd2, 0x71, 0xe2, 0xef, 0x40, 0x0a, 0xb8, 0x8a, 0x75, 0x20, 0x5d, 0xd6, 0x2b, 0x74, 0xd9, 0xd4, 0xcd, 0xea, 0x1b, 0x59, 0x36, 0x24, 0xe1, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x80, 0x7d, 0x52, 0x6a, 0x4a, 0xcb, 0xf6, 0x5f, 0x10, 0xeb, 0xa3, 0x76, 0x10, 0xe1, 0x1b, 0xeb, 0x6f, 0x0a, 0x78, 0xc1, 0xb3, 0x02, 0xd5, 0x1a, 0x58, 0xe2, 0x3a, 0xb8, 0xb9, 0xed, 0x74, 0xe4, 0xaf, 0xb0, 0x64, 0xf0, 0x7a, 0x97, 0x6e, 0x4e, 0x45, 0xc7, 0xfc, 0x49, 0xc7, 0x65, 0xed, 0xfa, 0xa1, 0x08, 0x7f, 0x6c, 0x76, 0xc2, 0x25, 0xda, 0x80, 0x30, 0x52, 0x8f, 0xc4, 0x69, 0x7d, 0x5e, 0xbd, 0x29, 0x88, 0xff, 0x74, 0x40, 0x46, 0xa8, 0xbb, 0x24, 0xfd, 0xc3, 0xe1, 0xdf, 0x53, 0x0e, 0xcc, 0xb0, 0xa3, 0x5a, 0xc4, 0xf5, 0x1e, 0x02, 0x2d, 0x0e, 0x11, 0x07, 0xbb, 0xc5, 0x8d, 0x04, 0x88, 0x20, 0x8d, 0x58, 0x1d, 0xa9, 0xe2, 0x39, 0x8f, 0xed, 0x0f, 0x65, 0xc0, 0x31, 0x07, 0xc9, 0x48, 0xd3, 0xc8, 0xb4, 0xbd, 0x2b, 0xed, 0x7f, 0xb1, 0xd0, 0xe1, 0x46, 0x44, 0xdb, 0x67, 0x51, 0x41, 0x02, 0x41, 0x00, 0xf3, 0xb1, 0x66, 0x5b, 0x45, 0xb6, 0xd8, 0xb8, 0xb2, 0x92, 0xc7, 0x9f, 0xd7, 0x2d, 0x26, 0x2b, 0xfa, 0xa7, 0x4e, 0xfd, 0x2d, 0x3d, 0xa3, 0x7b, 0x6f, 0xdb, 0x36, 0x70, 0xe5, 0x7a, 0x55, 0x29, 0xef, 0xf4, 0xd5, 0xfb, 0xb0, 0xdd, 0xdd, 0x85, 0x67, 0x4a, 0x3e, 0x38, 0x31, 0x87, 0xbf, 0x86, 0x62, 0x5e, 0xd2, 0x6a, 0x99, 0xc2, 0x4e, 0x80, 0xa2, 0x33, 0xa3, 0x0a, 0x81, 0xbc, 0x8b, 0xc5, 0x02, 0x41, 0x00, 0xca, 0xbe, 0xad, 0xfb, 0x06, 0x7a, 0x03, 0x12, 0x27, 0xd6, 0x07, 0xfb, 0x2d, 0xa3, 0x18, 0x8f, 0x1e, 0x46, 0x25, 0x73, 0x49, 0x75, 0x39, 0x87, 0x27, 0x29, 0x8b, 0x9c, 0xd5, 0x8e, 0x4b, 0x79, 0x97, 0xe8, 0xc2, 0x07, 0xbf, 0x83, 0x53, 0x33, 0xdf, 0x87, 0x4b, 0x6b, 0x45, 0x93, 0x8f, 0x81, 0x63, 0x3f, 0x53, 0xe8, 0x04, 0xd5, 0xa6, 0x44, 0xb1, 0x6a, 0xc2, 0x6b, 0xc3, 0x74, 0x3a, 0x6d, 0x02, 0x40, 0x5d, 0x50, 0x35, 0xb8, 0x87, 0x76, 0x5f, 0x80, 0x41, 0xe8, 0xd0, 0x85, 0xd5, 0x38, 0x55, 0xa0, 0x8b, 0x87, 0x5b, 0x48, 0xb8, 0xf5, 0x1c, 0x4f, 0x9c, 0xe2, 0x5c, 0xf3, 0x57, 0xfb, 0xc2, 0xf6, 0x9f, 0x0a, 0xaa, 0x91, 0x89, 0x05, 0x3b, 0xd8, 0xe4, 0x57, 0x5a, 0x81, 0xdb, 0xfd, 0x76, 0x0a, 0x38, 0x4a, 0xc4, 0xd9, 0xca, 0xec, 0xcb, 0x70, 0x98, 0x2b, 0x9b, 0xa7, 0xdf, 0x4b, 0xda, 0x5d, 0x02, 0x40, 0x32, 0xf5, 0x2a, 0x15, 0x65, 0xd3, 0x54, 0xe2, 0x43, 0x50, 0xf0, 0x40, 0x99, 0x7f, 0xdc, 0xb4, 0x5c, 0x0f, 0x95, 0x6a, 0x1c, 0x94, 0x72, 0x19, 0x1e, 0x26, 0xbb, 0x08, 0x78, 0x44, 0x83, 0x83, 0xd4, 0x42, 0x94, 0x42, 0x0e, 0x48, 0x9b, 0xa8, 0xf6, 0x0d, 0xb3, 0x4f, 0x0a, 0xf5, 0xc3, 0xa3, 0xe9, 0xa6, 0x09, 0x18, 0xcf, 0xde, 0x43, 0x24, 0x10, 0xd3, 0x9c, 0x7a, 0x29, 0x6e, 0x15, 0x21, 0x02, 0x40, 0x0f, 0xa7, 0x56, 0x19, 0x81, 0x07, 0x74, 0x8a, 0x94, 0xc4, 0x44, 0x65, 0x11, 0xb2, 0xba, 0x17, 0x94, 0x69, 0x34, 0x74, 0xe7, 0xf7, 0xc1, 0x31, 0xe4, 0x56, 0x33, 0xaf, 0x86, 0x36, 0x11, 0xc3, 0x34, 0x84, 0x1f, 0x5c, 0x70, 0x39, 0xaf, 0x2a, 0x88, 0xf6, 0x5e, 0xba, 0x57, 0x45, 0xab, 0x99, 0xcb, 0xf6, 0xda, 0x03, 0x05, 0x9e, 0x81, 0xbe, 0xa3, 0xe8, 0x72, 0xbd, 0xd9, 0xad, 0x28, 0x08};//}}}
static const size_t g_client_rsa_private_key3_len = 607;



static const unsigned char g_client_rsa_public_key4[140] = {//{{{
	0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xc7, 0x17, 0xc3, 0x76, 0x30, 0xb7, 0xa9, 0x54, 0x5f, 0x5e, 0xe3, 0x62, 0x80, 0x5e, 0x8d, 0x64, 0x9f, 0xc9, 0x6b, 0x0c, 0xae, 0x73, 0x5b, 0x12, 0xa7, 0x63, 0xf0, 0x2c, 0xb7, 0x73, 0x50, 0x54, 0x51, 0x39, 0x17, 0xac, 0x61, 0xbb, 0x15, 0xd6, 0xf5, 0xb4, 0x5a, 0x3e, 0x5f, 0x66, 0xb5, 0xfb, 0x93, 0xb3, 0x9f, 0xdf, 0x49, 0x96, 0x8d, 0x2f, 0x07, 0x12, 0xfc, 0xa9, 0x33, 0xa0, 0x1a, 0x56, 0x65, 0xc0, 0x97, 0xa4, 0xb2, 0x9e, 0x6e, 0x15, 0xfe, 0x01, 0x20, 0xf7, 0xfe, 0x3c, 0x4d, 0x46, 0x23, 0x68, 0x5a, 0x4c, 0xaa, 0xe3, 0x58, 0xbc, 0x4b, 0xd7, 0x73, 0xa1, 0x97, 0xf3, 0x7f, 0xce, 0xe4, 0x74, 0x49, 0x60, 0xa5, 0x87, 0x22, 0xbe, 0xc3, 0x07, 0x30, 0x98, 0x4c, 0x4b, 0x29, 0x4c, 0x7c, 0xf7, 0xe8, 0x76, 0x04, 0xe6, 0x4a, 0x29, 0x0c, 0x1f, 0x76, 0x97, 0xe1, 0xeb, 0x80, 0x85, 0x02, 0x03, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_rsa_public_key4_len = 140;

static const unsigned char g_client_rsa_private_key4[610] = {//{{{
	0x30, 0x82, 0x02, 0x5e, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xe0, 0x52, 0x11, 0xb3, 0x28, 0x08, 0x9f, 0x3a, 0x98, 0x14, 0x97, 0x6a, 0x27, 0x6f, 0xd9, 0x39, 0x8c, 0x93, 0xc1, 0x17, 0x3b, 0x81, 0xb7, 0x02, 0x99, 0xa6, 0x06, 0xb0, 0x20, 0xdc, 0x60, 0x76, 0x28, 0x8a, 0xae, 0x31, 0xfe, 0x7a, 0x02, 0xee, 0xbc, 0xd5, 0x9a, 0x2f, 0x2c, 0x84, 0x80, 0xdf, 0x6a, 0x35, 0x50, 0x8e, 0x73, 0x41, 0x4b, 0x81, 0xb7, 0xbc, 0x0d, 0x18, 0xe9, 0x29, 0x70, 0x8a, 0xc2, 0x4c, 0xd5, 0x81, 0x43, 0x42, 0x68, 0x63, 0x5f, 0x96, 0x87, 0x78, 0x5d, 0x11, 0xf5, 0xa1, 0xc8, 0xf0, 0x10, 0xac, 0x6f, 0x20, 0x65, 0xdf, 0x83, 0x8e, 0x44, 0x5e, 0xf3, 0xe4, 0x90, 0x9d, 0x1f, 0x65, 0xb6, 0xbc, 0x76, 0x8a, 0x64, 0x64, 0x42, 0xe1, 0xd5, 0x89, 0x5a, 0xbd, 0x4e, 0xfa, 0x5a, 0xd1, 0x45, 0xa1, 0x62, 0xe6, 0x3e, 0x30, 0xc4, 0xa9, 0x69, 0xab, 0xa2, 0x06, 0x59, 0x0f, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x81, 0x00, 0x98, 0x06, 0x26, 0xa6, 0xb3, 0x47, 0xfc, 0x99, 0x9a, 0x3d, 0xc2, 0x4c, 0x18, 0x04, 0x0e, 0x44, 0x99, 0x47, 0xfd, 0x81, 0x80, 0x3b, 0xad, 0xca, 0xde, 0x54, 0x8d, 0x8d, 0xca, 0x07, 0x70, 0x7c, 0x43, 0x87, 0x90, 0xfc, 0xa2, 0xc9, 0x0f, 0xb9, 0xba, 0x52, 0x4c, 0xd7, 0x11, 0xa5, 0x8f, 0x2d, 0x5a, 0x6e, 0x5d, 0x74, 0xdd, 0x19, 0x70, 0x51, 0xae, 0x32, 0x8c, 0xf1, 0xc7, 0xfa, 0xe4, 0xa0, 0x70, 0xb3, 0x74, 0x17, 0xe8, 0xa1, 0xfa, 0x49, 0x35, 0xe7, 0xc2, 0xb1, 0x06, 0x30, 0x97, 0x87, 0x84, 0xcf, 0xe9, 0xc9, 0x10, 0x3c, 0x45, 0xb1, 0x3e, 0x8b, 0x42, 0x7e, 0xa6, 0x20, 0xeb, 0x32, 0x39, 0xac, 0x63, 0x7c, 0x57, 0xf9, 0x52, 0x65, 0x07, 0x3a, 0x71, 0xcd, 0x81, 0x0a, 0x81, 0xd6, 0x7c, 0x65, 0x98, 0x74, 0x8b, 0xc5, 0x82, 0xd0, 0xce, 0x5c, 0x36, 0x01, 0x5d, 0x94, 0x8f, 0x49, 0x02, 0x41, 0x00, 0xf0, 0x0d, 0xaa, 0x5d, 0x51, 0x5e, 0xf6, 0x47, 0x43, 0xe0, 0xf6, 0x91, 0xa2, 0x26, 0x8e, 0x70, 0xf8, 0x95, 0x9d, 0xc5, 0x8d, 0xea, 0x12, 0x76, 0x6e, 0xd1, 0xa2, 0x01, 0x63, 0xac, 0x9a, 0xe8, 0x72, 0x51, 0xbd, 0xff, 0x9c, 0x80, 0xd1, 0x13, 0x05, 0xff, 0xfe, 0xc6, 0xe7, 0x8f, 0xd9, 0x7c, 0x3c, 0x75, 0xdb, 0xad, 0xf8, 0x49, 0x36, 0xcc, 0xda, 0xc8, 0xe5, 0xc8, 0xc1, 0xb1, 0x92, 0xeb, 0x02, 0x41, 0x00, 0xef, 0x38, 0xda, 0x41, 0x31, 0x2b, 0x8a, 0x40, 0xdb, 0x74, 0x50, 0xef, 0x88, 0x3d, 0x91, 0x64, 0x89, 0x52, 0xc3, 0x20, 0xeb, 0xd8, 0x32, 0x83, 0x6d, 0x11, 0xfa, 0x97, 0xc0, 0x53, 0x6f, 0x1d, 0x2f, 0xb7, 0x99, 0x89, 0xcb, 0x0c, 0x32, 0x24, 0xa2, 0x40, 0xe5, 0x47, 0x67, 0xa1, 0xf0, 0xcf, 0x41, 0x27, 0x1d, 0x24, 0x31, 0xc0, 0xc4, 0x55, 0x0a, 0xbb, 0x0d, 0xd4, 0x10, 0xcf, 0xa1, 0x6d, 0x02, 0x41, 0x00, 0xba, 0x3b, 0x2f, 0xcf, 0x23, 0xa0, 0x93, 0x59, 0xa8, 0x4c, 0x6f, 0x9d, 0x7d, 0xf9, 0x81, 0x8a, 0x1d, 0x20, 0x1d, 0x7d, 0x34, 0xe2, 0xc2, 0x1e, 0x05, 0x4d, 0x36, 0xec, 0xf3, 0x01, 0xe6, 0x4f, 0xac, 0xd8, 0xc3, 0x98, 0xf9, 0x36, 0x6a, 0x7c, 0xe2, 0xab, 0xbe, 0x61, 0x5b, 0x26, 0x1b, 0x28, 0xa9, 0xd3, 0x19, 0x71, 0x76, 0xec, 0x7d, 0xca, 0x21, 0x75, 0xb7, 0xe6, 0xae, 0x75, 0xef, 0xaf, 0x02, 0x40, 0x5c, 0x13, 0x6c, 0xe6, 0x54, 0xcf, 0xa6, 0x6a, 0x2a, 0x4d, 0xcd, 0xed, 0x34, 0x6a, 0x46, 0x31, 0x05, 0x2e, 0x26, 0xce, 0xe0, 0x18, 0x19, 0xf1, 0x3e, 0x25, 0x02, 0x68, 0x30, 0x6d, 0xac, 0xc1, 0xf6, 0x20, 0xdb, 0xe7, 0x0e, 0x91, 0x46, 0x27, 0x95, 0x90, 0x16, 0xef, 0xf1, 0xf2, 0x81, 0xe6, 0xb3, 0xf4, 0x23, 0x22, 0x50, 0x48, 0x1b, 0x09, 0x84, 0x94, 0xd4, 0xd0, 0xc0, 0x1b, 0xba, 0xcd, 0x02, 0x41, 0x00, 0xad, 0x9b, 0x8c, 0x22, 0x22, 0x01, 0xc1, 0x05, 0x43, 0x2c, 0xc3, 0x2d, 0x89, 0x45, 0xc1, 0x06, 0xf0, 0xff, 0x63, 0xfa, 0xed, 0x9f, 0x9b, 0x84, 0x33, 0x71, 0x71, 0x1c, 0x64, 0x81, 0x2a, 0x95, 0x52, 0x9f, 0xa5, 0x10, 0xec, 0x9d, 0x4a, 0xec, 0xf0, 0x3c, 0x16, 0x22, 0x27, 0x9d, 0x0e, 0xf2, 0x2f, 0xaa, 0x4c, 0x0a, 0x42, 0x20, 0xa6, 0x61, 0xfa, 0xe6, 0x21, 0x6d, 0x4d, 0x95, 0xb5, 0xca};//}}}
static const size_t g_client_rsa_private_key4_len = 610;


//----------------------------------------------------------------
//----------------------------------------------------------------
//----------------------------------------------------------------

static const unsigned char g_client_slrsa_public_key1[258] = {//{{{
	0x00, 0x04, 0xb7, 0x97, 0xd6, 0x2a, 0xb5, 0x03, 0xc5, 0x55, 0x62, 0xb8, 0x2f, 0x33, 0x1d, 0xdd, 0xa6, 0xeb, 0xbe, 0x99, 0x6a, 0x23, 0x89, 0xca, 0x1a, 0x7d, 0x5d, 0x5c, 0x1f, 0xfe, 0xcb, 0x17, 0xe8, 0x39, 0x34, 0xef, 0x46, 0x03, 0x05, 0x22, 0xe5, 0x44, 0x01, 0x29, 0x3d, 0xae, 0x02, 0xaf, 0x1d, 0x06, 0xf7, 0xa2, 0x4a, 0xbe, 0x61, 0x35, 0x83, 0x2d, 0x2b, 0x81, 0x4d, 0x03, 0x9e, 0x1d, 0xcc, 0xe3, 0xa6, 0x9c, 0x13, 0xe6, 0xe1, 0xad, 0x88, 0xe6, 0x04, 0x29, 0x66, 0xeb, 0xa8, 0x65, 0x7d, 0xf6, 0xb2, 0x18, 0xf6, 0xea, 0xed, 0x8a, 0x70, 0x81, 0xa3, 0x58, 0x5f, 0xc1, 0x55, 0xd1, 0x09, 0x13, 0xa2, 0xb2, 0xe8, 0x8e, 0xb4, 0x0a, 0x9c, 0x55, 0xaa, 0x73, 0xf0, 0xf6, 0x57, 0x4a, 0xb6, 0x09, 0x6d, 0xfb, 0x99, 0xe8, 0x2e, 0xfb, 0x44, 0x78, 0xc6, 0xd5, 0x79, 0xda, 0x76, 0xac, 0x3c, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_slrsa_public_key1_len = 258;

static const unsigned char g_client_slrsa_private_key1[706] = {//{{{
	0x00, 0x04, 0xe4, 0x76, 0x19, 0xd0, 0x8a, 0xdf, 0x4e, 0x2c, 0x05, 0xd3, 0x87, 0x4e, 0x51, 0xb5, 0x26, 0x59, 0x91, 0x67, 0xc9, 0x2f, 0xca, 0x79, 0xe0, 0x27, 0x03, 0xa1, 0xed, 0x15, 0xa6, 0xdb, 0xef, 0xe7, 0x27, 0x23, 0x2a, 0xb0, 0xc3, 0xdb, 0x6c, 0x24, 0x33, 0x7b, 0xc4, 0x75, 0xbd, 0x09, 0xc7, 0x68, 0xf2, 0xc1, 0x8f, 0x97, 0x19, 0x20, 0x2b, 0xee, 0xc6, 0xeb, 0x36, 0xd9, 0x8c, 0xd2, 0x9d, 0xae, 0x62, 0x3c, 0x10, 0x83, 0xfd, 0x79, 0xb7, 0x10, 0xd9, 0xea, 0x93, 0xda, 0x14, 0x8a, 0x77, 0xb2, 0x8e, 0x1f, 0x3f, 0x1b, 0xb3, 0x58, 0xbf, 0x14, 0x9b, 0xae, 0x3d, 0xc8, 0x17, 0x36, 0xbc, 0x6c, 0x3b, 0x39, 0xe4, 0x37, 0xf9, 0xbc, 0x8c, 0xd0, 0x79, 0xd0, 0x31, 0xc0, 0xbf, 0x0e, 0x5c, 0x84, 0x0c, 0xff, 0x13, 0xeb, 0xe7, 0x5b, 0x80, 0xb2, 0x41, 0xc6, 0x55, 0x7a, 0x90, 0x37, 0x1c, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xd6, 0x8c, 0x7a, 0x8d, 0xb7, 0xfd, 0x21, 0xc2, 0x81, 0xee, 0x36, 0x81, 0x3c, 0x86, 0x6c, 0x6f, 0x6c, 0xf8, 0x14, 0x9e, 0x06, 0xfe, 0x11, 0x9d, 0x51, 0xf1, 0xfd, 0x5e, 0x7a, 0x06, 0xcd, 0xf3, 0x3c, 0x73, 0xf0, 0x21, 0x74, 0xad, 0x59, 0x8f, 0x5d, 0xb1, 0xfb, 0xbb, 0xbe, 0x3d, 0xb2, 0xc1, 0x42, 0x48, 0xb8, 0x7a, 0x63, 0xa4, 0x2c, 0xdd, 0xde, 0x7d, 0x02, 0x53, 0xa7, 0xc6, 0x1b, 0x40, 0xe4, 0x15, 0x6a, 0xd7, 0x67, 0xe9, 0xa2, 0xcb, 0x1e, 0x57, 0x18, 0x13, 0x75, 0xda, 0xf1, 0x93, 0xb1, 0x0c, 0xf4, 0xfb, 0x71, 0xa1, 0xf5, 0x9c, 0xb5, 0x64, 0xb1, 0x41, 0x7d, 0xf1, 0x49, 0xd6, 0x70, 0x21, 0x2c, 0xab, 0xed, 0x83, 0xbd, 0xa6, 0x20, 0x9f, 0x88, 0x5d, 0xc6, 0x57, 0xac, 0xe7, 0x2d, 0x63, 0x7a, 0xc0, 0x26, 0x8b, 0x34, 0x82, 0xde, 0x6b, 0xca, 0x0c, 0xf3, 0xfc, 0x89, 0x41, 0xff, 0xf9, 0xaa, 0x8c, 0x3f, 0xa6, 0xbc, 0x6e, 0x95, 0xa1, 0x3d, 0x64, 0xac, 0xac, 0xc1, 0xe8, 0x10, 0xad, 0x78, 0xcf, 0x1d, 0xb7, 0x7e, 0x2b, 0xab, 0x8c, 0x50, 0xb0, 0x15, 0x2b, 0x2e, 0x53, 0x82, 0x4e, 0x12, 0xc5, 0x25, 0xe8, 0xd7, 0xb7, 0xc1, 0x0c, 0x9e, 0x10, 0x44, 0x8b, 0xfa, 0xda, 0xf5, 0x7c, 0x60, 0xbb, 0x43, 0xb6, 0xec, 0x1e, 0xaf, 0xc8, 0x52, 0xae, 0xc0, 0x58, 0x2f, 0xed, 0xe4, 0x7b, 0xc0, 0xfb, 0x77, 0x1b, 0xc4, 0x66, 0x37, 0x33, 0x28, 0x58, 0x1d, 0x68, 0xd4, 0xaf, 0x5e, 0x16, 0x66, 0x16, 0xa6, 0x65, 0x26, 0xed, 0x4d, 0x22, 0x05, 0xf5, 0x5c, 0xde, 0x57, 0xa2, 0x22, 0xaa, 0x53, 0xeb, 0x3a, 0x2f, 0x62, 0xd4, 0xa9, 0xbb, 0xa5, 0x12, 0x12, 0xea, 0x52, 0x6c, 0xc7, 0x2b, 0xe1, 0xeb, 0x54, 0x13, 0x13, 0xb7, 0x12, 0x62, 0x78, 0x0e, 0xb2, 0x4a, 0x66, 0x19, 0xc2, 0xd7, 0x6a, 0xef, 0x18, 0x60, 0x35, 0x5c, 0x43, 0x7f, 0x19, 0x39, 0x31, 0x8a, 0xca, 0x8a, 0x77, 0x6f, 0x63, 0xde, 0xdb, 0x72, 0xd9, 0x92, 0x2a, 0x21, 0x43, 0x25, 0xd4, 0xe7, 0x2a, 0x7b, 0x1c, 0x5b, 0x8b, 0x44, 0x0f, 0xa8, 0x1d, 0xd3, 0x5c, 0x19, 0xdb, 0x92, 0xec, 0x6a, 0x54, 0x87, 0x28, 0x87, 0x05, 0x26, 0x65, 0xd3, 0xae, 0x05, 0x69, 0xae, 0x24, 0xe9, 0xa9, 0xb5, 0x36, 0xbd, 0xc8, 0xf7, 0x40, 0xea, 0xed, 0xfc, 0xf2, 0x66, 0xa5, 0xae, 0xcd, 0x91, 0x93, 0x6c, 0x9d, 0x86, 0x12, 0x4f, 0xc9, 0x43, 0xaa, 0xdf, 0xd5, 0xb9, 0x6b, 0xda, 0xbd, 0x3a, 0xef, 0x90, 0x71, 0xac, 0x1e, 0xa9, 0x8a, 0x5e, 0xa0, 0x33, 0x05, 0xce, 0xdf, 0xec, 0x38, 0x69, 0x09, 0x52, 0x29, 0x65, 0x9c, 0x5a, 0x30, 0xc0, 0x78, 0x96, 0xbf, 0x04, 0x8b, 0x9b, 0x28, 0xd6, 0x64, 0x63, 0xa4, 0x21, 0xff, 0x9e, 0x98, 0x15, 0x1a, 0x52, 0x67, 0xcc, 0xcd, 0x51, 0xbb, 0xad, 0x88, 0xed, 0x33, 0x76, 0x99, 0x5f, 0x74, 0xed, 0xbf, 0xa7, 0x23, 0xb8, 0xa9, 0x48, 0x18, 0xa9, 0xc0, 0x04, 0xa4, 0x7f, 0xe2, 0xaa, 0x79, 0x72, 0x76, 0x34, 0x81, 0xbb, 0xe7, 0x6e, 0xb3, 0xe5, 0x7a, 0xba, 0xc1, 0x70, 0x06, 0xb3, 0xcb, 0x59, 0xc2, 0xa0, 0x88, 0x33, 0x61, 0xc9, 0xe6, 0x15, 0x2f, 0x05, 0x12, 0xa2};//}}}
static const size_t g_client_slrsa_private_key1_len = 706;



static const unsigned char g_client_slrsa_public_key2[258] = {//{{{
	0x00, 0x04, 0x9b, 0x71, 0xfc, 0xe5, 0xe0, 0x69, 0x01, 0xf4, 0x1d, 0x2f, 0xce, 0x06, 0x57, 0x59, 0xfa, 0xf5, 0x82, 0xa0, 0x7e, 0xcc, 0x11, 0x4d, 0x02, 0x7f, 0x72, 0xbd, 0xc9, 0xf5, 0x52, 0x9c, 0x9c, 0xdb, 0xae, 0x9e, 0x02, 0xf0, 0x3a, 0x83, 0x37, 0xf5, 0x80, 0x45, 0x07, 0x9b, 0x05, 0x98, 0x46, 0x43, 0x5f, 0xe1, 0x89, 0x80, 0xf6, 0x56, 0x7f, 0xc1, 0xec, 0x35, 0x92, 0x91, 0x57, 0x0e, 0x25, 0x29, 0xc6, 0xb5, 0x53, 0x27, 0x93, 0x13, 0xe4, 0x2e, 0x4c, 0x7d, 0xf5, 0x07, 0xed, 0xfe, 0x00, 0x85, 0xa2, 0xd5, 0xb8, 0x79, 0xb9, 0xdf, 0xd4, 0x9b, 0x85, 0xb9, 0x80, 0x97, 0x0c, 0x5d, 0x44, 0x53, 0xc2, 0x51, 0x2b, 0xe2, 0x58, 0x01, 0xa1, 0x1a, 0x9d, 0x92, 0x78, 0x71, 0x1a, 0xe5, 0x3a, 0x8f, 0xd7, 0x84, 0xdc, 0xba, 0xf3, 0xf0, 0x5e, 0x2b, 0x3f, 0xe2, 0x4a, 0xeb, 0x86, 0x39, 0x91, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_slrsa_public_key2_len = 258;

static const unsigned char g_client_slrsa_private_key2[706] = {//{{{
	0x00, 0x04, 0xa2, 0x18, 0x5e, 0xfd, 0x93, 0x72, 0x59, 0xd8, 0xf3, 0x06, 0x74, 0x77, 0x3a, 0x76, 0x7f, 0xcb, 0xbe, 0x31, 0xf5, 0xf6, 0x3b, 0x02, 0x99, 0x8c, 0x84, 0xb5, 0xa2, 0xbb, 0x62, 0x53, 0x41, 0x3b, 0x4a, 0x43, 0x20, 0xfc, 0x53, 0x31, 0x70, 0x0c, 0xe5, 0xc3, 0x85, 0x33, 0xc2, 0xba, 0x36, 0x27, 0xb0, 0x30, 0x8e, 0xb5, 0x6c, 0xba, 0x3d, 0xcb, 0x46, 0x7a, 0x80, 0x92, 0x90, 0x69, 0xc2, 0xd7, 0x4e, 0x3c, 0xb0, 0x38, 0x63, 0x29, 0x80, 0x3a, 0x69, 0x51, 0x6a, 0x4d, 0x60, 0x22, 0x70, 0x49, 0x48, 0xe8, 0xd2, 0x41, 0xb4, 0x07, 0x13, 0x1f, 0x8f, 0xcf, 0xc1, 0xb8, 0x73, 0x0a, 0xba, 0xda, 0xa7, 0x1a, 0xb2, 0x36, 0x4b, 0xc1, 0x5f, 0xb9, 0x79, 0xc7, 0xc7, 0xd2, 0x7e, 0x10, 0xe7, 0xb0, 0x31, 0xef, 0x9e, 0x43, 0x92, 0x0b, 0xa6, 0x29, 0x98, 0x53, 0xd4, 0x1c, 0x1e, 0x87, 0x14, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x56, 0x5f, 0xba, 0x2e, 0x51, 0x25, 0x7b, 0xee, 0xf9, 0x01, 0x15, 0x8a, 0x7a, 0xe2, 0xae, 0x12, 0x79, 0x54, 0xd2, 0x05, 0xd5, 0x47, 0xfb, 0x5e, 0x3f, 0x51, 0x32, 0x57, 0xbb, 0x7b, 0x35, 0xa5, 0x4c, 0x5b, 0x1c, 0xf6, 0x97, 0xb6, 0x1e, 0x49, 0x21, 0x1d, 0xe0, 0x9a, 0xc6, 0x46, 0xc7, 0x98, 0xba, 0x70, 0x05, 0x7b, 0x73, 0x66, 0x82, 0x8b, 0x11, 0x11, 0x31, 0xf5, 0xe7, 0x72, 0x13, 0xda, 0x21, 0x9a, 0x8f, 0x9f, 0x6a, 0x33, 0xbe, 0x0d, 0xea, 0x4e, 0xf5, 0x25, 0xba, 0x76, 0x44, 0x21, 0x3e, 0xdd, 0xd1, 0x39, 0x85, 0x58, 0x53, 0x9b, 0x93, 0x3e, 0x14, 0x4e, 0xda, 0x30, 0x70, 0x25, 0x08, 0xe3, 0x24, 0xd7, 0x9d, 0x18, 0x94, 0xdd, 0xdb, 0x24, 0x57, 0xd1, 0x3b, 0xd3, 0x6e, 0x44, 0x35, 0xf8, 0x7c, 0x06, 0xd3, 0x4e, 0x6b, 0x6d, 0x43, 0xd7, 0x44, 0xdc, 0xe6, 0x16, 0x29, 0xa1, 0xd3, 0xb0, 0x54, 0xbd, 0x63, 0xe4, 0xcb, 0xe6, 0xab, 0x18, 0x13, 0x94, 0xab, 0xf3, 0x4b, 0x42, 0x32, 0xa9, 0xb1, 0x30, 0x42, 0x01, 0x3b, 0xeb, 0x58, 0x8f, 0x32, 0x08, 0xe4, 0x87, 0xef, 0x88, 0x33, 0xaf, 0x0a, 0xb6, 0x51, 0xa9, 0xa5, 0xdc, 0x52, 0x17, 0xa9, 0x58, 0x3d, 0xa4, 0xff, 0x85, 0xf3, 0x1c, 0x53, 0xd9, 0x80, 0xc3, 0xd0, 0x9e, 0x60, 0x08, 0x64, 0xc2, 0x85, 0x14, 0xf4, 0xc9, 0xc4, 0x06, 0x7d, 0xbe, 0x74, 0x6e, 0xbc, 0x7e, 0xf6, 0x35, 0x78, 0xe0, 0x8e, 0x54, 0x30, 0x73, 0xce, 0xb1, 0x22, 0x64, 0x7b, 0x86, 0x40, 0x62, 0x6b, 0xfd, 0xc0, 0xd6, 0x8d, 0x4c, 0x9a, 0x93, 0xc9, 0xd8, 0xe5, 0xaf, 0xf6, 0xb0, 0x99, 0x5f, 0x11, 0x79, 0x87, 0x38, 0x78, 0x21, 0x1e, 0x84, 0x52, 0x86, 0x64, 0x78, 0xf0, 0x5b, 0x63, 0x0a, 0xb4, 0x6d, 0x71, 0xa2, 0xcb, 0xc8, 0xe4, 0x43, 0x1c, 0xae, 0xd7, 0xcc, 0x91, 0xac, 0x7e, 0xb4, 0x52, 0x9a, 0x80, 0x8c, 0xb4, 0x7f, 0xd2, 0xc2, 0xb5, 0x7a, 0xa8, 0xb7, 0x91, 0x39, 0xf9, 0x94, 0x79, 0xfb, 0x6d, 0x1c, 0x27, 0x5b, 0x03, 0xe9, 0xc0, 0x97, 0x07, 0x2c, 0x8d, 0x04, 0x1f, 0xa5, 0x2a, 0xba, 0x6a, 0x07, 0xba, 0xd2, 0x90, 0x8c, 0xe5, 0xd4, 0x00, 0xc8, 0x87, 0xda, 0x00, 0x7a, 0x75, 0x28, 0xad, 0xfe, 0x6d, 0x69, 0xd9, 0x81, 0x22, 0x1d, 0xb7, 0x18, 0xc4, 0x8e, 0xd9, 0x43, 0x87, 0x7a, 0x3a, 0xf5, 0x6a, 0x10, 0x00, 0xf6, 0xc6, 0xcc, 0x51, 0x5e, 0x07, 0x99, 0x8f, 0xef, 0x11, 0x38, 0x72, 0xad, 0x64, 0x9e, 0x26, 0x70, 0xfe, 0x3a, 0x3f, 0x8f, 0x66, 0x71, 0xc9, 0xdf, 0x9f, 0xdc, 0xf4, 0xc9, 0xc1, 0x2e, 0x92, 0x6f, 0x19, 0x25, 0xc6, 0xaa, 0xbd, 0xba, 0x49, 0xfc, 0x7c, 0xf6, 0x67, 0x46, 0x9c, 0x0c, 0xf4, 0x9d, 0xc5, 0x6e, 0x44, 0x11, 0x9b, 0xf7, 0x0c, 0xde, 0x5a, 0x16, 0x9f, 0xc1, 0x25, 0x50, 0x5e, 0x97, 0x90, 0xdf, 0xa5, 0x72, 0xf3, 0x9a, 0x2d, 0x8d, 0x51, 0x78, 0xdd, 0xb2, 0xbf, 0x5f, 0x17, 0x3d, 0x21, 0x53, 0x4b, 0x6b, 0x0c, 0xf4, 0xab, 0x81, 0x2a, 0x4d, 0xa9, 0x21, 0xf2, 0xc3, 0x5b, 0xdc, 0xf3, 0x2f, 0x52, 0xaa, 0xd5, 0x12, 0x27, 0xc6, 0x4b, 0x50, 0x46, 0x36, 0x15, 0xcc, 0x85, 0x86};//}}}
static const size_t g_client_slrsa_private_key2_len = 706;



static const unsigned char g_client_slrsa_public_key3[258] = {//{{{
	0x00, 0x04, 0xdf, 0xe0, 0x15, 0xb5, 0x40, 0xcc, 0xe6, 0x93, 0xb8, 0xce, 0x4c, 0x92, 0x8f, 0x05, 0xce, 0x14, 0x34, 0x4b, 0xea, 0x15, 0xa7, 0x4e, 0xaf, 0x18, 0x3f, 0xdf, 0x32, 0x2c, 0xe6, 0x1f, 0x79, 0x1d, 0x10, 0x45, 0x24, 0x77, 0x66, 0x06, 0x8f, 0xd4, 0x1a, 0x53, 0xff, 0x85, 0x8a, 0x25, 0xdf, 0x39, 0x2f, 0x19, 0x13, 0xb0, 0xe8, 0x59, 0x2f, 0x39, 0xd1, 0x53, 0xc2, 0xef, 0x81, 0xf1, 0xc0, 0x8e, 0x4a, 0x91, 0x59, 0x98, 0x4e, 0xb8, 0x35, 0x20, 0x73, 0x7b, 0xc6, 0xcb, 0x93, 0x25, 0x48, 0x05, 0xdf, 0x5a, 0xd6, 0x91, 0x65, 0x88, 0x35, 0x08, 0x95, 0xd4, 0xf9, 0xc1, 0x8e, 0xb2, 0xd5, 0x13, 0xa1, 0xbd, 0x97, 0x71, 0x3b, 0x56, 0x33, 0x2d, 0x4e, 0x78, 0x25, 0x41, 0xc9, 0xde, 0x0e, 0x35, 0x99, 0x0e, 0xce, 0x66, 0x98, 0x35, 0xaa, 0xa1, 0x01, 0xa3, 0xf7, 0x8d, 0xbd, 0xb4, 0x24, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_slrsa_public_key3_len = 258;

static const unsigned char g_client_slrsa_private_key3[706] = {//{{{
	0x00, 0x04, 0xaa, 0x61, 0x0e, 0x7e, 0x4f, 0x96, 0x64, 0x6c, 0x2a, 0x57, 0x46, 0x42, 0xd7, 0xe1, 0x69, 0x42, 0x33, 0xcc, 0xaf, 0xdf, 0xe4, 0xcf, 0x3f, 0x4d, 0xaf, 0x23, 0xab, 0x3d, 0x3f, 0x25, 0x47, 0xbb, 0x6e, 0x38, 0xb3, 0x5b, 0xe9, 0x9b, 0x9f, 0xce, 0xd6, 0x38, 0x06, 0xc5, 0x7c, 0x14, 0x5e, 0x63, 0xff, 0x5b, 0xdc, 0x8a, 0xb4, 0xe3, 0xc8, 0x5e, 0x90, 0x38, 0xde, 0x09, 0xad, 0x9c, 0xd4, 0xe4, 0x5f, 0x1e, 0x3e, 0x49, 0xcf, 0x95, 0xcf, 0xe0, 0xfe, 0x8b, 0x80, 0x07, 0x0a, 0xef, 0xbc, 0x05, 0x57, 0xde, 0x75, 0x68, 0x69, 0x35, 0x11, 0x3b, 0x5f, 0x7c, 0x80, 0x83, 0xec, 0xec, 0xe4, 0x46, 0xfe, 0x27, 0xa5, 0xf0, 0x0c, 0x73, 0xca, 0x97, 0xa9, 0x03, 0x88, 0x73, 0x7e, 0xd1, 0xc5, 0x9c, 0x9f, 0x82, 0x72, 0x7b, 0x84, 0x24, 0x9f, 0xf9, 0x0d, 0x02, 0xb5, 0xfe, 0xe8, 0xca, 0x39, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x7f, 0xfa, 0x35, 0x53, 0xc5, 0x5e, 0x57, 0x02, 0x34, 0x6f, 0xa7, 0xd4, 0x0f, 0xaa, 0x3e, 0x51, 0x3e, 0xed, 0x71, 0xf2, 0x00, 0x41, 0x77, 0xf0, 0x57, 0x2c, 0xb8, 0xb4, 0x61, 0x99, 0x14, 0x1f, 0x82, 0x74, 0x4e, 0xad, 0x2c, 0x74, 0xfb, 0xfd, 0xf6, 0x44, 0xd1, 0x39, 0x47, 0xb1, 0x59, 0x11, 0x4d, 0xbf, 0x67, 0x92, 0x3c, 0xbb, 0x98, 0x47, 0x07, 0x97, 0xdf, 0x98, 0x6f, 0x73, 0x0d, 0x29, 0x5e, 0xa1, 0xcc, 0x62, 0x00, 0x01, 0xb6, 0x1f, 0x44, 0x10, 0x76, 0x44, 0x22, 0x36, 0x2a, 0x1c, 0x1b, 0xe6, 0x7f, 0x8a, 0xbc, 0x0f, 0x93, 0xcc, 0x51, 0x2a, 0x80, 0x49, 0x4d, 0x7f, 0x32, 0x2f, 0x26, 0xf2, 0x84, 0xe9, 0xa0, 0xd8, 0xe9, 0xc6, 0x58, 0x10, 0x22, 0xf6, 0xb3, 0xd4, 0x74, 0x99, 0x45, 0x48, 0x86, 0x71, 0x79, 0xc7, 0xe7, 0xb0, 0x77, 0x9c, 0x30, 0xb1, 0xca, 0x67, 0xa0, 0xb1, 0xdf, 0x4b, 0xa0, 0x5c, 0xd6, 0x09, 0x6e, 0xad, 0xf4, 0xc5, 0x7f, 0x02, 0x64, 0x93, 0xb4, 0x46, 0x41, 0xae, 0xe0, 0x9b, 0x97, 0xae, 0xac, 0x4b, 0xb8, 0x0f, 0x2e, 0x91, 0x20, 0xae, 0xc9, 0x43, 0x52, 0xdf, 0x79, 0x56, 0xe9, 0xa6, 0x68, 0x25, 0x6e, 0xbf, 0x8d, 0xba, 0x48, 0xfd, 0xb1, 0xcf, 0xa3, 0x91, 0x07, 0x51, 0x50, 0xb5, 0x2a, 0x99, 0x77, 0x8b, 0x53, 0xec, 0x38, 0x48, 0xce, 0x49, 0xc3, 0x55, 0x5a, 0xd6, 0x1d, 0xf5, 0x35, 0x69, 0x81, 0x94, 0xe6, 0x6c, 0xe8, 0xfe, 0xef, 0xae, 0xc9, 0xdf, 0x3f, 0x97, 0x20, 0x5c, 0x84, 0x26, 0x44, 0xce, 0xc0, 0x9e, 0x7e, 0xcb, 0xb1, 0x77, 0x1a, 0x04, 0x06, 0x12, 0xa7, 0xa7, 0x6f, 0x1b, 0x9a, 0xfc, 0x39, 0x62, 0x48, 0x0f, 0x69, 0x62, 0x95, 0xa9, 0xa4, 0xe6, 0x50, 0x52, 0x55, 0x74, 0xe3, 0x69, 0x64, 0x77, 0x1d, 0x25, 0x17, 0x73, 0xa3, 0xd7, 0x22, 0xd0, 0x5b, 0x80, 0x4a, 0x44, 0xbb, 0xa0, 0x1a, 0x04, 0x50, 0x76, 0x0c, 0x45, 0xac, 0xb6, 0x3b, 0x3a, 0x0f, 0x3e, 0xec, 0x4f, 0x16, 0xbb, 0x95, 0x08, 0x89, 0xb9, 0x96, 0x15, 0x9e, 0xfe, 0x38, 0x53, 0x2c, 0x57, 0x9c, 0x7d, 0x32, 0xd8, 0xbc, 0x8e, 0x5e, 0x36, 0x3f, 0xbc, 0xc2, 0x20, 0x8d, 0x04, 0xfe, 0x3a, 0x20, 0x0a, 0xc1, 0x2b, 0x6b, 0x25, 0x9d, 0x5a, 0xd6, 0x79, 0x14, 0x7b, 0x66, 0xc2, 0xfc, 0xf1, 0x31, 0x60, 0x96, 0xcd, 0xde, 0x3b, 0x9d, 0x52, 0xde, 0x1f, 0x1d, 0xdb, 0xe2, 0xf7, 0x1d, 0xd5, 0x95, 0xa5, 0xcd, 0xa1, 0x40, 0x61, 0x5e, 0x3a, 0x4d, 0xa9, 0x87, 0x78, 0xd4, 0x8a, 0x30, 0x3a, 0x46, 0x54, 0x46, 0xb4, 0x1b, 0xf0, 0x4a, 0x4e, 0x13, 0x66, 0xda, 0xfa, 0xa6, 0xe7, 0xdf, 0x94, 0x42, 0x91, 0xb7, 0x26, 0xdd, 0xf9, 0xff, 0x7c, 0x5c, 0x31, 0xac, 0xfb, 0x61, 0x36, 0xee, 0x43, 0xb6, 0x50, 0x59, 0xd8, 0x7d, 0x35, 0x5c, 0xbe, 0xe8, 0xce, 0x5c, 0xe3, 0x56, 0xb1, 0x33, 0x7f, 0x5c, 0x89, 0x34, 0xe6, 0xf3, 0x8c, 0x2f, 0x53, 0x49, 0xa3, 0xd8, 0x69, 0x49, 0xec, 0xd2, 0x07, 0x0f, 0x0b, 0x0d, 0x21, 0x61, 0x7b, 0x15, 0x22, 0x0f, 0x00, 0x22, 0x14, 0x58, 0x3e, 0x3d, 0xde, 0xed, 0xe8, 0x4f, 0x88, 0xbc, 0xfc, 0xe2, 0x59, 0x20, 0xb8};//}}}
static const size_t g_client_slrsa_private_key3_len = 706;



static const unsigned char g_client_slrsa_public_key4[258] = {//{{{
	0x00, 0x04, 0xb3, 0x4c, 0xa0, 0x35, 0xed, 0x59, 0x5d, 0x18, 0x6e, 0xd6, 0xf8, 0x3c, 0x6d, 0x25, 0xc8, 0xdf, 0x4e, 0xde, 0xbc, 0x99, 0x5b, 0xca, 0x5e, 0xf8, 0x48, 0x09, 0xca, 0x2b, 0x91, 0xb6, 0xe2, 0x1e, 0xd7, 0xda, 0xc5, 0xef, 0xac, 0x6b, 0x04, 0x21, 0x2d, 0xa7, 0xdf, 0x6a, 0x95, 0x2c, 0xe9, 0xa4, 0x7f, 0x7d, 0x20, 0x4a, 0x96, 0x61, 0xb1, 0x83, 0x0b, 0x57, 0x05, 0x20, 0x0b, 0xb6, 0xbd, 0x9f, 0x80, 0xc9, 0xad, 0xe3, 0x0f, 0x1e, 0x13, 0x6a, 0x90, 0x47, 0xcb, 0x97, 0xab, 0x46, 0x36, 0x79, 0x1c, 0x9e, 0xa1, 0x27, 0x67, 0xc3, 0x82, 0x7e, 0x00, 0x2a, 0xc1, 0x44, 0x38, 0x93, 0x04, 0x4c, 0x38, 0xa3, 0xcb, 0x0f, 0xb8, 0x22, 0xfc, 0x1a, 0xc5, 0x9f, 0x32, 0x9f, 0x19, 0xa5, 0x0a, 0xe1, 0x92, 0x87, 0xa0, 0xcb, 0x70, 0xa5, 0x96, 0xf1, 0x68, 0x5f, 0xc1, 0xbe, 0x47, 0xe0, 0x51, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01};//}}}
static const size_t g_client_slrsa_public_key4_len = 258;

static const unsigned char g_client_slrsa_private_key4[706] = {//{{{
	0x00, 0x04, 0xc8, 0x8b, 0xe1, 0x07, 0x4e, 0xee, 0x28, 0xe8, 0x9f, 0x29, 0x8d, 0xc3, 0xc3, 0x9d, 0xf3, 0x6e, 0x02, 0xe3, 0xed, 0x55, 0x87, 0xdb, 0xb0, 0x65, 0x1a, 0x3b, 0x2a, 0x07, 0xc9, 0xd8, 0x6e, 0xe0, 0xd7, 0x8f, 0x88, 0x33, 0x68, 0x71, 0xec, 0x91, 0xc6, 0x8a, 0x6b, 0xb1, 0xed, 0x2f, 0x3a, 0x88, 0xea, 0x95, 0xea, 0x6a, 0x8b, 0x7f, 0xee, 0x94, 0xbe, 0x08, 0xa8, 0x68, 0x23, 0x63, 0x7b, 0x5d, 0x2e, 0x24, 0x66, 0xbb, 0x08, 0xfb, 0x7a, 0x88, 0x46, 0x63, 0x57, 0x45, 0xed, 0xd1, 0xf1, 0x48, 0x2d, 0x49, 0x2d, 0x5f, 0x21, 0x10, 0xb0, 0xec, 0xe2, 0x9d, 0x1b, 0x5a, 0xf7, 0xe8, 0x03, 0x10, 0x64, 0x18, 0xba, 0x4f, 0x5d, 0x88, 0xfe, 0x29, 0x48, 0x36, 0xbb, 0xfa, 0x13, 0x47, 0xd0, 0x84, 0xc8, 0x12, 0xbc, 0xae, 0x04, 0x46, 0x95, 0xfa, 0x00, 0x9d, 0x01, 0xe2, 0x18, 0x8a, 0x65, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x76, 0xbc, 0x6a, 0xc5, 0x3a, 0xf4, 0x43, 0x00, 0x47, 0x8c, 0x00, 0xc5, 0x51, 0x42, 0x69, 0x68, 0x4f, 0x09, 0xc7, 0xf1, 0x05, 0xf9, 0x0a, 0x5d, 0x31, 0xc4, 0xa9, 0xc3, 0xe6, 0xbb, 0xe0, 0x19, 0xfb, 0x46, 0x9d, 0xeb, 0x62, 0x01, 0x61, 0x81, 0x85, 0xbd, 0x5a, 0xba, 0x03, 0xa6, 0x1c, 0xd0, 0x07, 0xa4, 0x2f, 0x20, 0x59, 0xeb, 0xaa, 0xc4, 0x22, 0x27, 0x5a, 0x1e, 0x1e, 0x25, 0xbe, 0x59, 0x86, 0x37, 0xa4, 0x63, 0x18, 0xa9, 0x91, 0x31, 0xdd, 0xf6, 0xa3, 0x2f, 0x2a, 0x24, 0x1d, 0xa6, 0x5a, 0xe2, 0x07, 0xbd, 0x5e, 0x38, 0x00, 0xec, 0xfa, 0xdb, 0x50, 0x3d, 0x84, 0x1d, 0xa2, 0x7b, 0xb9, 0x1a, 0x0d, 0xdb, 0xcf, 0x70, 0xef, 0x30, 0x90, 0xbf, 0xdb, 0x08, 0x0c, 0x63, 0xca, 0x5b, 0x83, 0x28, 0xc2, 0xfb, 0xfc, 0xf0, 0xe1, 0xe5, 0x83, 0xd1, 0xae, 0x30, 0x6d, 0x01, 0x63, 0xb9, 0xf0, 0x9e, 0x5e, 0x2d, 0x91, 0x0d, 0xcb, 0x4f, 0x91, 0xba, 0x94, 0x8e, 0x42, 0xf8, 0xd6, 0x94, 0x16, 0x41, 0x4d, 0xec, 0x46, 0xa6, 0xf2, 0x6e, 0x57, 0x98, 0x23, 0xda, 0x54, 0xe2, 0x9d, 0x97, 0x2c, 0xd7, 0x67, 0xc1, 0xb1, 0xe2, 0x36, 0xc5, 0x3f, 0x3f, 0x44, 0x6d, 0x6b, 0xab, 0xf6, 0xb4, 0x1b, 0xb9, 0x61, 0x8d, 0xa1, 0x9a, 0x50, 0x1c, 0x09, 0xb3, 0xb2, 0x2e, 0x38, 0xf6, 0xf7, 0x9f, 0xd5, 0x5d, 0xbe, 0x96, 0xb2, 0xbc, 0x2d, 0x51, 0x8b, 0x6b, 0xc0, 0x6c, 0x3c, 0x21, 0xc5, 0x89, 0xe0, 0x01, 0x16, 0x1e, 0xcc, 0xd0, 0x1e, 0x3b, 0x6f, 0x07, 0xcb, 0xe9, 0xcc, 0xd7, 0x9e, 0x48, 0x76, 0x5b, 0x26, 0xff, 0x38, 0x44, 0x8c, 0xb7, 0x0b, 0xe1, 0x49, 0x8d, 0x36, 0x76, 0x07, 0x4a, 0x56, 0x0c, 0xf7, 0xd0, 0x83, 0xf2, 0x0b, 0x28, 0xb4, 0x37, 0x07, 0xee, 0xe9, 0xf9, 0x95, 0x23, 0x81, 0x0b, 0xae, 0x5e, 0xa9, 0xc8, 0xc8, 0x1d, 0x28, 0x7e, 0xf4, 0x65, 0x47, 0xad, 0xc5, 0x07, 0x2e, 0xd8, 0x5f, 0x3e, 0x34, 0xb6, 0x1c, 0x96, 0xe9, 0x0b, 0x83, 0x4e, 0xf8, 0xef, 0x80, 0xad, 0x2f, 0x33, 0x67, 0x46, 0x0e, 0x6c, 0xd0, 0x0b, 0x01, 0x5c, 0xa1, 0x0a, 0x3e, 0x10, 0xc0, 0x02, 0xe0, 0x4b, 0x8f, 0xf2, 0x31, 0x95, 0x5d, 0x19, 0x6c, 0x6a, 0x9f, 0x49, 0x02, 0xec, 0x10, 0xe9, 0xb8, 0xd7, 0xe5, 0xed, 0x18, 0x1a, 0xfe, 0x07, 0xcf, 0x09, 0x22, 0x42, 0xa2, 0x35, 0x7f, 0xb4, 0xda, 0x63, 0x16, 0x8e, 0xc8, 0x50, 0xe4, 0x60, 0x08, 0xe8, 0x70, 0x37, 0xb4, 0x46, 0x77, 0xd1, 0xbe, 0xf7, 0x68, 0xe9, 0x62, 0x0d, 0xc0, 0xfa, 0x33, 0x48, 0x91, 0x37, 0xcd, 0x1e, 0xa3, 0x62, 0x3a, 0xfa, 0x31, 0x16, 0x6b, 0xb8, 0x9d, 0x02, 0x3e, 0x5e, 0x0e, 0x79, 0x64, 0x29, 0xdc, 0x91, 0x58, 0x88, 0x5b, 0xf0, 0x4e, 0x8d, 0x36, 0x2d, 0x22, 0x52, 0xf3, 0x1e, 0xe5, 0x7f, 0x7b, 0xbc, 0xc1, 0xf0, 0x05, 0x81, 0xbb, 0xfc, 0x7a, 0x95, 0xea, 0x55, 0x77, 0x78, 0xac, 0x60, 0xd8, 0x06, 0xe6, 0x11, 0xb6, 0x04, 0x14, 0x12, 0xbf, 0x2a, 0xf0, 0xe2, 0x20, 0xad, 0xfd, 0x0e, 0x34, 0x00, 0xd2, 0xd8, 0x73, 0x64, 0x8e, 0x95, 0xa2, 0xa7, 0xa9, 0x35, 0x40, 0x60, 0x54, 0xe0, 0x27, 0x83};//}}}
static const size_t g_client_slrsa_private_key4_len = 706;


    bool support_plain = false;
    bool sign_pack     = true;
    bool verify_sign   = true;
    npp::NppConfig* npp_config = new npp::NppConfig(support_plain, sign_pack, verify_sign);
    npp::ext::auto_delete<npp::NppConfig> npp_config_auto_deleted(npp_config);

    npp_config->AddOpenSSLRSAKey(1, g_rsa_private_key1, g_rsa_private_key1_len, g_rsa_public_key1, g_rsa_public_key1_len);
    npp_config->AddOpenSSLRSAKey(2, g_rsa_private_key2, g_rsa_private_key2_len, g_rsa_public_key2, g_rsa_public_key2_len);

    npp_config->AddSimpleRSAKey(1, g_slrsa_private_key1, 706, g_slrsa_public_key1, 258);
    npp_config->AddSimpleRSAKey(2, g_slrsa_private_key2, 706, g_slrsa_public_key2, 258);

    npp_config->AddIdeaKey(1, idea_key1);
    npp_config->AddIdeaKey(2, idea_key2);

    std::string request_data = 
        "mid=ac9219aa5232c4e519ae5fcb4d77ae5b\r\n"
        "product=dlctest\r\n"
        "combo=dlctest\r\n"
        "version=4.4\r\n"
        "appext=\r\n"
        "sample_0=a05ae0fdd08f22f895c8ae84fb55e89f\ne:/the/path/to/sample1\n12635838\n1\n2d361a19246a3ebf4a043d8e31009d77|9d145f6facb9bfe90c902fb85cdbacee|bb3a1cdea67508dc89a24359c00dcdf9\n\n1\n\n\r\n";

    char packed_data[1024] = {};
    size_t packed_data_len = sizeof(packed_data);
    npp::MessagePacker packer;
    assert(packer.Pack(request_data.data(), request_data.length(), packed_data, packed_data_len));

    std::string server_resp_encrypt_data;
    const char* url = "http://build7.kill.corp.qihoo.net:8018/tutorial.php";
    if (do_curl_post(url, std::string(packed_data, packed_data_len), server_resp_encrypt_data))
    {
        npp::MessageUnpacker unpacker;
        if (unpacker.Unpack(server_resp_encrypt_data.data(), server_resp_encrypt_data.size()))
        {
            std::string result = std::string(unpacker.Data(), unpacker.Size());
            fprintf(stdout, "request ok, response:\n%s", result.data());
            return true;
        }
        else
        {
            std::string result = unpacker.strerror();
            fprintf(stderr, "error:[%s]\n", result.data());
            return false;
        }
    }
    else
    {
        fprintf(stderr, "http request failed! %s\n", server_resp_encrypt_data.data());
    }

    return true;
}