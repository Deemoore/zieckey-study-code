<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0082)http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121 -->
<HTML xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" lang="zh-CN"><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><TITLE>透过 Linux 内核看无锁编程</TITLE><!-- s-header-meta  for china -->
<META http-equiv="PICS-Label" content="(PICS-1.1 &quot;http://www.icra.org/ratingsv02.html&quot; l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) &quot;http://www.rsac.org/ratingsv01.html&quot; l gen true r (n 0 s 0 v 0 l 0) &quot;http://www.classify.org/safesurf/&quot; l gen true r (SS~~000 1))">
<LINK rel="schema.DC" href="http://purl.org/DC/elements/1.0/">
<LINK rel="SHORTCUT ICON" href="http://www.ibm.com/favicon.ico">
<META name="Owner" content="dw@cn.ibm.com">
<META name="DC.Language" scheme="rfc1766" content="zh-CN">
<META name="IBM.Country" content="CN">
<META name="Security" content="Public">
<!-- 5.8 0421 egd: Added IBM.Special.Purpose meta tag and the meta tag to suppress the WI login in the masthead -->
<META name="IBM.SpecialPurpose" content="SP001">
<META name="IBM.PageAttributes" content="sid=1003"><META name="Abstract" content="多核多线程已经成为当下一个时髦的话题，而无锁编程更是这个时髦话题中的热点话题。Linux 内核可能是当今最大最复杂的并行程序之一，为我们分析多核多线程提供了绝佳的范例。内核设计者已经将最新的无锁编程技术带进了 2.6 系统内核中，本文以 2.6.10 版本为蓝本，带领您领略多核多线程编程的真谛，窥探无锁编程的奥秘 ，体味大师们的高雅设计！"><META name="Description" content="多核多线程已经成为当下一个时髦的话题，而无锁编程更是这个时髦话题中的热点话题。Linux 内核可能是当今最大最复杂的并行程序之一，为我们分析多核多线程提供了绝佳的范例。内核设计者已经将最新的无锁编程技术带进了 2.6 系统内核中，本文以 2.6.10 版本为蓝本，带领您领略多核多线程编程的真谛，窥探无锁编程的奥秘 ，体味大师们的高雅设计！"><META name="Keywords" content="Linux 内核 , 无锁编程 , lock-free,wait-free, 多核 , 多线程, tttlca"><META name="DC.Date" scheme="iso8601" content="2010-01-21"><META name="DC.Type" scheme="IBM_ContentClassTaxonomy" content="CT316"><META name="DC.Subject" scheme="IBM_SubjectTaxonomy" content="SWGC0"><META name="DC.Rights" content="Copyright (c) 2010 by IBM Corporation"> <META name="Robots" content="index,follow"><META name="IBM.Effective" scheme="W3CDTF" content="2010-01-21"><META name="Last update" content="21012010jincx@cn.ibm.com"><!-- STYLESHEETS/SCRIPTS -->
<!-- for tables -->
<LINK rel="stylesheet" type="text/css" media="screen,print" href="./透过 Linux 内核看无锁编程_files/table.css"> 
<!-- end for tables -->
<SCRIPT language="JavaScript" src="./透过 Linux 内核看无锁编程_files/dwcss14.js" type="text/javascript"></SCRIPT><LINK rel="stylesheet" href="./透过 Linux 内核看无锁编程_files/r1v14.css" type="text/css">
<LINK rel="stylesheet" type="text/css" href="./透过 Linux 内核看无锁编程_files/main.css">
<LINK rel="stylesheet" type="text/css" media="all" href="./透过 Linux 内核看无锁编程_files/screen.css">
<LINK rel="stylesheet" type="text/css" media="print" href="./透过 Linux 内核看无锁编程_files/print.css">
<SCRIPT type="text/javascript" src="./透过 Linux 内核看无锁编程_files/ibmcommon.js">//</SCRIPT><LINK rel="search" type="application/opensearchdescription+xml" href="http://www.ibm.com/search/opensearch/description.xml" title="IBM Search">
<SCRIPT language="JavaScript" src="./透过 Linux 内核看无锁编程_files/detection.js" type="text/javascript"></SCRIPT>
<SCRIPT language="JavaScript" src="./透过 Linux 内核看无锁编程_files/dropdown.js" type="text/javascript"></SCRIPT>
<SCRIPT language="JavaScript" src="./透过 Linux 内核看无锁编程_files/grabtitle.js" type="text/javascript"></SCRIPT>
<SCRIPT language="JavaScript" src="./透过 Linux 内核看无锁编程_files/emailfriend2.js" type="text/javascript"></SCRIPT><SCRIPT language="JavaScript" src="./透过 Linux 内核看无锁编程_files/urltactic.js" type="text/javascript"></SCRIPT><SCRIPT language="JavaScript" type="text/javascript">
 <!--
 setDefaultQuery('dwchina');
 //-->
</SCRIPT>
<!--START RESERVED FOR FUTURE USE INCLUDE FILES--><SCRIPT language="javascript" src="./透过 Linux 内核看无锁编程_files/ajax1.js" type="text/javascript"></SCRIPT><SCRIPT language="javascript" src="./透过 Linux 内核看无锁编程_files/searchcount.js" type="text/javascript"></SCRIPT><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><SCRIPT language="JavaScript" type="text/javascript">var emailAbstract = "多核多线程已经成为当下一个时髦的话题，而无锁编程更是这个时髦话题中的热点话题。Linux 内核可能是当今最大最复杂的并行程序之一，为我们分析多核多线程提供了绝佳的范例。内核设计者已经将最新的无锁编程技术带进了 2.6 系统内核中，本文以 2.6.10 版本为蓝本，带领您领略多核多线程编程的真谛，窥探无锁编程的奥秘 ，体味大师们的高雅设计！"; </SCRIPT></HEAD><BODY><!--MASTHEAD_BEGIN--><TABLE border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR valign="top"><TD class="bbg" width="110"><A href="http://www.ibm.com/cn/"><IMG alt="IBM&reg;" border="0" height="52" src="./透过 Linux 内核看无锁编程_files/ibm-logo.gif" width="110"></A></TD><TD class="bbg"><IMG src="./透过 Linux 内核看无锁编程_files/c.gif" width="1" height="1" border="0" alt=""></TD><TD align="right" class="mbbg" width="650"><TABLE border="0" cellpadding="0" cellspacing="0" align="right"><TBODY><TR class="cty-tou"><TD rowspan="2" width="17" class="upper-masthead-corner"><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#main"><IMG src="./透过 Linux 内核看无锁编程_files/c.gif" border="0" width="1" height="1" alt="跳转到主要内容"></A></TD><TD align="left"><TABLE border="0" cellpadding="0" cellspacing="0" align="left"><TBODY><TR><TD><SPAN class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><B class="country">中国</B><SPAN class="spacer">&nbsp;[</SPAN><A class="ur-link" href="http://www.ibm.com/developerworks/cn/country/">选择</A><SPAN class="spacer">]</SPAN></TD><TD width="29" class="upper-masthead-divider">&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD align="left"><A class="ur-link" href="http://www.ibm.com/legal/cn/">使用条款</A></TD></TR></TBODY></TABLE></TD><TD width="40">&nbsp;</TD></TR><TR><TD class="cty-tou-border" height="1" colspan="2"><IMG src="./透过 Linux 内核看无锁编程_files/c.gif" alt="" height="1" width="1"></TD></TR><TR><TD colspan="3"><IMG alt="" height="8" src="./透过 Linux 内核看无锁编程_files/c.gif" width="1"></TD></TR><TR><TD>&nbsp;</TD><TD align="center" colspan="2"><FORM method="get" action="http://www-128.ibm.com/developerworks/search/searchResults.jsp" id="form1" name="form1"><INPUT type="hidden" name="searchType" value="1"><INPUT type="hidden" name="searchSite" value="dWChina"><INPUT type="hidden" name="pageLang" value="zh"><INPUT type="hidden" name="langEncoding" value="UTF8"><TABLE border="0" cellpadding="0" cellspacing="0"><TBODY><TR><TD width="1"><IMG src="./透过 Linux 内核看无锁编程_files/c.gif" width="1" height="1" alt="Select a scope:"></TD><TD align="right">

<LABEL for="sq"></LABEL>
<SELECT id="sq" name="searchScope" class="input-scope">
<OPTION value="dW" selected="selected">dW 全部内容</OPTION>
<OPTION value="dW">-----------------</OPTION>
<OPTION value="aixunix">&nbsp;&nbsp;AIX and UNIX</OPTION>
<OPTION value="dmdd">&nbsp;&nbsp;Information management</OPTION>
<OPTION value="lotusdd">&nbsp;&nbsp;Lotus</OPTION>
<OPTION value="rdd">&nbsp;&nbsp;Rational</OPTION>
<OPTION value="wsdd">&nbsp;&nbsp;WebSphere</OPTION>
<OPTION value="dW">-----------------</OPTION>
<OPTION value="archZ">&nbsp;&nbsp;Architecture</OPTION>
<OPTION value="gridZ">&nbsp;&nbsp;Grid computing</OPTION>
<OPTION value="javaZ">&nbsp;&nbsp;Java 技术</OPTION>
<OPTION value="linuxZ">&nbsp;&nbsp;Linux</OPTION>
<OPTION value="paZ">&nbsp;&nbsp;Multicore acceleration</OPTION>
<OPTION value="opensrcZ">&nbsp;&nbsp;Open source</OPTION>
<OPTION value="securityZ">&nbsp;&nbsp;Security</OPTION>
<OPTION value="webservZ">&nbsp;&nbsp;SOA &amp; Web services</OPTION>
<OPTION value="webarchZ">&nbsp;&nbsp;Web development</OPTION>
<OPTION value="xmlZ">&nbsp;&nbsp;XML</OPTION>
<OPTION value="dW">-----------------</OPTION>
<OPTION value="all">IBM 全部内容</OPTION>
</SELECT>
</TD><TD width="1" align="right"><IMG src="./透过 Linux 内核看无锁编程_files/c.gif" width="1" height="1" alt="Search for:">&nbsp;&nbsp;</TD><TD align="right"><INPUT class="input" id="q" maxlength="100" name="query" size="15" type="text" value=""></TD><TD width="7">&nbsp;</TD><TD><LABEL for="q"></LABEL><INPUT alt="搜索" name="Search" src="./透过 Linux 内核看无锁编程_files/search.gif" type="image" value="搜索"></TD><TD width="20">&nbsp;</TD></TR></TBODY></TABLE></FORM></TD></TR></TBODY></TABLE></TD></TR><TR><TD class="blbg" colspan="3"><TABLE border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR><TD><TABLE border="0" cellpadding="0" cellspacing="0"><TBODY><TR><TD><SPAN class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></TD><TD><A class="masthead-mainlink" href="http://www.ibm.com/cn/">首页</A></TD><TD class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD><A class="masthead-mainlink" href="http://www.ibm.com/products/cn/">产品</A></TD><TD class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD><A class="masthead-mainlink" href="http://www.ibm.com/servicessolutions/cn/">服务与解决方案</A></TD>	<TD class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD><A class="masthead-mainlink" href="http://www.ibm.com/support/cn/">支持与下载</A></TD><TD class="masthead-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD><A class="masthead-mainlink" href="http://www.ibm.com/account/cn/">个性化服务</A></TD><TD><SPAN class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!--
<script src="//www.ibm.com/common/v14/pmh.js" language="JavaScript" type="text/javascript"></script>
-->
<!-- end masthead dw liquid -->
<!--MASTHEAD_END--><!-- CMA ID: 463604 --> <!-- Site ID: 10 --><TABLE id="v14-body-table" border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR valign="top"><!--LEFTNAV_BEGIN--><TD id="navigation" width="150"><TABLE width="150" cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD class="left-nav-spacer"><A href="http://www.ibm.com/developerworks/cn/" class="left-nav-overview">&nbsp;</A></TD></TR></TBODY></TABLE><TABLE width="150" cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD colspan="2" class="left-nav-overview"><A href="http://www.ibm.com/developerworks/cn/" class="left-nav-overview">developerWorks<BR>中国</A></TD></TR></TBODY></TABLE><TABLE width="150" cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD colspan="2" class="left-nav-highlight"><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#" class="left-nav">本文内容包括：</A></TD></TR><TR class="left-nav-child-highlight"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/cl-bullet.gif"></TD><TD><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#major1" class="left-nav-child">非阻塞型同步 (Non-blocking Synchronization) 简介</A></TD></TR><TR class="left-nav-child-highlight"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/cl-bullet.gif"></TD><TD><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#major2" class="left-nav-child">加锁的层级</A></TD></TR><TR class="left-nav-child-highlight"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/cl-bullet.gif"></TD><TD><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#major3" class="left-nav-child">Linux 内核中的无锁分析</A></TD></TR><TR class="left-nav-child-highlight"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/cl-bullet.gif"></TD><TD><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#major4" class="left-nav-child">总结</A></TD></TR><TR class="left-nav-child-highlight"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/cl-bullet.gif"></TD><TD><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#resources" class="left-nav-child">参考资料 </A></TD></TR><TR class="left-nav-child-highlight"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/cl-bullet.gif"></TD><TD><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#author" class="left-nav-child">关于作者</A></TD></TR><TR class="left-nav-child-highlight"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/cl-bullet.gif"></TD><TD><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#rate" class="left-nav-child">对本文的评价</A></TD></TR><TR class="left-nav-last"><TD width="14"><IMG class="display-img" alt="" height="1" width="14" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD><TD width="136"><IMG class="display-img" alt="" height="19" width="136" src="./透过 Linux 内核看无锁编程_files/left-nav-corner.gif"></TD></TR></TBODY></TABLE><BR><TABLE width="150" cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD class="related" colspan="2"><B class="related">相关链接：</B></TD></TR><TR class="rlinks"><TD><IMG alt="" height="8" width="2" src="./透过 Linux 内核看无锁编程_files/rl-bullet.gif"></TD><TD><A class="rlinks" href="http://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp">Linux 技术文档库</A></TD></TR><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- No content currently --><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><TR><TD width="14"><IMG class="display-img" alt="" height="1" width="14" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD><TD width="136"><IMG class="display-img" alt="" height="19" width="136" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR></TBODY></TABLE><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- Next Steps Area:  Start -->
<!-- Commented out the include call in the dwmaster version of this file to prevent ajax calls
     being made during article previews and testing.  Live site has uncommented copy of this file (jpp) -->
<!-- Call Next Steps Servlet -->
<SCRIPT language="JavaScript" type="text/javascript">
<!--
/*
 * ajaxInclude makes a call to the url and render the results in the div tag specified in divId
 */
function ajaxInclude(url, divId) { 
 var req = newXMLHttpRequest(); 
 if (req) { 
   req.onreadystatechange = getReadyStateHandler(req, 
	function (result) {  
           var contents = document.getElementById(divId);  
           if (result != null && result.length > 0 && contents != null) {
	     contents.innerHTML = result;  
           }
        }); 
   req.open("GET", url, true);
   req.send("");
 }
}
//-->
</SCRIPT>

<!-- Display Next Steps Result -->
<DIV id="nextsteps">





















<TABLE width="70%" cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD><IMG src="./透过 Linux 内核看无锁编程_files/c(1).gif" width="1" height="1" alt=""></TD></TR></TBODY></TABLE>
</DIV>

<!-- Initiate Next Steps Call -->
<SCRIPT language="JavaScript" type="text/javascript">
<!-- 
 ajaxInclude("/developerworks/niagara/jsp/getNiagaraContent.jsp?url="+window.location.href,"nextsteps");
//-->
</SCRIPT>
<!-- Next Steps Area:  End --><!--END RESERVED FOR FUTURE USE INCLUDE FILES--></TD><!--LEFTNAV_END--><TD width="100%"><TABLE id="content-table" border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR valign="top"><TD width="100%"><TABLE border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR><TD><A name="main"><IMG border="0" alt="跳转到主要内容" height="1" width="592" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></A></TD></TR></TBODY></TABLE><TABLE border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR valign="top"><TD height="18" width="10"><IMG alt="" height="18" width="10" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD><TD width="100%"><IMG alt="" height="6" width="1" src="./透过 Linux 内核看无锁编程_files/c(1).gif"><BR><A href="http://www.ibm.com/developerworks/cn/" class="bctl">developerWorks 中国</A><SPAN class="bct">&nbsp;&nbsp;&gt;&nbsp;&nbsp;</SPAN><A class="bctl" href="http://www.ibm.com/developerworks/cn/linux/">Linux</A><SPAN class="bct">&nbsp;&nbsp;&gt;</SPAN><IMG alt="" height="1" width="1" src="./透过 Linux 内核看无锁编程_files/c(1).gif"><BR><H1>透过 Linux 内核看无锁编程</H1><IMG alt="" height="6" width="1" src="./透过 Linux 内核看无锁编程_files/c(1).gif" class="display-img"></TD><TD class="no-print" width="192"><IMG alt="developerWorks" height="18" width="192" src="./透过 Linux 内核看无锁编程_files/dw.gif"></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><TABLE border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR valign="top"><TD width="10"><IMG alt="" height="1" width="10" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD><TD width="100%"><TABLE class="no-print" border="0" width="160" cellspacing="0" cellpadding="0" align="right"><TBODY><TR><TD width="10"><IMG alt="" height="1" width="10" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD><TD><TABLE width="150" cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD class="v14-header-1-small">文档选项</TD></TR></TBODY></TABLE><TABLE class="v14-gray-table-border" cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD class="no-padding" width="150"><NOSCRIPT></NOSCRIPT><INPUT value="多核多线程已经成为当下一个时髦的话题，而无锁编程更是这个时髦话题中的热点话题。Linux 内核可能是当今最大最复杂的并行程序之一，为我们分析多核多线程提供了绝佳的范例。内核设计者已经将最新的无锁编程技术带进了 2.6 系统内核中，本文以 2.6.10 版本为蓝本，带领您领略多核多线程编程的真谛，窥探无锁编程的奥秘 ，体味大师们的高雅设计！" name="body" type="hidden"><INPUT value="透过 Linux 内核看无锁编程" name="subject" type="hidden"><INPUT value="cn" name="lang" type="hidden"><NOSCRIPT></NOSCRIPT><TABLE width="143" cellspacing="0" cellpadding="0" border="0"><SCRIPT language="JavaScript" type="text/javascript">
<!--
document.write('<tr valign="top"><td width="8"><img src="//www.ibm.com/i/c.gif" width="8" height="1" alt=""/></td><td width="16"><img alt="将打印机的版面设置成横向打印模式" height="16" src="//www.ibm.com/i/v14/icons/printer.gif" width="16" vspace="3" /></td><td width="122"><p><b><a class="smallplainlink" href="javascript:print()">打印本页</a></b></p></td></tr>');
//-->
</SCRIPT><TBODY><TR valign="top"><TD width="8"><IMG src="./透过 Linux 内核看无锁编程_files/c(1).gif" width="8" height="1" alt=""></TD><TD width="16"><IMG alt="将打印机的版面设置成横向打印模式" height="16" src="./透过 Linux 内核看无锁编程_files/printer.gif" width="16" vspace="3"></TD><TD width="122"><P><B><A class="smallplainlink" href="javascript:print()">打印本页</A></B></P></TD></TR>
<FORM action="https://www.ibm.com/developerworks/secure/email-it.jsp" name="email"></FORM><SCRIPT language="JavaScript" type="text/javascript">
<!--
document.write('<tr valign="top"><td width="8"><img src="//www.ibm.com/i/c.gif" width="8" height="1" alt=""/></td><td width="16"><img src="//www.ibm.com/i/v14/icons/em.gif" height="16" width="16" vspace="3" alt="将此页作为电子邮件发送" /></td><td width="122"><p><a class="smallplainlink" href="javascript:document.email.submit();"><b>将此页作为电子邮件发送</b></a></p></td></tr>');
//-->
</SCRIPT><TR valign="top"><TD width="8"><IMG src="./透过 Linux 内核看无锁编程_files/c(1).gif" width="8" height="1" alt=""></TD><TD width="16"><IMG src="./透过 Linux 内核看无锁编程_files/em.gif" height="16" width="16" vspace="3" alt="将此页作为电子邮件发送"></TD><TD width="122"><P><A class="smallplainlink" href="javascript:document.email.submit();"><B>将此页作为电子邮件发送</B></A></P></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- this content will be automatically generated across all content areas --><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><BR></TD></TR></TBODY></TABLE><P>级别： 初级</P><P><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#author">杨 小华</A>, Linux 内核开发工程师, 自由撰稿人<BR></P><P>2010 年  1 月  21 日</P><BLOCKQUOTE>多核多线程已经成为当下一个时髦的话题，而无锁编程更是这个时髦话题中的热点话题。Linux 内核可能是当今最大最复杂的并行程序之一，为我们分析多核多线程提供了绝佳的范例。内核设计者已经将最新的无锁编程技术带进了 2.6 系统内核中，本文以 2.6.10 版本为蓝本，带领您领略多核多线程编程的真谛，窥探无锁编程的奥秘 ，体味大师们的高雅设计！</BLOCKQUOTE><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><!-- include java script once we verify teams wants to use this and it will work on dbcs and cyrillic characters -->

<!--END RESERVED FOR FUTURE USE INCLUDE FILES-->
			<P><A name="major1"><SPAN class="atitle">非阻塞型同步 (Non-blocking Synchronization) 简介</SPAN></A></P>
			<P>如何正确有效的保护共享数据是编写并行程序必须面临的一个难题，通常的手段就是同步。同步可分为阻塞型同步（Blocking Synchronization）和非阻塞型同步（ Non-blocking Synchronization）。</P>
			<P>阻塞型同步是指当一个线程到达临界区时，因另外一个线程已经持有访问该共享数据的锁，从而不能获取锁资源而阻塞，直到另外一个线程释放锁。常见的同步原语有 mutex、semaphore 等。如果同步方案采用不当，就会造成死锁（deadlock），活锁（livelock）和优先级反转（priority inversion），以及效率低下等现象。</P>
			<P>为了降低风险程度和提高程序运行效率，业界提出了不采用锁的同步方案，依照这种设计思路设计的算法称为非阻塞型算法，其本质特征就是停止一个线程的执行不会阻碍系统中其他执行实体的运行。</P>
			<P>当今比较流行的 Non-blocking Synchronization 实现方案有三种：</P>
			<OL type="1">
				<LI>
					<B>Wait-free</B>
					<P>Wait-free 是指任意线程的任何操作都可以在有限步之内结束，而不用关心其它线程的执行速度。 Wait-free 是基于 per-thread 的，可以认为是 starvation-free 的。非常遗憾的是实际情况并非如此，采用 Wait-free 的程序并不能保证 starvation-free，同时内存消耗也随线程数量而线性增长。目前只有极少数的非阻塞算法实现了这一点。</P></LI>
				<LI>
					<B>Lock-free</B>
					<P>Lock-Free 是指能够确保执行它的所有线程中至少有一个能够继续往下执行。由于每个线程不是 starvation-free 的，即有些线程可能会被任意地延迟，然而在每一步都至少有一个线程能够往下执行，因此系统作为一个整体是在持续执行的，可以认为是 system-wide 的。所有 Wait-free 的算法都是 Lock-Free 的。</P></LI>
				<LI>
					<B>Obstruction-free</B>
					<P>Obstruction-free 是指在任何时间点，一个孤立运行线程的每一个操作可以在有限步之内结束。只要没有竞争，线程就可以持续运行。一旦共享数据被修改，Obstruction-free 要求中止已经完成的部分操作，并进行回滚。 所有 Lock-Free 的算法都是 Obstruction-free 的。</P></LI></OL>
			<P>综上所述，不难得出 Obstruction-free 是 Non-blocking synchronization 中性能最差的，而 Wait-free 性能是最好的，但实现难度也是最大的，因此 Lock-free 算法开始被重视，并广泛运用于当今正在运行的程序中，比如 linux 内核。</P>
			<P>一般采用原子级的 read-modify-write 原语来实现 Lock-Free 算法，其中 LL 和 SC 是 Lock-Free 理论研究领域的理想原语，但实现这些原语需要 CPU 指令的支持，非常遗憾的是目前没有任何 CPU 直接实现了 SC 原语。根据此理论，业界在原子操作的基础上提出了著名的 CAS（Compare - And - Swap）操作来实现 Lock-Free 算法，Intel 实现了一条类似该操作的指令：cmpxchg8。</P>
			<P>CAS 原语负责将某处内存地址的值（1 个字节）与一个期望值进行比较，如果相等，则将该内存地址处的值替换为新值，CAS 操作伪码描述如下：</P>
			<BR><A name="listing1"><B>清单 1. CAS 伪码</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 Bool CAS(T* addr, T expected, T newValue) 
 { 
      if( *addr == expected ) 
     { 
          *addr =  newValue; 
           return true; 
     } 
     else 
           return false; 
 } 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>在实际开发过程中，利用 CAS 进行同步，代码如下所示：</P>
			<BR><A name="listing2"><B>清单 2. CAS 实际操作</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 do{ 
        备份旧数据；
        基于旧数据构造新数据；
 }while(!CAS( 内存地址，备份的旧数据，新数据 )) 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>就是指当两者进行比较时，如果相等，则证明共享数据没有被修改，替换成新值，然后继续往下运行；如果不相等，说明共享数据已经被修改，放弃已经所做的操作，然后重新执行刚才的操作。容易看出 CAS 操作是基于共享数据不会被修改的假设，采用了类似于数据库的 commit-retry 的模式。当同步冲突出现的机会很少时，这种假设能带来较大的性能提升。</P>
			<BR><TABLE border="0" cellspacing="0" cellpadding="0" width="100%"><TBODY><TR><TD><IMG width="100%" src="./透过 Linux 内核看无锁编程_files/blue_rule.gif" height="1" alt=""><BR><IMG alt="" width="8" height="6" border="0" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR></TBODY></TABLE><TABLE class="no-print" cellspacing="0" cellpadding="0" align="right"><TBODY><TR align="right"><TD><IMG width="100%" height="4" src="./透过 Linux 内核看无锁编程_files/c(1).gif" alt=""><BR><TABLE border="0" cellpadding="0" cellspacing="0"><TBODY><TR><TD valign="middle"><IMG width="16" src="./透过 Linux 内核看无锁编程_files/u_bold.gif" height="16" border="0" alt=""><BR></TD><TD valign="top" align="right"><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#main" class="fbox"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR><P><A name="major2"><SPAN class="atitle">加锁的层级</SPAN></A></P>
			<P>根据复杂程度、加锁粒度及运行速度，可以得出如下图所示的锁层级：</P>
				<BR><A name="fig1"><B>图 1. 加锁层级</B></A><BR>
				<IMG alt="图 1. 加锁层级" height="226" src="./透过 Linux 内核看无锁编程_files/image001.jpg" width="553">
			<BR>
			<P>其中标注为红色字体的方案为 Blocking synchronization，黑色字体为 Non-blocking synchronization。Lock-based 和 Lockless-based 两者之间的区别仅仅是加锁粒度的不同。图中最底层的方案就是大家经常使用的 mutex 和 semaphore 等方案，代码复杂度低，但运行效率也最低。</P>
			<BR><TABLE border="0" cellspacing="0" cellpadding="0" width="100%"><TBODY><TR><TD><IMG width="100%" src="./透过 Linux 内核看无锁编程_files/blue_rule.gif" height="1" alt=""><BR><IMG alt="" width="8" height="6" border="0" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR></TBODY></TABLE><TABLE class="no-print" cellspacing="0" cellpadding="0" align="right"><TBODY><TR align="right"><TD><IMG width="100%" height="4" src="./透过 Linux 内核看无锁编程_files/c(1).gif" alt=""><BR><TABLE border="0" cellpadding="0" cellspacing="0"><TBODY><TR><TD valign="middle"><IMG width="16" src="./透过 Linux 内核看无锁编程_files/u_bold.gif" height="16" border="0" alt=""><BR></TD><TD valign="top" align="right"><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#main" class="fbox"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR><P><A name="major3"><SPAN class="atitle">Linux 内核中的无锁分析</SPAN></A></P>
			<P>Linux 内核可能是当今最大最复杂的并行程序之一，它的并行主要来至于中断、内核抢占及 SMP 等。内核设计者们为了不断提高 Linux 内核的效率，从全局着眼，逐步废弃了大内核锁来降低锁的粒度；从细处下手，不断对局部代码进行优化，用无锁编程替代基于锁的方案，如 seqlock 及 RCU 等；不断减少锁冲突程度、降低等待时间，如 Double-checked locking 和原子锁等。</P>
			<P><A name="minor3.1"><SPAN class="smalltitle">内核无锁第一层级 — 少锁</SPAN></A></P>
			<P>无论什么时候当临界区中的代码仅仅需要加锁一次，同时当其获取锁的时候必须是线程安全的，此时就可以利用 Double-checked Locking 模式来减少锁竞争和加锁载荷。目前 Double-checked Locking 已经广泛应用于单例 (Singleton) 模式中。内核设计者基于此思想，巧妙的将 Double-checked Locking 方法运用于内核代码中。</P>
			<P>当一个进程已经僵死，即进程处于 TASK_ZOMBIE 状态，如果父进程调用 waitpid() 系统调用时，父进程需要为子进程做一些清理性的工作，代码如下所示：</P>
			<BR><A name="listing3"><B>清单 3. 少锁操作</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 984   static int wait_task_zombie(task_t *p, int noreap, 
 985           struct siginfo __user *infop, 
 986           int __user *stat_addr, struct rusage __user *ru) 
 987   { 
           ……
 1103       if (p-&gt;real_parent != p-&gt;parent) { 
 1104           write_lock_irq(&amp;tasklist_lock); 
 1105           /* Double-check with lock held.  */ 
 1106           if (p-&gt;real_parent != p-&gt;parent) { 
 1107               __ptrace_unlink(p); 
 1108               // TODO: is this safe? 
 1109               p-&gt;exit_state = EXIT_ZOMBIE; 
                   ……
 1120           } 
 1121           write_unlock_irq(&amp;tasklist_lock); 
 1122      } 
          ……
 1127  } 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>如果将 write_lock_irq 放置于 1103 行之前，锁的范围过大，锁的负载也会加重，影响效率；如果将加锁的代码放到判断里面，且没有 1106 行的代码，程序会正确吗？在单核情况下是正确的，但在双核情况下问题就出现了。一个非主进程在一个 CPU 上运行，正准备调用 exit 退出，此时主进程在另外一个 CPU 上运行，在子进程调用 release_task 函数之前调用上述代码。子进程在 exit_notify 函数中，先持有读写锁 tasklist_lock，调用 forget_original_parent。主进程运行到 1104 处，由于此时子进程先持有该锁，所以父进程只好等待。在 forget_original_parent 函数中，如果该子进程还有子进程，则会调用 reparent_thread()，将执行 p-&gt;parent = p-&gt;real_parent; 语句，导致两者相等，等非主进程释放读写锁 tasklist_lock 时，另外一个 CPU 上的主进程被唤醒，一旦开始执行，继续运行将会导致 bug。</P>
			<P>严格的说，Double-checked locking 不属于无锁编程的范畴，但由原来的每次加锁访问到大多数情况下无须加锁，就是一个巨大的进步。同时从这里也可以看出一点端倪，内核开发者为了降低锁冲突率，减少等待时间，提高运行效率，一直在持续不断的进行改进。</P>
			<P><A name="minor3.2"><SPAN class="smalltitle">内核无锁第二层级 — 原子锁</SPAN></A></P>
			<P>     原子操作可以保证指令以原子的方式执行——执行过程不被打断。内核提供了两组原子操作接口：一组针对于整数进行操作，另外一组针对于单独的位进行操作。内核中的原子操作通常是内联函数，一般是通过内嵌汇编指令来完成。对于一些简单的需求，例如全局统计、引用计数等等，可以归结为是对整数的原子计算。</P>
			<P><A name="minor3.3"><SPAN class="smalltitle">内核无锁第三层级 — Lock-free</SPAN></A></P>
			<P><B>1. Lock-free 应用场景一 —— Spin Lock</B></P>
			<P>Spin Lock 是一种轻量级的同步方法，一种非阻塞锁。当 lock 操作被阻塞时，并不是把自己挂到一个等待队列，而是死循环 CPU 空转等待其他线程释放锁。 Spin lock 锁实现代码如下：</P>
			<BR><A name="listing4"><B>清单 4. spin lock 实现代码</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 static inline void __preempt_spin_lock(spinlock_t *lock) 
 { 
           ……
  do { 
    preempt_enable(); 
    while (spin_is_locked(lock)) 
      cpu_relax(); 
    preempt_disable(); 
  } while (!_raw_spin_trylock(lock)); 
 } 

 static inline int _raw_spin_trylock(spinlock_t *lock) 
 { 
  char oldval; 
  __asm__ __volatile__( 
    "xchgb %b0,%1"
    :"=q" (oldval), "=m" (lock-&gt;lock) 
    :"0" (0) : "memory"); 
  return oldval &gt; 0; 
 } 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>汇编语言指令 xchgb 原子性的交换 8 位 oldval( 存 0) 和 lock-&gt;lock 的值，如果 oldval 为 1(lock 初始值为 1)，则获取锁成功，反之，则继续循环，接着 relax 休息一会儿，然后继续周而复始，直到成功。</P>
			<P>对于应用程序来说，希望任何时候都能获取到锁，也就是期望 lock-&gt;lock 为 1，那么用 CAS 原语来描述 _raw_spin_trylock(lock) 就是 CAS(lock-&gt;lock,1,0);</P>
			<P>如果同步操作总是能在数条指令内完成，那么使用 Spin Lock 会比传统的 mutex lock 快一个数量级。Spin Lock 多用于多核系统中，适合于锁持有时间小于将一个线程阻塞和唤醒所需时间的场合。</P>
			<P>pthread 库已经提供了对 spin lock 的支持，所以用户态程序也能很方便的使用 spin lock 了，需要包含 pthread.h 。在某些场景下，pthread_spin_lock 效率是 pthread_mutex_lock 效率的一倍多。美中不足的是，内核实现了读写 spin lock 锁，但 pthread 未能实现。</P>
			<P><B>2. Lock -free 应用场景二 —— Seqlock</B></P>
			<P>手表最主要最常用的功能是读时间，而不是校正时间，一旦后者成了最常用的功能，消费者肯定不会买账。计算机的时钟也是这个功能，修改时间是小概率事件，而读时间是经常发生的行为。以下代码摘自 2.4.34 内核：</P>
			<BR><A name="listing5"><B>清单 5. 2.4.34 seqlock 实现代码</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 443 void do_gettimeofday(struct timeval *tv) 
 444 { 
               ……
 448         read_lock_irqsave(&amp;xtime_lock, flags); 
               ……
 455         sec = xtime.tv_sec; 
 456         usec += xtime.tv_usec; 
 457         read_unlock_irqrestore(&amp;xtime_lock, flags); 
               ……
 466 } 

 468 void do_settimeofday(struct timeval *tv) 
 469 { 
 470         write_lock_irq(&amp;xtime_lock); 
               ……
 490         write_unlock_irq(&amp;xtime_lock); 
 491 } 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>不难发现获取时间和修改时间采用的是 spin lock 读写锁，读锁和写锁具有相同的优先级，只要读持有锁，写锁就必须等待，反之亦然。</P>
			<P>Linux 2.6 内核中引入一种新型锁——顺序锁 (seqlock)，它与 spin lock 读写锁非常相似，只是它为写者赋予了较高的优先级。也就是说，即使读者正在读的时候也允许写者继续运行。当存在多个读者和少数写者共享一把锁时，seqlock 便有了用武之地，因为 seqlock 对写者更有利，只要没有其他写者，写锁总能获取成功。根据 lock-free 和时钟功能的思想，内核开发者在 2.6 内核中，将上述读写锁修改成了顺序锁 seqlock，代码如下：</P>
			<BR><A name="listing6"><B>清单 6. 2.6.10 seqlock 实现代码</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 static inline unsigned read_seqbegin(const seqlock_t *sl) 
 { 
  unsigned ret = sl-&gt;sequence; 
  smp_rmb(); 
  return ret; 
 } 

 static inline int read_seqretry(const seqlock_t *sl, unsigned iv) 
 { 
  smp_rmb(); 
  return (iv &amp; 1) | (sl-&gt;sequence ^ iv); 
 } 

 static inline void write_seqlock(seqlock_t *sl) 
 { 
  spin_lock(&amp;sl-&gt;lock); 
  ++sl-&gt;sequence; 
  smp_wmb();      
 } 

 void do_gettimeofday(struct timeval *tv) 
 { 
  unsigned long seq; 
  unsigned long usec, sec; 
  unsigned long max_ntp_tick; 
    ……
  do { 
    unsigned long lost; 
    seq = read_seqbegin(&amp;xtime_lock); 
      ……
    sec = xtime.tv_sec; 
    usec += (xtime.tv_nsec / 1000); 
  } while (read_seqretry(&amp;xtime_lock, seq)); 
    ……
  tv-&gt;tv_sec = sec; 
  tv-&gt;tv_usec = usec; 
 } 

 int do_settimeofday(struct timespec *tv) 
 { 
    ……
  write_seqlock_irq(&amp;xtime_lock); 
    ……
  write_sequnlock_irq(&amp;xtime_lock); 
  clock_was_set(); 
  return 0; 
 } 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>Seqlock 实现原理是依赖一个序列计数器，当写者写入数据时，会得到一把锁，并且将序列值加 1。当读者读取数据之前和之后，该序列号都会被读取，如果读取的序列号值都相同，则表明写没有发生。反之，表明发生过写事件，则放弃已进行的操作，重新循环一次，直至成功。不难看出，do_gettimeofday 函数里面的 while 循环和接下来的两行赋值操作就是 CAS 操作。</P>
			<P>采用顺序锁 seqlock 好处就是写者永远不会等待，缺点就是有些时候读者不得不反复多次读相同的数据直到它获得有效的副本。当要保护的临界区很小，很简单，频繁读取而写入很少发生（WRRM--- Write Rarely Read Mostly）且必须快速时，就可以使用 seqlock。但 seqlock 不能保护包含有指针的数据结构，因为当写者修改数据结构时，读者可能会访问一个无效的指针。</P>
			<P><B>3. Lock -free 应用场景三 —— RCU</B></P>
			<P>在 2.6 内核中，开发者还引入了一种新的无锁机制 -RCU(Read-Copy-Update)，允许多个读者和写者并发执行。RCU 技术的核心是写操作分为写和更新两步，允许读操作在任何时候无阻碍的运行，换句话说，就是通过延迟写来提高同步性能。RCU 主要应用于 WRRM 场景，但它对可保护的数据结构做了一些限定：RCU 只保护被动态分配并通过指针引用的数据结构，同时读写控制路径不能有睡眠。以下数组动态增长代码摘自 2.4.34 内核：</P>
			<P><B>清单 7.  2.4.34 RCU 实现代码</B></P>
			<P>其中 ipc_lock 是读者，grow_ary 是写者，不论是读或者写，都需要加 spin lock 对被保护的数据结构进行访问。改变数组大小是小概率事件，而读取是大概率事件，同时被保护的数据结构是指针，满足 RCU 运用场景。以下代码摘自 2.6.10 内核：</P>
			<BR><A name="listing7"><B>清单 8. 2.6.10 RCU 实现代码</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 #define rcu_read_lock()    preempt_disable() 
 #define rcu_read_unlock()  preempt_enable() 
 #define rcu_assign_pointer(p, v)  ({ \ 
                    smp_wmb(); \ 
                    (p) = (v); \ 
                      }) 

 struct kern_ipc_perm* ipc_lock(struct ipc_ids* ids, int id) 
 { 
    ……
  rcu_read_lock(); 
  entries = rcu_dereference(ids-&gt;entries); 
  if(lid &gt;= entries-&gt;size) { 
    rcu_read_unlock(); 
    return NULL; 
  } 
  out = entries-&gt;p[lid]; 
  if(out == NULL) { 
    rcu_read_unlock(); 
    return NULL; 
  } 
    ……
  return out; 
 } 

 static int grow_ary(struct ipc_ids* ids, int newsize) 
 { 
  struct ipc_id_ary* new; 
  struct ipc_id_ary* old; 
    ……
  new = ipc_rcu_alloc(sizeof(struct kern_ipc_perm *)*newsize + 
          sizeof(struct ipc_id_ary)); 
  if(new == NULL) 
    return size; 
  new-&gt;size = newsize; 
  memcpy(new-&gt;p, ids-&gt;entries-&gt;p, sizeof(struct kern_ipc_perm *)*size 
               +sizeof(struct ipc_id_ary)); 
  for(i=size;i&lt;newsize;i++) { 
    new-&gt;p[i] = NULL; 
  } 
  old = ids-&gt;entries; 
  /* 
   * Use rcu_assign_pointer() to make sure the memcpyed contents 
   * of the new array are visible before the new array becomes visible. 
   */ 
  rcu_assign_pointer(ids-&gt;entries, new); 
  ipc_rcu_putref(old); 
  return newsize; 
 } 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>纵观整个流程，写者除内核屏障外，几乎没有一把锁。当写者需要更新数据结构时，首先复制该数据结构，申请 new 内存，然后对副本进行修改，调用 memcpy 将原数组的内容拷贝到 new 中，同时对扩大的那部分赋新值，修改完毕后，写者调用 rcu_assign_pointer 修改相关数据结构的指针，使之指向被修改后的新副本，整个写操作一气呵成，其中修改指针值的操作属于原子操作。在数据结构被写者修改后，需要调用内存屏障 smp_wmb，让其他 CPU 知晓已更新的指针值，否则会导致 SMP 环境下的 bug。当所有潜在的读者都执行完成后，调用 call_rcu 释放旧副本。同 Spin lock 一样，RCU 同步技术主要适用于 SMP 环境。</P>
			<P><A name="minor3.4"><SPAN class="smalltitle">内核无锁第四层级 — 免锁</SPAN></A></P>
			<P>环形缓冲区是生产者和消费者模型中常用的数据结构。生产者将数据放入数组的尾端，而消费者从数组的另一端移走数据，当达到数组的尾部时，生产者绕回到数组的头部。</P>
			<P>如果只有一个生产者和一个消费者，那么就可以做到免锁访问环形缓冲区（Ring Buffer）。写入索引只允许生产者访问并修改，只要写入者在更新索引之前将新的值保存到缓冲区中，则读者将始终看到一致的数据结构。同理，读取索引也只允许消费者访问并修改。</P>
				<BR><A name="fig2"><B>图 2. 环形缓冲区实现原理图</B></A><BR>
				<IMG alt="图 2. 环形缓冲区实现原理图" height="231" src="./透过 Linux 内核看无锁编程_files/image002.jpg" width="553">
			<BR>
			<P>如图所示，当读者和写者指针相等时，表明缓冲区是空的，而只要写入指针在读取指针后面时，表明缓冲区已满。</P>
			<BR><A name="listing8"><B>清单 9. 2.6.10 环形缓冲区实现代码</B></A><BR><TABLE width="100%" cellpadding="0" cellspacing="0" border="0"><TBODY><TR><TD class="code-outline"><PRE class="displaycode">				
 /* 
 * __kfifo_put - puts some data into the FIFO, no locking version 
 * Note that with only one concurrent reader and one concurrent 
 * writer, you don't need extra locking to use these functions. 
 */ 
 unsigned int __kfifo_put(struct kfifo *fifo, 
       unsigned char *buffer, unsigned int len) 
 { 
  unsigned int l; 
  len = min(len, fifo-&gt;size - fifo-&gt;in + fifo-&gt;out); 
  /* first put the data starting from fifo-&gt;in to buffer end */ 
  l = min(len, fifo-&gt;size - (fifo-&gt;in &amp; (fifo-&gt;size - 1))); 
  memcpy(fifo-&gt;buffer + (fifo-&gt;in &amp; (fifo-&gt;size - 1)), buffer, l); 
  /* then put the rest (if any) at the beginning of the buffer */ 
  memcpy(fifo-&gt;buffer, buffer + l, len - l); 
  fifo-&gt;in += len; 
  return len; 
 } 

 /* 
 * __kfifo_get - gets some data from the FIFO, no locking version 
 * Note that with only one concurrent reader and one concurrent 
 * writer, you don't need extra locking to use these functions. 
 */ 
 unsigned int __kfifo_get(struct kfifo *fifo, 
     unsigned char *buffer, unsigned int len) 
 { 
  unsigned int l; 
  len = min(len, fifo-&gt;in - fifo-&gt;out); 
  /* first get the data from fifo-&gt;out until the end of the buffer */ 
  l = min(len, fifo-&gt;size - (fifo-&gt;out &amp; (fifo-&gt;size - 1))); 
  memcpy(buffer, fifo-&gt;buffer + (fifo-&gt;out &amp; (fifo-&gt;size - 1)), l); 
  /* then get the rest (if any) from the beginning of the buffer */ 
  memcpy(buffer + l, fifo-&gt;buffer, len - l); 
  fifo-&gt;out += len; 
  return len; 
 } 
</PRE></TD></TR></TBODY></TABLE><BR>
			<P>以上代码摘自 2.6.10 内核，通过代码的注释（斜体部分）可以看出，当只有一个消费者和一个生产者时，可以不用添加任何额外的锁，就能达到对共享数据的访问。</P>
			<BR><TABLE border="0" cellspacing="0" cellpadding="0" width="100%"><TBODY><TR><TD><IMG width="100%" src="./透过 Linux 内核看无锁编程_files/blue_rule.gif" height="1" alt=""><BR><IMG alt="" width="8" height="6" border="0" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR></TBODY></TABLE><TABLE class="no-print" cellspacing="0" cellpadding="0" align="right"><TBODY><TR align="right"><TD><IMG width="100%" height="4" src="./透过 Linux 内核看无锁编程_files/c(1).gif" alt=""><BR><TABLE border="0" cellpadding="0" cellspacing="0"><TBODY><TR><TD valign="middle"><IMG width="16" src="./透过 Linux 内核看无锁编程_files/u_bold.gif" height="16" border="0" alt=""><BR></TD><TD valign="top" align="right"><A href="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121#main" class="fbox"><B>回页首</B></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><BR><BR><P><A name="major4"><SPAN class="atitle">总结</SPAN></A></P>
			<P>通过对比 2.4 和 2.6 内核代码，不得不佩服内核开发者的智慧，为了提高内核性能，一直不断的进行各种优化，并将业界最新的 lock-free 理念运用到内核中。</P>
			<P>在实际开发过程中，进行无锁设计时，首先进行场景分析，因为每种无锁方案都有特定的应用场景，接着根据场景分析进行数据结构的初步设计，然后根据先前的分析结果进行并发模型建模，最后在调整数据结构的设计，以便达到最优。</P>
		<BR><BR><P><A name="resources"><SPAN class="atitle">参考资料 </SPAN></A></P><UL><LI><A>
 Andrei Alexandrescu. 《 Lock-Free Data Structures--- Keeping threads moving while avoiding deadlock 》，《 Dr. Dobb's Journal 》， October 01, 2004。</A><BR><BR></LI><LI>
《 Non-blocking synchronization 》， <A href="http://en.wikipedia.org/wiki/Non-blocking_synchronization">http://en.wikipedia.org/wiki/Non-blocking_synchronization</A><BR><BR></LI><LI><A>
 Shameem Akhter and Jason Roberts. 李宝峰，富弘毅，李韬译 . 《多核程序设计技术》，电子工业出版社，2007。</A><BR><BR></LI><LI><A>
 Rebert Love，《 Linux Kernel Development，2rd Edition 》，机械工业出版社，2006。</A><BR><BR></LI><LI><A>
 Daniel P. Bovet，Marco Cesati，《 Understanding the Linux Kernel，3rd Edition 》，东南大学出版社，2006。</A><BR><BR></LI><LI><A>
 Jonatban Corbet 等，魏永明等译，《 Linux 设备驱动程序》，中国电力出版社，2006。</A><BR><BR></LI><LI><A>
 Gordon Fischer 等，《 The Linux Kernel Prime 》，机械工业出版社，2006。</A><BR><BR></LI><LI> 在 <A href="http://www.ibm.com/developerworks/cn/linux/"> developerWorks Linux 专区</A> 寻找为 Linux 开发人员（包括 <A href="http://www.ibm.com/developerworks/cn/linux/newto/">Linux 新手入门</A>）准备的更多参考资料，查阅我们 <A href="http://www.ibm.com/developerworks/cn/linux/best2009/index.html">最受欢迎的文章和教程</A>。 <BR><BR></LI><LI>在 developerWorks 上查阅所有 <A href="http://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp?search_by=Linux+%E6%8A%80%E5%B7%A7"> Linux 技巧</A> 和 <A href="http://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp?type_by=%E6%95%99%E7%A8%8B"> Linux 教程</A>。 </LI></UL><BR><BR><P><A name="author"><SPAN class="atitle">关于作者</SPAN></A></P><TABLE border="0" cellspacing="0" cellpadding="0" width="100%"><TBODY><TR><TD colspan="3"><IMG alt="" width="100%" height="5" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR><TR align="left" valign="top"><TD><P></P></TD><TD><IMG alt="" width="4" height="5" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD><TD width="100%"><P>杨小华，目前从事 Linux 内核方面的研究，喜欢捣鼓 Linux 系统，对 Linux 中断系统比较了解。可以通过 normalnotebook@126.com 与他取得联系。</P></TD></TR></TBODY></TABLE><BR><BR><BR><P class="no-print"><SPAN class="atitle"><A name="rate">对本文的评价</A></SPAN></P><SPAN class="no-print"><TABLE border="0" cellpadding="0" cellspacing="0" width="100%"><TBODY><TR valign="top"><TD><FORM action="https://www.ibm.com/developerworks/secure/cnratings.jsp" method="GET"><INPUT value="透过 Linux 内核看无锁编程" name="ArticleTitle" type="hidden"><INPUT value="Linux" name="Zone" type="hidden"><INPUT value="http://www.ibm.com/developerworks/cn/thankyou/" name="RedirectURL" type="hidden"><INPUT value="china" name="localsite" type="hidden"><SCRIPT language="javascript">document.write('<input type="hidden" name="url" value="'+location.href+'" />');</SCRIPT><INPUT type="hidden" name="url" value="http://www.ibm.com/developerworks/cn/linux/l-cn-lockfree/index.html?ca=drs-cn-0121"><TABLE cellspacing="0" cellpadding="0" border="0"><TBODY><TR><TD><IMG alt="" border="0" height="8" width="100" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR><TR valign="top"><TD><INPUT value="1" id="one" name="Rating" type="RADIO"><LABEL for="one">太差！ (1)</LABEL></TD></TR><TR valign="top"><TD><INPUT value="2" id="two" name="Rating" type="RADIO"><LABEL for="two">需提高 (2)</LABEL></TD></TR><TR valign="top"><TD><INPUT value="3" id="three" name="Rating" type="RADIO"><LABEL for="three">一般；尚可 (3)</LABEL></TD></TR><TR valign="top"><TD><INPUT value="4" id="four" name="Rating" type="RADIO"><LABEL for="four">好文章 (4)</LABEL></TD></TR><TR valign="top"><TD><INPUT value="5" id="five" name="Rating" type="RADIO"><LABEL for="five">真棒！(5)</LABEL></TD></TR></TBODY></TABLE><BR><B></B><LABEL for="cmts"><B>建议？</B><BR><TEXTAREA cols="60" rows="5" wrap="virtual" id="cmts" name="Comments"> </TEXTAREA><BR><BR><LABEL for="fback"><INPUT value="反馈意见" id="fback" type="SUBMIT"></LABEL></LABEL></FORM></TD></TR><TR valign="top"><TD bgcolor="#FFFFFF"><IMG alt="" border="0" height="8" width="100" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR></TBODY></TABLE></SPAN><BR><P><!-- --></P><!--START RESERVED FOR FUTURE USE INCLUDE FILES--><BR><!--END RESERVED FOR FUTURE USE INCLUDE FILES--><BR></TD><TD width="10"><IMG alt="" height="1" width="10" src="./透过 Linux 内核看无锁编程_files/c(1).gif"></TD></TR></TBODY></TABLE><SPAN class="small">IBM 公司保留在 developerWorks 网站上发表的内容的著作权。未经IBM公司或原始作者的书面明确许可，请勿转载。如果您希望转载，请通过 <A href="https://www.ibm.com/developerworks/secure/reprintreq.jsp?domain=dwchina">提交转载请求表单</A> 联系我们的编辑团队。</SPAN></TD></TR></TBODY></TABLE><!--FOOTER_BEGIN--><!-- IBM FOOTER -->
<TABLE border="0" cellpadding="0" cellspacing="0" width="100%">

<TBODY><TR>
<TD class="bbg" height="19">
<TABLE border="0" cellpadding="0" cellspacing="0">
<TBODY><TR>
<TD><SPAN class="spacer">&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><A class="mainlink" href="http://www.ibm.com/cn/ibm/index.shtml">关于 IBM</A></TD>
<TD class="footer-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD><A class="mainlink" href="http://www.ibm.com/cn/ibm/privacy/index.shtml">隐私条约</A></TD>
<TD class="footer-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD><A class="mainlink" href="http://www.ibm.com/contact/cn/">联系 IBM</A></TD>
<TD class="footer-divider" width="27">&nbsp;&nbsp;&nbsp;&nbsp;</TD>
<TD><A class="mainlink" href="http://www.ibm.com/legal/cn/zh/">使用条款</A></TD>
</TR>
</TBODY></TABLE>
</TD>
</TR>
</TBODY></TABLE>

<!-- end footer -->
<SCRIPT type="text/javascript" language="JavaScript1.2" src="./透过 Linux 内核看无锁编程_files/stats.js"></SCRIPT>
<NOSCRIPT></NOSCRIPT><!--FOOTER_END--><!--XSLT stylesheet used to transform this file:  dw-document-html-5.11.xsl--></BODY></HTML>