<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://fanqiang.chinaunix.net/a4/b7/20010508/111934.html -->
<HTML><HEAD><TITLE>[ 永远的UNIX > Linux网络编程--2. 初等网络函数介绍（TCP） ]</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<STYLE type=text/css>BODY {
	FONT: 12pt 宋体
}
TH {
	FONT: 12pt 宋体
}
INPUT {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
TEXTAREA {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
checkbox {
	FONT: 12pt 宋体
}
A:link {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:visited {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:hover {
	COLOR: #ffff00; TEXT-DECORATION: underline
}
BODY {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
TD {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
P {
	FONT-SIZE: 9pt; LINE-HEIGHT: 150%
}
</STYLE>

<META content="MSHTML 6.00.2900.3157" name=GENERATOR></HEAD>
<BODY text=#ffffff bgColor=#000000 
background="Linux网络编程--2_ 初等网络函数介绍（TCP） ].files/bline.gif">
<DIV align=center>
<CENTER>
<TABLE height=400 cellSpacing=0 cellPadding=0 width=750 border=0>
  <TBODY>
  <TR>
    <TD height=45>
      <P align=center><IMG alt="[ 永远的UNIX::UNIX技术资料的宝库 ]" 
      src="Linux网络编程--2_ 初等网络函数介绍（TCP） ].files/title.gif"></P></TD></TR>
  <TR>
  <TR>
    <TD vAlign=bottom align=left height=40><SMALL><A 
      href="http://fanqiang.chinaunix.net/">首页</A> &gt; 编程技术 &gt; 网络编程 &gt; 
      正文</SMALL></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--2_ 初等网络函数介绍（TCP） ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=center align=middle height=40><FONT size=5><B>Linux网络编程--2. 
      初等网络函数介绍（TCP）</B></FONT></TD></TR>
  <TR>
    <TD align=middle height=20><FONT color=#999999><SMALL>http://linuxc.51.net 
      作者:hoyt<HOYTLUO@21CN.COM> (2001-05-08 11:19:34)</SMALL></FONT></TD></TR>
  <TR>
    <TD align=middle>
      <TABLE cellSpacing=0 cellPadding=0 width=700 align=center border=0>
        <TBODY>
        <TR>
          <TD vAlign=top><FONT 
            color=#cccccc>&nbsp;&nbsp;Linux系统是通过提供套接字(socket)来进行网络编程的.网络程序通过socket和其它几个函数的调用,会返回一个&nbsp;通讯的文件描述符,我们可以将这个描述符看成普通的文件的描述符来操作,这就是linux的设备无关性的&nbsp;好处.我们可以通过向描述符读写操作实现网络之间的数据交流.&nbsp; 
            <BR><BR>2.1&nbsp;socket&nbsp; 
            <BR>int&nbsp;socket(int&nbsp;domain,&nbsp;int&nbsp;type,int&nbsp;protocol)&nbsp; 
            <BR><BR>&nbsp;&nbsp;domain:说明我们网络程序所在的主机采用的通讯协族(AF_UNIX和AF_INET等).&nbsp;AF_UNIX只能够用于单一的Unix系统进程间通信,而AF_INET是针对Internet的,因而可以允许在远程&nbsp;主机之间通信(当我们&nbsp;man&nbsp;socket时发现&nbsp;domain可选项是&nbsp;PF_*而不是AF_*,因为glibc是posix的实现&nbsp;所以用PF代替了AF,不过我们都可以使用的).&nbsp; 
            <BR><BR>&nbsp;&nbsp;type:我们网络程序所采用的通讯协议(SOCK_STREAM,SOCK_DGRAM等)&nbsp;SOCK_STREAM表明我们用的是TCP协议,这样会提供按顺序的,可靠,双向,面向连接的比特流.&nbsp;SOCK_DGRAM&nbsp;表明我们用的是UDP协议,这样只会提供定长的,不可靠,无连接的通信.&nbsp; 
            <BR><BR>&nbsp;&nbsp;protocol:由于我们指定了type,所以这个地方我们一般只要用0来代替就可以了&nbsp;socket为网络通讯做基本的准备.成功时返回文件描述符,失败时返回-1,看errno可知道出错的详细情况.&nbsp; 
            <BR><BR><BR>2.2&nbsp;bind&nbsp; 
            <BR>int&nbsp;bind(int&nbsp;sockfd,&nbsp;struct&nbsp;sockaddr&nbsp;*my_addr,&nbsp;int&nbsp;addrlen)&nbsp; 
            <BR><BR>&nbsp;&nbsp;sockfd:是由socket调用返回的文件描述符.&nbsp; 
            <BR><BR>&nbsp;&nbsp;addrlen:是sockaddr结构的长度.&nbsp; 
            <BR><BR>&nbsp;&nbsp;my_addr:是一个指向sockaddr的指针.&nbsp;在<LINUX 
            socket.h>中有&nbsp;sockaddr的定义&nbsp; 
            <BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;sockaddr{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unisgned&nbsp;short&nbsp;&nbsp;as_family; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sa_data[14]; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}; 
            <BR><BR>&nbsp;&nbsp;不过由于系统的兼容性,我们一般不用这个头文件,而使用另外一个结构(struct&nbsp;sockaddr_in)&nbsp;来代替.在<LINUX 
            in.h>中有sockaddr_in的定义&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;sockaddr_in{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sin_family;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;short&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sin_port; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;in_addr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sin_addr; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sin_zero[8]; 
            <BR><BR>&nbsp;&nbsp;我们主要使用Internet所以sin_family一般为AF_INET,sin_addr设置为INADDR_ANY表示可以&nbsp;和任何的主机通信,sin_port是我们要监听的端口号.sin_zero[8]是用来填充的.&nbsp;bind将本地的端口同socket返回的文件描述符捆绑在一起.成功是返回0,失败的情况和socket一样&nbsp; 
            <BR><BR>2.3&nbsp;listen&nbsp; 
            <BR>int&nbsp;listen(int&nbsp;sockfd,int&nbsp;backlog)&nbsp; 
            <BR><BR>sockfd:是bind后的文件描述符.&nbsp; 
            <BR><BR>backlog:设置请求排队的最大长度.当有多个客户端程序和服务端相连时,&nbsp;使用这个表示可以介绍的排队长度.&nbsp;listen函数将bind的文件描述符变为监听套接字.返回的情况和bind一样.&nbsp; 
            <BR><BR><BR>2.4&nbsp;accept&nbsp; 
            <BR>int&nbsp;accept(int&nbsp;sockfd,&nbsp;struct&nbsp;sockaddr&nbsp;*addr,int&nbsp;*addrlen)&nbsp; 
            <BR><BR>sockfd:是listen后的文件描述符.&nbsp; 
            <BR><BR>addr,addrlen是用来给客户端的程序填写的,服务器端只要传递指针就可以了.&nbsp;bind,listen和accept是服务器端用的函数,accept调用时,服务器端的程序会一直阻塞到有一个&nbsp;客户程序发出了连接.&nbsp;accept成功时返回最后的服务器端的文件描述符,这个时候服务器端可以向该描述符写信息了.&nbsp;失败时返回-1&nbsp; 
            <BR><BR><BR>2.5&nbsp;connect&nbsp; 
            <BR>int&nbsp;connect(int&nbsp;sockfd,&nbsp;struct&nbsp;sockaddr&nbsp;*&nbsp;serv_addr,int&nbsp;addrlen)&nbsp; 
            <BR><BR>sockfd:socket返回的文件描述符.&nbsp; 
            <BR><BR>serv_addr:储存了服务器端的连接信息.其中sin_add是服务端的地址&nbsp; 
            <BR><BR>addrlen:serv_addr的长度&nbsp; 
            <BR><BR>connect函数是客户端用来同服务端连接的.成功时返回0,sockfd是同服务端通讯的文件描述符&nbsp;失败时返回-1.&nbsp; 
            <BR><BR><BR>2.6&nbsp;实例&nbsp; <BR><BR>服务器端程序 
            <BR><BR><BR>/*******&nbsp;服务器程序&nbsp;&nbsp;(server.c)&nbsp;************/ 
            <BR>#include&nbsp;<STDLIB.H> <BR>#include&nbsp;<STDIO.H> 
            <BR>#include&nbsp;<ERRNO.H> <BR>#include&nbsp;<STRING.H> 
            <BR>#include&nbsp;<NETDB.H> <BR>#include&nbsp;<SYS types.h> 
            <BR>#include&nbsp;<NETINET in.h> <BR>#include&nbsp;<SYS socket.h> 
            <BR><BR>int&nbsp;main(int&nbsp;argc,&nbsp;char&nbsp;*argv[]) <BR>{ 
            <BR>&nbsp;int&nbsp;sockfd,new_fd; 
            <BR>&nbsp;struct&nbsp;sockaddr_in&nbsp;server_addr; 
            <BR>&nbsp;struct&nbsp;sockaddr_in&nbsp;client_addr; 
            <BR>&nbsp;int&nbsp;sin_size,portnumber; 
            <BR>&nbsp;char&nbsp;hello[]="Hello!&nbsp;Are&nbsp;You&nbsp;Fine?\n"; 
            <BR><BR>&nbsp;if(argc!=2) <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;fprintf(stderr,"Usage:%s&nbsp;portnumber\a\n",argv[0]); 
            <BR>&nbsp;&nbsp;exit(1); <BR>&nbsp;} <BR>&nbsp; 
            <BR>&nbsp;if((portnumber=atoi(argv[1]))&lt;0) <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;fprintf(stderr,"Usage:%s&nbsp;portnumber\a\n",argv[0]); 
            <BR>&nbsp;&nbsp;exit(1); <BR>&nbsp;} 
            <BR><BR>/*&nbsp;服务器端开始建立socket描述符&nbsp;*/ 
            <BR>&nbsp;if((sockfd=socket(AF_INET,SOCK_STREAM,0))==-1)&nbsp;&nbsp; 
            <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Socket&nbsp;error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;} 
            <BR><BR>/*&nbsp;服务器端填充&nbsp;sockaddr结构&nbsp;&nbsp;*/&nbsp; 
            <BR>&nbsp;bzero(&amp;server_addr,sizeof(struct&nbsp;sockaddr_in)); 
            <BR>&nbsp;server_addr.sin_family=AF_INET; 
            <BR>&nbsp;server_addr.sin_addr.s_addr=htonl(INADDR_ANY); 
            <BR>&nbsp;server_addr.sin_port=htons(portnumber); <BR>&nbsp; 
            <BR>/*&nbsp;捆绑sockfd描述符&nbsp;&nbsp;*/&nbsp; 
            <BR>&nbsp;if(bind(sockfd,(struct&nbsp;sockaddr&nbsp;*)(&amp;server_addr),sizeof(struct&nbsp;sockaddr))==-1) 
            <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Bind&nbsp;error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;} <BR>&nbsp; <BR>/*&nbsp;监听sockfd描述符&nbsp;&nbsp;*/ 
            <BR>&nbsp;if(listen(sockfd,5)==-1) <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Listen&nbsp;error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;} <BR><BR>&nbsp;while(1) <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;服务器阻塞,直到客户程序建立连接&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sin_size=sizeof(struct&nbsp;sockaddr_in); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if((new_fd=accept(sockfd,(struct&nbsp;sockaddr&nbsp;*)(&amp;client_addr),&amp;sin_size))==-1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Accept&nbsp;error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Server&nbsp;get&nbsp;connection&nbsp;from&nbsp;%s\n", 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inet_ntoa(client_addr.sin_addr)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(write(new_fd,hello,strlen(hello))==-1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Write&nbsp;Error:%s\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>/*&nbsp;这个通讯已经结束&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(new_fd); 
            <BR>/*&nbsp;循环下一个&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;} <BR>&nbsp;close(sockfd); <BR>&nbsp;exit(0); <BR>} 
            <BR><BR><BR>客户端程序 
            <BR><BR>/*******&nbsp;客户端程序&nbsp;&nbsp;client.c&nbsp;************/ 
            <BR>#include&nbsp;<STDLIB.H> <BR>#include&nbsp;<STDIO.H> 
            <BR>#include&nbsp;<ERRNO.H> <BR>#include&nbsp;<STRING.H> 
            <BR>#include&nbsp;<NETDB.H> <BR>#include&nbsp;<SYS types.h> 
            <BR>#include&nbsp;<NETINET in.h> <BR>#include&nbsp;<SYS socket.h> 
            <BR><BR>int&nbsp;main(int&nbsp;argc,&nbsp;char&nbsp;*argv[]) <BR>{ 
            <BR>&nbsp;int&nbsp;sockfd; <BR>&nbsp;char&nbsp;buffer[1024]; 
            <BR>&nbsp;struct&nbsp;sockaddr_in&nbsp;server_addr; 
            <BR>&nbsp;struct&nbsp;hostent&nbsp;*host; 
            <BR>&nbsp;int&nbsp;portnumber,nbytes; <BR><BR>&nbsp;if(argc!=3) 
            <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;fprintf(stderr,"Usage:%s&nbsp;hostname&nbsp;portnumber\a\n",argv[0]); 
            <BR>&nbsp;&nbsp;exit(1); <BR>&nbsp;} <BR>&nbsp; 
            <BR>&nbsp;if((host=gethostbyname(argv[1]))==NULL) <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Gethostname&nbsp;error\n"); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;} <BR><BR>&nbsp;if((portnumber=atoi(argv[2]))&lt;0) 
            <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Usage:%s&nbsp;hostname&nbsp;portnumber\a\n",argv[0]); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;} <BR>&nbsp; 
            <BR>/*&nbsp;客户程序开始建立&nbsp;sockfd描述符&nbsp;&nbsp;*/ 
            <BR>&nbsp;if((sockfd=socket(AF_INET,SOCK_STREAM,0))==-1) <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Socket&nbsp;Error:%s\a\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;} 
            <BR><BR>/*&nbsp;客户程序填充服务端的资料&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;bzero(&amp;server_addr,sizeof(server_addr)); 
            <BR>&nbsp;server_addr.sin_family=AF_INET; 
            <BR>&nbsp;server_addr.sin_port=htons(portnumber); 
            <BR>&nbsp;server_addr.sin_addr=*((struct&nbsp;in_addr&nbsp;*)host-&gt;h_addr); 
            <BR>&nbsp; 
            <BR>/*&nbsp;客户程序发起连接请求&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp; 
            <BR>&nbsp;if(connect(sockfd,(struct&nbsp;sockaddr&nbsp;*)(&amp;server_addr),sizeof(struct&nbsp;sockaddr))==-1) 
            <BR>{ 
            <BR>&nbsp;&nbsp;fprintf(stderr,"Connect&nbsp;Error:%s\a\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;exit(1); <BR>} 
            <BR><BR>/*&nbsp;连接成功了&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>if((nbytes=read(sockfd,buffer,1024))==-1) <BR>{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr,"Read&nbsp;Error:%s\n",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;} <BR>&nbsp;buffer[nbytes]='\0'; 
            <BR>&nbsp;printf("I&nbsp;have&nbsp;received:%s\n",buffer); 
            <BR>/*&nbsp;结束通讯&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;close(sockfd); <BR>&nbsp;exit(0); <BR>} 
            <BR><BR><BR>MakeFile 
            <BR>这里我们使用GNU&nbsp;的make实用程序来编译.&nbsp;关于make的详细说明见&nbsp;Make&nbsp;使用介绍&nbsp; 
            <BR><BR>#########&nbsp;&nbsp;Makefile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;########### 
            <BR>all:server&nbsp;client <BR>server:server.c 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gcc&nbsp;$^&nbsp;-o&nbsp;$@ 
            <BR>client:client.c 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gcc&nbsp;$^&nbsp;-o&nbsp;$@ 
            <BR><BR>运行make后会产生两个程序server(服务器端)和client(客户端)&nbsp;先运行./server&nbsp;portnumber&amp;&nbsp;(portnumber随便取一个大于1204且不在/etc/services中出现的号码&nbsp;就用8888好了),然后运行&nbsp;./client&nbsp;localhost&nbsp;8888&nbsp;看看有什么结果.&nbsp;(你也可以用telnet和netstat试一试.)&nbsp;上面是一个最简单的网络程序,不过是不是也有点烦.上面有许多函数我们还没有解释.&nbsp;我会在下一章进行的详细的说明.&nbsp; 
            <BR><BR><BR>2.7&nbsp;总结&nbsp; 
            <BR>总的来说网络程序是由两个部分组成的--客户端和服务器端.它们的建立步骤一般是:&nbsp; <BR><BR>服务器端 
            <BR>socket--&gt;bind--&gt;listen--&gt;accept&nbsp; <BR><BR>客户端 
            <BR>socket--&gt;connect&nbsp; <BR>(<A 
            href="http://www.fanqiang.com/">http://www.fanqiang.com/</A>) 
            </FONT>&nbsp;&nbsp;&nbsp;&nbsp;进入【<A 
            href="http://www.chinaunix.net/">UNIX论坛</A>】 </TD></TR>
        <TR>
          <TD>
            <HR>
          </TD></TR>
        <TR>
          <TD><B>相关文章</B> </TD></TR>
        <TR>
          <TD><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010810/1200001101.html">Proxy源代码分析--谈谈如何学习linux网络编程</A> 
            <SMALL>(2001-08-10 12:00:00)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112433.html">Linux网络编程--10. 
            原始套接字 --11. 后记</A> <SMALL>(2001-05-08 11:26:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112359.html">Linux网络编程--9. 
            服务器模型</A> <SMALL>(2001-05-08 11:23:59)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112324.html">Linux网络编程--8. 
            套接字选项</A> <SMALL>(2001-05-08 11:23:24)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112240.html">Linux网络编程--7. 
            TCP/IP协议</A> <SMALL>(2001-05-08 11:22:40)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112209.html">Linux网络编程--6. 
            高级套接字函数</A> <SMALL>(2001-05-08 11:22:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112131.html">Linux网络编程--5. 
            用户数据报发送</A> <SMALL>(2001-05-08 11:21:31)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112052.html">Linux网络编程--4. 
            完整的读写函数</A> <SMALL>(2001-05-08 11:20:52)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112014.html">Linux网络编程--3. 
            服务器和客户机的信息函数</A> <SMALL>(2001-05-08 11:20:14)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/111934.html">Linux网络编程--2. 
            初等网络函数介绍（TCP）</A> <SMALL>(2001-05-08 
        11:19:34)</SMALL></FONT><BR></TD></TR>
        <TR>
        <TR>
          <TD><BR>===<A 
            href="http://fanqiang.chinaunix.net/cgi-bin/find.cgi?key=Linux网络编程">更多相关</A>===</TD></TR>
        <TR>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--2_ 初等网络函数介绍（TCP） ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=top width="100%" colSpan=5 height=40>
      <P align=center><FONT color=#ffffff>★&nbsp;&nbsp;樊强制作 欢迎分享&nbsp;&nbsp;★ 
      </FONT></P></TD></TR></TBODY></TABLE></CENTER></DIV></BODY></HTML>
