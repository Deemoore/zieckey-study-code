<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://fanqiang.chinaunix.net/a4/b7/20010508/112209.html -->
<HTML><HEAD><TITLE>[ 永远的UNIX > Linux网络编程--6. 高级套接字函数 ]</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<STYLE type=text/css>BODY {
	FONT: 12pt 宋体
}
TH {
	FONT: 12pt 宋体
}
INPUT {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
TEXTAREA {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
checkbox {
	FONT: 12pt 宋体
}
A:link {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:visited {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:hover {
	COLOR: #ffff00; TEXT-DECORATION: underline
}
BODY {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
TD {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
P {
	FONT-SIZE: 9pt; LINE-HEIGHT: 150%
}
</STYLE>

<META content="MSHTML 6.00.2900.3157" name=GENERATOR></HEAD>
<BODY text=#ffffff bgColor=#000000 
background="Linux网络编程--6_ 高级套接字函数 ].files/bline.gif">
<DIV align=center>
<CENTER>
<TABLE height=400 cellSpacing=0 cellPadding=0 width=750 border=0>
  <TBODY>
  <TR>
    <TD height=45>
      <P align=center><IMG alt="[ 永远的UNIX::UNIX技术资料的宝库 ]" 
      src="Linux网络编程--6_ 高级套接字函数 ].files/title.gif"></P></TD></TR>
  <TR>
  <TR>
    <TD vAlign=bottom align=left height=40><SMALL><A 
      href="http://fanqiang.chinaunix.net/">首页</A> &gt; 编程技术 &gt; 网络编程 &gt; 
      正文</SMALL></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--6_ 高级套接字函数 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=center align=middle height=40><FONT size=5><B>Linux网络编程--6. 
      高级套接字函数</B></FONT></TD></TR>
  <TR>
    <TD align=middle height=20><FONT color=#999999><SMALL>http://linuxc.51.net 
      作者:hoyt<HOYTLUO@21CN.COM> (2001-05-08 11:22:09)</SMALL></FONT></TD></TR>
  <TR>
    <TD align=middle>
      <TABLE cellSpacing=0 cellPadding=0 width=700 align=center border=0>
        <TBODY>
        <TR>
          <TD vAlign=top><FONT 
            color=#cccccc><BR>&nbsp;&nbsp;&nbsp;&nbsp;在前面的几个部分里面,我们已经学会了怎么样从网络上读写信息了.前面的一些函数(read,write)是网络程序里面最基本的函数.也是最原始的通信函数.在这一章里面,我们一起来学习网络通信的高级函数.这一章我们学习另外几个读写函数.&nbsp; 
            <BR><BR>6.1&nbsp;recv和send&nbsp; 
            <BR>recv和send函数提供了和read和write差不多的功能.不过它们提供&nbsp;了第四个参数来控制读写操作.&nbsp; 
            <BR><BR>&nbsp;int&nbsp;recv(int&nbsp;sockfd,void&nbsp;*buf,int&nbsp;len,int&nbsp;flags) 
            <BR>&nbsp;int&nbsp;send(int&nbsp;sockfd,void&nbsp;*buf,int&nbsp;len,int&nbsp;flags) 
            <BR><BR>前面的三个参数和read,write一样,第四个参数可以是0或者是以下的组合&nbsp; 
            <BR>&nbsp;_______________________________________________________________ 
            <BR>|&nbsp;&nbsp;MSG_DONTROUTE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;不查找路由表&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 
            <BR>|&nbsp;&nbsp;MSG_OOB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;接受或者发送带外数据&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 
            <BR>|&nbsp;&nbsp;MSG_PEEK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;查看数据,并不从系统缓冲区移走数据&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 
            <BR>|&nbsp;&nbsp;MSG_WAITALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;等待所有数据&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| 
            <BR>|--------------------------------------------------------------| 
            <BR><BR>MSG_DONTROUTE:是send函数使用的标志.这个标志告诉IP协议.目的主机在本地网络上面,没有必要查找路由表.这个标志一般用网络诊断和路由程序里面.&nbsp; 
            <BR>MSG_OOB:表示可以接收和发送带外的数据.关于带外数据我们以后会解释的.&nbsp; 
            <BR><BR>MSG_PEEK:是recv函数的使用标志,表示只是从系统缓冲区中读取内容,而不清楚系统缓冲区的内容.这样下次读的时候,仍然是一样的内容.一般在有多个进程读写数据时可以使用这个标志.&nbsp; 
            <BR><BR>MSG_WAITALL是recv函数的使用标志,表示等到所有的信息到达时才返回.使用这个标志的时候recv回一直阻塞,直到指定的条件满足,或者是发生了错误.&nbsp;1)当读到了指定的字节时,函数正常返回.返回值等于len&nbsp;2)当读到了文件的结尾时,函数正常返回.返回值小于len&nbsp;3)当操作发生错误时,返回-1,且设置错误为相应的错误号(errno)&nbsp; 
            <BR><BR>如果flags为0,则和read,write一样的操作.还有其它的几个选项,不过我们实际上用的很少,可以查看&nbsp;Linux&nbsp;Programmer's&nbsp;Manual得到详细解释.&nbsp; 
            <BR><BR>6.2&nbsp;recvfrom和sendto&nbsp; 
            <BR>这两个函数一般用在非套接字的网络程序当中(UDP),我们已经在前面学会了.&nbsp; 
            <BR><BR>6.3&nbsp;recvmsg和sendmsg&nbsp; 
            <BR>recvmsg和sendmsg可以实现前面所有的读写函数的功能.&nbsp; 
            <BR><BR>&nbsp;int&nbsp;recvmsg(int&nbsp;sockfd,struct&nbsp;msghdr&nbsp;*msg,int&nbsp;flags) 
            <BR>&nbsp;int&nbsp;sendmsg(int&nbsp;sockfd,struct&nbsp;msghdr&nbsp;*msg,int&nbsp;flags) 
            <BR>&nbsp; <BR>&nbsp;&nbsp;struct&nbsp;msghdr 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;*msg_name; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;msg_namelen; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;iovec&nbsp;*msg_iov; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;msg_iovlen; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;*msg_control; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;msg_controllen; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;msg_flags; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR><BR>&nbsp;struct&nbsp;iovec 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;*iov_base;&nbsp;/*&nbsp;缓冲区开始的地址&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;iov_len;&nbsp;/*&nbsp;缓冲区的长度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR><BR>msg_name和&nbsp;msg_namelen当套接字是非面向连接时(UDP),它们存储接收和发送方的地址信息.msg_name实际上是一个指向struct&nbsp;sockaddr的指针,msg_name是结构的长度.当套接字是面向连接时,这两个值应设为NULL.&nbsp;msg_iov和msg_iovlen指出接受和发送的缓冲区内容.msg_iov是一个结构指针,msg_iovlen指出这个结构数组的大小.&nbsp;msg_control和msg_controllen这两个变量是用来接收和发送控制数据时的&nbsp;msg_flags指定接受和发送的操作选项.和recv,send的选项一样&nbsp; 
            <BR>6.4&nbsp;套接字的关闭&nbsp; 
            <BR>关闭套接字有两个函数close和shutdown.用close时和我们关闭文件一样.&nbsp; 
            <BR><BR>6.5&nbsp;shutdown&nbsp; 
            <BR><BR>&nbsp;int&nbsp;shutdown(int&nbsp;sockfd,int&nbsp;howto)&nbsp;&nbsp; 
            <BR><BR>TCP连接是双向的(是可读写的),当我们使用close时,会把读写通道都关闭,有时侯我们希望只关闭一个方向,这个时候我们可以使用shutdown.针对不同的howto,系统回采取不同的关闭方式.&nbsp; 
            <BR>howto=0这个时候系统会关闭读通道.但是可以继续往接字描述符写.&nbsp; 
            <BR><BR>howto=1关闭写通道,和上面相反,着时候就只可以读了.&nbsp; 
            <BR><BR>howto=2关闭读写通道,和close一样&nbsp;在多进程程序里面,如果有几个子进程共享一个套接字时,如果我们使用shutdown,&nbsp;那么所有的子进程都不能够操作了,这个时候我们只能够使用close来关闭子进程的套接字描述符.&nbsp; 
            <BR>(<A 
            href="http://www.fanqiang.com/">http://www.fanqiang.com/</A>) 
            </FONT>&nbsp;&nbsp;&nbsp;&nbsp;进入【<A 
            href="http://www.chinaunix.net/">UNIX论坛</A>】 </TD></TR>
        <TR>
          <TD>
            <HR>
          </TD></TR>
        <TR>
          <TD><B>相关文章</B> </TD></TR>
        <TR>
          <TD><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010810/1200001101.html">Proxy源代码分析--谈谈如何学习linux网络编程</A> 
            <SMALL>(2001-08-10 12:00:00)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112433.html">Linux网络编程--10. 
            原始套接字 --11. 后记</A> <SMALL>(2001-05-08 11:26:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112359.html">Linux网络编程--9. 
            服务器模型</A> <SMALL>(2001-05-08 11:23:59)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112324.html">Linux网络编程--8. 
            套接字选项</A> <SMALL>(2001-05-08 11:23:24)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112240.html">Linux网络编程--7. 
            TCP/IP协议</A> <SMALL>(2001-05-08 11:22:40)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112209.html">Linux网络编程--6. 
            高级套接字函数</A> <SMALL>(2001-05-08 11:22:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112131.html">Linux网络编程--5. 
            用户数据报发送</A> <SMALL>(2001-05-08 11:21:31)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112052.html">Linux网络编程--4. 
            完整的读写函数</A> <SMALL>(2001-05-08 11:20:52)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112014.html">Linux网络编程--3. 
            服务器和客户机的信息函数</A> <SMALL>(2001-05-08 11:20:14)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/111934.html">Linux网络编程--2. 
            初等网络函数介绍（TCP）</A> <SMALL>(2001-05-08 
        11:19:34)</SMALL></FONT><BR></TD></TR>
        <TR>
        <TR>
          <TD><BR>===<A 
            href="http://fanqiang.chinaunix.net/cgi-bin/find.cgi?key=Linux网络编程">更多相关</A>===</TD></TR>
        <TR>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--6_ 高级套接字函数 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=top width="100%" colSpan=5 height=40>
      <P align=center><FONT color=#ffffff>★&nbsp;&nbsp;樊强制作 欢迎分享&nbsp;&nbsp;★ 
      </FONT></P></TD></TR></TBODY></TABLE></CENTER></DIV></BODY></HTML>
