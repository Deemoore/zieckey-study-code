2.1 有名管道相关的关键概念

管道应用的一个重大限制是它没有名字，因此，只能用于具有亲缘关系的进程间通信，在有名管道（named pipe或FIFO）提出后，该限制得到了克服。FIFO不同于管道之处在于它提供一个路径名与之关联，以FIFO的文件形式存在于文件系统中。这样，即使与FIFO的创建进程不存在亲缘关系的进程，只要可以访问该路径，就能够彼此通过FIFO相互通信（能够访问该路径的进程以及FIFO的创建进程之间），因此，通过FIFO不相关的进程也能交换数据。值得注意的是，FIFO严格遵循先进先出（first in first out），对管道及FIFO的读总是从开始处返回数据，对它们的写则把数据添加到末尾。它们不支持诸如lseek()等文件定位操作。

2.2有名管道的创建

#include <sys/types.h>
#include <sys/stat.h>
int mkfifo(const char * pathname, mode_t mode)


该函数的第一个参数是一个普通的路径名，也就是创建后FIFO的名字。第二个参数与打开普通文件的open()函数中的mode 参数相同。如果mkfifo的第一个参数是一个已经存在的路径名时，会返回EEXIST错误，所以一般典型的调用代码首先会检查是否返回该错误，如果确实返回该错误，那么只要调用打开FIFO的函数就可以了。一般文件的I/O函数都可以用于FIFO，如close、read、write等等。

2.3有名管道的打开规则

有名管道比管道多了一个打开操作：open。

FIFO的打开规则：

如果当前打开操作是为读而打开FIFO时，若已经有相应进程为写而打开该FIFO，则当前打开操作将成功返回；否则，可能阻塞直到有相应进程为写而打开该FIFO（当前打开操作设置了阻塞标志）；或者，成功返回（当前打开操作没有设置阻塞标志）。

如果当前打开操作是为写而打开FIFO时，如果已经有相应进程为读而打开该FIFO，则当前打开操作将成功返回；否则，可能阻塞直到有相应进程为读而打开该FIFO（当前打开操作设置了阻塞标志）；或者，返回ENXIO错误（当前打开操作没有设置阻塞标志）。

对打开规则的验证参见 附2。

2.4有名管道的读写规则

从FIFO中读取数据：

约定：如果一个进程为了从FIFO中读取数据而阻塞打开FIFO，那么称该进程内的读操作为设置了阻塞标志的读操作。

    * 如果有进程写打开FIFO，且当前FIFO内没有数据，则对于设置了阻塞标志的读操作来说，将一直阻塞。对于没有设置阻塞标志读操作来说则返回-1，当前errno值为EAGAIN，提醒以后再试。
    * 对于设置了阻塞标志的读操作说，造成阻塞的原因有两种：当前FIFO内有数据，但有其它进程在读这些数据；另外就是FIFO内没有数据。解阻塞的原因则是FIFO中有新的数据写入，不论信写入数据量的大小，也不论读操作请求多少数据量。
    * 读打开的阻塞标志只对本进程第一个读操作施加作用，如果本进程内有多个读操作序列，则在第一个读操作被唤醒并完成读操作后，其它将要执行的读操作将不再阻塞，即使在执行读操作时，FIFO中没有数据也一样（此时，读操作返回0）。
    * 如果没有进程写打开FIFO，则设置了阻塞标志的读操作会阻塞。 

注：如果FIFO中有数据，则设置了阻塞标志的读操作不会因为FIFO中的字节数小于请求读的字节数而阻塞，此时，读操作会返回FIFO中现有的数据量。

向FIFO中写入数据：

约定：如果一个进程为了向FIFO中写入数据而阻塞打开FIFO，那么称该进程内的写操作为设置了阻塞标志的写操作。

对于设置了阻塞标志的写操作：

    * 当要写入的数据量不大于PIPE_BUF时，linux将保证写入的原子性。如果此时管道空闲缓冲区不足以容纳要写入的字节数，则进入睡眠，直到当缓冲区中能够容纳要写入的字节数时，才开始进行一次性写操作。
    * 当要写入的数据量大于PIPE_BUF时，linux将不再保证写入的原子性。FIFO缓冲区一有空闲区域，写进程就会试图向管道写入数据，写操作在写完所有请求写的数据后返回。 

对于没有设置阻塞标志的写操作：

    * 当要写入的数据量大于PIPE_BUF时，linux将不再保证写入的原子性。在写满所有FIFO空闲缓冲区后，写操作返回。
    * 当要写入的数据量不大于PIPE_BUF时，linux将保证写入的原子性。如果当前FIFO空闲缓冲区能够容纳请求写入的字节数，写完后成功返回；如果当前FIFO空闲缓冲区不能够容纳请求写入的字节数，则返回EAGAIN错误，提醒以后再写； 

对FIFO读写规则的验证：

下面提供了两个对FIFO的读写程序，适当调节程序中的很少地方或者程序的命令行参数就可以对各种FIFO读写规则进行验证。


	
mkfifo（建立实名管道）
相关函数
	pipe，popen，open，umask
表头文件
	#include<sys/types.h>
	#include<sys/stat.h>
定义函数
	int mkfifo(const char * pathname,mode_t mode);
函数说明
	mkfifo()会依参数pathname建立特殊的FIFO文件，该文件必须不存在，而参数mode为该文件的权限（mode%~umask），因此 umask值也会影响到FIFO文件的权限。Mkfifo()建立的FIFO文件其他进程都可以用读写一般文件的方式存取。当使用open()来打开 FIFO文件时，O_NONBLOCK旗标会有影响
	1、当使用O_NONBLOCK 旗标时，打开FIFO 文件来读取的操作会立刻返回，但是若还没有其他进程打开FIFO 文件来读取，则写入的操作会返回ENXIO 错误代码。
	2、没有使用O_NONBLOCK 旗标时，打开FIFO 来读取的操作会等到其他进程打开FIFO文件来写入才正常返回。同样地，打开FIFO文件来写入的操作会等到其他进程打开FIFO 文件来读取后才正常返回。
返回值
	若成功则返回0，否则返回-1，错误原因存于errno中。
错误代码
	EACCESS 参数pathname所指定的目录路径无可执行的权限
	EEXIST 参数pathname所指定的文件已存在。
	ENAMETOOLONG 参数pathname的路径名称太长。
	ENOENT 参数pathname包含的目录不存在
	ENOSPC 文件系统的剩余空间不足
	ENOTDIR 参数pathname路径中的目录存在但却非真正的目录。
	EROFS 参数pathname指定的文件存在于只读文件系统内。
	
示例1:
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>

int main(void)
{
	char buf[80];
	int fd;
	unlink( "zieckey_fifo" );
	mkfifo( "zieckey_fifo", 0777 );
	
	if ( fork() > 0 )
	{
		char s[] = "Hello!\n";
		fd = open( "zieckey_fifo", O_WRONLY );
		write( fd, s, sizeof(s) );
		close( fd );
	}
	else
	{
		fd = open( "zieckey_fifo", O_RDONLY );
		read( fd, buf, sizeof(buf) );
		printf("The message from the pipe is:%s\n", buf );
		close( fd );
	}
	
	return 0;
}
执行
	hello!
	
示例2:	
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <errno.h>

int main( int argc, char **argv )
{
	mode_t mode = 0666;
	if ( argc !=2 )
	{
		printf( "Usage:[%s] fifo_filename\n", argv[0] );
		return -1;
	}
	
	if (mkfifo( argv[1], mode)<0 )
	{
		perror( "mkfifo");
		return -1;
	}
	
	char buf[1024] = {};
	fd = open( argv[1], O_RDONLY );
	read( fd, buf, sizeof(buf) );/* 这里会阻塞住，请在另一shell里输入 echo "aaa" > argv[1]  */
	printf("The message from the pipe is:%s\n", buf );
	close( fd );
	
	return 0;
}	


执行；
[weizili@build7 test]$ ./a.out zzz.fifo

在另一shell里执行：
[weizili@build7 test]$ echo aaaa > zzz.fifo 
[weizili@build7 test]$ 

这时候原来的那个程序会收到信息，然后打印出来，然后退出。
[weizili@build7 test]$ ./a.out zzz.fifo
The message from the pipe is:aaaa









命令 mkfifo 用法：

一个shell
[weizili@build7 test]$ mkfifo zieckey_fifo
[weizili@build7 test]$ cat < zieckey_fifo
aaa


另一个shell
[weizili@build7 test]$ echo "aaa" > zieckey_fifo

