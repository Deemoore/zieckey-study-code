RCS是针对某一个特定的文件进行管理，常用到的命令是co和ci。
RCS使用当 前工作路径下的RCS目录来存储管理的文件。
ci （check in)把源代码加入到RCS源代码仓库中，每一个添加进代码库中的文件的版本是 1.1。
以后每次修改文件重新ci以后，此文件的版本递增为1.2 ，1.3.……。
co（check out）把源文件从RCS源代码仓库中取出，缺省的版本是最新的版本，如果你需要一个
指定的版本，则需要使用-r选项指定。
下面看看示例：
[root@localhost work]# mkdir RCS   //建立RCS源代码仓库 
 
 编辑一个文件，如hello.c
#include <stdio.h>
int main (void)
{
printf ("Hello World\n");
return 0;
}

然后把它加入到RCS仓库中： 
[root@localhost work]# ci hello.c 
RCS/hello.c,v  <--  hello.c
enter description, terminated with single '.' or end of file:
NOTE: This is NOT the log message!
>> Source code file to demostrate the basic RCS usage.          	//输入关于文件改动的信息
>> .																						//输入  . 以结束
initial revision: 1.1
done
[root@localhost work]#

 当文件加入到源代码仓库后，RCS会自动删除原来的文件。 
 不用担心，我们可以用co heelo.c命令从RCS中取出这个文件，此时取出的文件就是工作文件。
[root@localhost work]# co hello.c
RCS/hello.c,v --> hello.c
revision 1.1
done
此时，取出的文件是只读的，如果需要编辑文件，需要对文件加锁取出，防止与他人编辑冲突。 
加锁取出使用-l (lock)选项。 
[root@localhost work]# co -l hello.c
RCS/hello.c,v  -->  hello.c
revision 1.1 (locked)
done
[root@localhost work]#

好了，去出来后，我们对工作文件进行修改如下：
#include <stdio.h>

int main(void)
{
	printf( "Welcome to linux programming world.\n" );
	
	printf( "This is a new line,added by zieckey.\n" );
	
	return 0;	
}

然后再将其保存到RCS中，为了防止删除工作文件，可以加上 -l 或者 -u 参数：
[root@localhost work]# ci -l hello.c 
RCS/hello.c,v  <--  hello.c
new revision: 1.2; previous revision: 1.1
enter log message, terminated with single '.' or end of file:
>> add a new line by zieckey.
>> .
done
[root@localhost work]# 

现在的文件版本变为1.2了。
如果你需要先前的hello.c,也就是1.1版本的，可以使用-r来指定取出文件的版本：
[root@localhost work]# co -l -r1.1 hello.c
hello.c,v --> hello.c
revision 1.1 (locked) 取出1.1版本
done
可以尝试使用两次加锁取出，这时候，RCS会提示警告信息。
[root@localhost work]# co -l hello.c
hello.c,v --> hello.c
revision 1.1 (locked)
writable hello.c exists; remove it? [ny](n) 是否覆盖当前的hello.c
如果回答n,则取出失败，回答是则覆盖当前文件
与-l相反的选项是-u，取出不加锁的文件用于工作。-f则在ci时强制覆盖RCS仓库中的文件，
 在co时强制覆盖当前的文件。 
 
 在RCS中，支持类似于宏的关键字，在ci后，这些关键字会被RCS替换成特定的信息，
如$Id$关键字： 

/*$Id$
*/

#include <stdio.h>

int main(void)
{
	printf( "Welcome to linux programming world.\n" );
	
	printf( "This is a new line,added by zieckey.\n" );
	
	return 0;	
}
[root@localhost work]# ci -r1.3 hello.c 
RCS/hello.c,v  <--  hello.c
new revision: 1.3; previous revision: 1.2
enter log message, terminated with single '.' or end of file:
>> Add a Micro "$Id" to test the Micro usage.                                                                   
>> .
done
再导出：
[root@localhost work]# co hello.c
查看内容：
[root@localhost work]# cat hello.c 
/*
$Id: hello.c,v 1.3 2007/09/26 14:09:44 root Exp $
*/

#include <stdio.h>

int main(void)
{
        printf( "Welcome to linux programming world.\n" );

        printf( "This is a new line,added by zieckey.\n" );

        return 0;
}
[root@localhost work]# 

$Id$ 关键字是用文件名、版本、时间、作者 及代码性质替换，如果使用-l选项取出，在Exp后
面会加上登录用户的名称。除了$Id$关键字，RCS还支持下面常用的关键字：
$Log$ : 你所提供的修改日志信息。
$Author$ ：存入该版本的作者。
$Locker$ : 该版本的加锁者
$State$ : 该版本的状态 Exp（试验版）, Stabe（稳定版）, Rel（发行版）.缺省是Exp
$Date$ : 该版本存入的时间，使用UTC时间格式。
$Revision$ : 该版本的版本号
$RCSfile$ : RCS文件名
$Source$ : RCS全路径名
$Name$ : 取回该版本的符号名
$Header$ : 相当于$ Source $$ Revision$$Date$$Author $$State$$Locker$的组合
在UNIX/Linux下有一个diff工具可以比较两个文件的不同，rcsdiff可以在不同的版本之间比
较文件的不同，而不必取出文件，如：
rcsdiff hello.c 比较当前hello.c文件与RCS仓库中最新版本的区别。
rcsdiff -r1.1 hello.c 比较当前hello.c文件与hello.c的1.1版本的区别。
rcsdiff -r1.2 -r1.1 比较hello.c 文件的1.1版本和1.2版本的区别。
使用这个命令，可以很方便的做出任意版本之间的补丁文件。
另外，还有其他一些不常用的RCS命令，读者可以参考更详细的资料。





