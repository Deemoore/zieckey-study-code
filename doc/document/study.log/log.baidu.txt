

account:
twiki:
	user:WeiZili
	passwd:english

cvs：
user:weizili
passwd:diligent4pig
export CVSROOT=:pserver:weizili@newcvs.baidu.com:/data/cvsroot
cvs login
cvs co -r cc_1-4-10-0_PD_BL ps/se/script/cc


下载分支
[weizili@xishi cc]$ cvs co -r aos-442-1_BRANCH ps/se/script/cc
[weizili@xishi cc]$ cd ps/se/script/cc
更新到分支最新：
[weizili@xishi cc]$ cvs up -r aos-442-1_BRANCH
[weizili@xishi cc]$ cvs ci      
[weizili@xishi cc]$ cvs tag -F cc_1-4-10-2_PD_BL






erp
weizili
diligent4pig

开发机信息如下：
32位开发机地址：psdev-32.baidu.com
64位开发机地址：psdev-64.baidu.com
开发机密码：111111aaa




邮箱帐户名称：weizili
帐户密码：tsda#236   zieckey@hao123
邮箱地址：weizili@baidu.com
https://email.baidu.com
	
	

线上的服务器：
线上环境目前国内的有3台cc机器，tc jx sz
还有一台是日本的jp
user:rd
password：phkAmwrF
tc-se-log0.tc
jx-se-log0.jx
sz-se-cc0.sz01
jp01-se-log0.jp01.baidu.com
登陆日文机器：
先kinit -f ====>提示输入密码，密码为‘111111aaa’
然后ssh rd@jp01-se-log0.jp01.baidu.com

中文的发到刘捷这里，日文的发到文静那里
上线单测试项目经理应该是hanyanjun


mis中文线上机器：
[weizili@zhaojun weizili]$ ssh rd@mis0-0.baidu.com
[rd@tc-ps-mis0.tc.baidu.com ~]$ 




中日文AOS系统账号，请平姐确认通过。
       http://jp01-se-aos0.jp01.baidu.com:8088/aos-web/index.php
       http://aos.baidu.com/aos-web/index.php







/data/script.cmd/scm_tagcheck.pl -p=ps/aos/mis-homepage -t=mis-homepage_1-0-3-0_PD_BL -b=aos-268-3_BRANCH -do=taghead 
error:mis-homepage_1-0-3-0_PD_BL版本和aos-268-3_BRANCH末端版本不一致,请使用以下方法重新标记:
cvs up -dr mis-homepage_1-0-3-0_PD_BL
cvs tag -d mis-homepage_1-0-3-0_PD_BL
cvs up -dr aos-268-3_BRANCH
cvs tag mis-homepage_1-0-3-0_PD_BL


下面均在mis-homepage目录进行，删除主干上的文件：
cvs -q up -Ad
cvs -q up -j HEAD -j   	 mis-homepage_1-0-3-0_PD_BL 
cvs ci 
cvs tag  mis-homepage_1-0-3-0_PD_BL_MAIN





修改源码，然后打tag：
[weizili@zhaojun mis-homepage]$ vi JavaSource/com/baidu/aos/logomis/actions/LogoAdminAction.java.1                           [weizili@zhaojun mis-homepage]$ diff JavaSource/com/baidu/aos/logomis/actions/LogoAdminAction.java.1 JavaSource/com/baidu/aos/logomis/actions/LogoAdminAction.java
[weizili@zhaojun mis-homepage]$ mv JavaSource/com/baidu/aos/logomis/actions/LogoAdminAction.java.1 JavaSource/com/baidu/aos/logomis/actions/LogoAdminAction.java
[weizili@zhaojun mis-homepage]$ cvs up -r aos-268-3_BRANCH
[weizili@zhaojun mis-homepage]$ cvs ci
[weizili@zhaojun mis-homepage]$ cvs tag -F mis-homepage_1-0-3-0_PD_BL





咱们打印机的ip是多少来着，哪位同学知道
测试组那边 \\172.18.117.173
晓敏 \\172.18.117.76










登陆开发机方法
公司内部访问所有服务器（开发机、测试机、线上机器等）时，不能直接连接服务器，必须通过relay服务器中转，即需先连接至relay服务器，再连接至需访问的服务器。
第一次连接时，请先登录relay服务器（relay01.baidu.com,relay02.baidu.com ，可通过SecureCRT软件） relay帐号为你的姓名全拼，密码和登录百度内网的密码一样，pin+token。 
1. 登陆relay，然后ssh连接开发机。
通过secureCRT连接：relay01.baidu.com
用户名：weizili（baidu邮箱前缀）
密码：token密码（与上网准入密码一致）
2. 在relay机上登录下面开发机
开发机信息如下：
32位开发机地址：psdev-32.baidu.com
64位开发机地址：psdev-64.baidu.com
用户名和密码在邮箱中
登陆后注意修改密码





sz-aos-mc5.sz01.baidu.com
echo -ne "\e]2;jianbo_dev\a"




# .bashrc
# User specific aliases and functions
# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi
alias grep='grep --color'
alias ssh='ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10'
alias scp='scp -o StrictHostKeyChecking=no -o ConnectTimeout=10'
export LC_ALL=zh_CN.gbk
echo -ne "\e]2;jianbo_dev\a"
#PROMPT_COMMAND='echo -ne "33]O;${HOSTNAME}O7"'



测试机登录：
ssh work@sz-aos-mc5.sz01
密码：123456


apache安装后出现问题：

解决问题 “You don't have permission to access /index.html on this server.”
2008年10月11日 星期六 15:13

前几天装一个linux 企业版5.0安装了apache，打开测试页面的时候出现如下错误：
Forbidden

You don't have permission to access /index.html on this server.

开始我以为我配置出错,花半天时间都没有搞定,今天终于搞定了.

原因：index.html是用root用户建的文件，apache权限不够。

解决方法：更改文件权限；chmod 755 index.html

打开apache配置文件httpd.conf，找到这么一段：
<Directory />
     Options FollowSymLinks
     AllowOverride None
     Order deny,allow
     deny from all
     Satisfy all
</Directory>
然后试着把deny from all中的deny改成了allow，保存后重起了apache，然后再一测试我的网页，哈哈！居然问题就出在这，访问测试网站完全正常了。



php编译选项：
./configure --prefix=/home/weizili/software/php --with-apxs2=/home/weizili/software/apache2.2/bin/apxs --enable-track-vars --with-xml

apache目录：/home/work/apache2

apache虚拟目录配置（配置文件为：/home/work/apache2/conf/httpd.conf）：

1.添加一个监听端口，不要与其他人重复
Listen 9999

2.添加一
<Directory /home/work/weizili/www/>
    Options Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
</Directory>

<VirtualHost *:9999>
    ServerAdmin weizili@baidu.com
    DocumentRoot /home/work/weizili/www/
    ServerName  sz-aos-mc5.sz01:9999
</VirtualHost>


测试url：http://sz-aos-mc5.sz01:9999/



一个简单的测试页面：
index.html:
<html>
	 <head>
	  <title>PHP 测试</title>
	 </head>
	 <body>
		 <p>Hello World</p>
		 <form action="action.php" method="post">
		 <p>姓名: <input type="text" name="name" /></p>
		 <p>年龄: <input type="text" name="age" /></p>
		 <p><input type="submit" /></p>
		</form>
	 </body>
</html>

响应页面：
action.php
<html>
	 <head>
	  <title>PHP action</title>
	 </head>
	 <body>
		 你好，<?php echo htmlspecialchars($_POST['name']); ?>。
		你 <?php echo (int)$_POST['age']; ?> 岁了。
	 </body>
</html>



练习题目：
http://pswiki.baidu.com/twiki/bin/view/Main/PsExercise
机器信息：
jx-training-test00.jx.baidu.com
user：work
passwd：123456









umask命令与chmod命令的作用正好相反,它告诉系统在创建文件时不给予什么存取许可






shell脚本

特殊参数（Special Parameters）
    $#：位置参数的数量		
    $*：所有位置参数的内容 ($1 $2 …)
    $@: 所有位置参数的内容(“$1” “$2” … )
    $?：命令执行后返回的状态 , 0表示成功，其他表示失败
    $$：当前进程的进程号 
    $!：后台运行的最后一个进程号
    $0：当前执行的进程名

在shell解释命令行里的标记(char/word)的时候,空格和TAB、换行符就被当做IFS，分隔符


test一般有两种格式，即：
test condition
或
[ condition ]

测试数值可以使用许多操作符，一般格式如下：
"number" numeric operator "number"
或者
[ "number" numeric operator "number" ]
numeric operator可为：
-eq 数值相等。						equal
-ne 数值不相等。					not equal
-gt 第一个数大于第二个数。			great than
-lt 第一个数小于第二个数。			less than
-le 第一个数小于等于第二个数。		less equal
-ge 第一个数大于等于第二个数。		great equal

文件状态测试
- d 目录			- s 文件长度大于0、非空
- f 正规文件		- w 可写
- L 符号连接		- u 文件有s u i d位设置
- r 可读			- x 可执行



#!/bin/sh
#if.sh
a='10'	#定义一个变量a
b='20'	#定义一个变量b
if [ $a -lt $b ]	#判断变量a是否小于变量b
then
        echo "$a is less than $b"
else
        echo "$a is great or equan to $b"
fi #if 结束



#!/bin/sh
#grepif.sh
ls /home | grep "wei" > /dev/null 2>&1 	#执行这条命令
if [ $? -eq 0 ]								#判断上一条命令的推出状态(由'$?'保存)是否等于0，
then
        echo "wei is here"
else
        echo "wei is not here"
fi



#!/bin/sh
#测试 cp 这条命令执行是否成功。cp命令的自己的输出打印到其他地方
if cp myfile myfile.bak > /dev/null 2>&1	
then
        echo "copy good"
else
        echo "copy not successfully"
fi





#!/bin/sh
WP=`pwd`	#通过反引号（键盘1键左边的那个）告示shell这是一个命令，并且将命令执行的输出赋值给WP变量
echo $WP 	#输出WP变量



#!/bin/sh
#paramif
if [ $# -lt 3 ]	#如果输入的参数个数小于3（不包括脚本名字）
then
        echo "usage : $0 arg1 arg2 arg3" 	# ‘$0’保存了执行进程的名字（这里就是本脚本的文件名）
else
        echo "arg1 = $1"
        echo "arg2 = $2"
        echo "arg3 = $3"
fi









case用法：
#!/bin/sh
echo -n "please enter a number from 1 to 5 :"
read ANS
case $ANS in
        1) echo "you entered 1"
        ;;
        2) echo "you entered 2"
        ;;
        3) echo "you entered 3"
        ;;
        4) echo "you entered 4"
        ;;
        5) echo "you entered 5"
        ;;
        *) echo "`basename $0` : this is not between 1 and 5 " 2>&1
        exit
        ;;
esac  




for用法：
for 变量名 in 列表
do
命令1
命令2..
done

#!/bin/sh
# for.sh

for loop in "my name is zieckey"
do      
        echo "Result:$loop"
done    
运行结果：$ ./for.sh 
Result:my name is zieckey

利用命令行参数：
#!/bin/sh
# forfind.sh

for loop in $*
do 
        find / -name $loop -print
done


把一个文件（参数1）复制10次到另一个文件中（参数2）
#!/bin/sh
# forcat.sh

for (( i = 0; i < 10; i++ ))
do 
        cat $1 >> $2
done
例如：
$ ./forcat.sh keywords.n keywords.10n







调试：
set命令
s e t命令可辅助脚本调试。以下是s e t命令常用的调试选项：
set -n 读命令但并不执行。
set -v 显示读取的所有行。
set -x 显示所有命令及其参数。
将s e t选项关闭，只需用+替代-。有人总认为+应该为开，而-应为关闭，但实际刚好相反。
可以在脚本开始时将s e t选项打开，然后在结束时关闭它。或在认为有问题的特殊语句段
前后打开及关闭它。


















awk




































perl
标量变量在Perl 中由$开头，例如: $size, $result


2.6 内部变量
2.6.1 <STDIN>
内部文件句柄，接收用户从键盘的输入。
2.6.2 STDOUT、STDERR
内部文件句柄，STDOUT为标准输出，STDERR为错误输出。
2.6.3 <ARGV>
命令行参数文件句柄。
2.6.4 @ARGV
将命令行参数保存在数组中。
2.6.5 @INC
将perl搜索库的目录次序保存在数组中。
2.6.6 %INC
用哈希结构给出use库的来源（目录）。

Perl 最常用的默认变量：$_
当然，这些参存放在某个地方，在Perl 中，会自动将此参数列表自动存放在一个叫做@_的数组中。

普通变量用：$
数组：@
hash：%


直接用反引号来执行系统命令.
print `pwd`;
system("pwd");



#!/usr/bin/perl
print "@ARGV\n";
$argc=scalar(@ARGV);
if( $argc != 2 )
{
        print "usage : yourperl.pl num index\n";
        exit;
}

if( @ARGV[0] <= @ARGV[1] )
{
        print "usage : yourperl.pl num index, num should bigger than index\n";
        exit;
}


@oldarr = (1..@ARGV[0]); #构造原数组
$size = scalar(@oldarr);
print "size of array = $size\n";
@newarr = reverse(@oldarr);
@newarr[@ARGV[1]] = 10000; #修改一个数组中的一个数

# 下面这段for循环是用于找到被修改的那个数在新数组中的下标index
$index = -1;
for( $i = 0; $i < $size; $i++ ) #newarr
{
        $found = 0;
        for( $j = 0; $j < $size; $j++ ) #oldarr
        {
                if( @newarr[$i] == @oldarr[$j] )
                {
                        $found = 1;
                        last;
                }
        }

        if( 0 == $found ) #not find this value
        {
                $index = $i;
                last;
        }
}

$oldsum = $size * ($size + 1 ) / 2;
$dirtynum = @newarr[$index];
@newarr[$index] = 0;

$newsum = 0;
for( $i = 0; $i < $size; $i++ )
{
        $newsum += @newarr[$i];
}

#计算出被修改的数的原值
$oldvalue = $oldsum - $newsum;
$modifyvalue = $dirtynum;

# 找到被修改的数在原数组中下标index
$oldindex = -1;
for( $j = 0; $j < $size; $j++ ) #oldarr
{
        if( $oldvalue == @oldarr[$j] )
        {
                $oldindex = $j;
                last;
        }
}

print "the index of the array ", $oldindex,  "st data has been modified to $modifyvalue, the original data is $oldvalue\n";











标准输入：
$line = <STDIN>;
if($line eq "\n" ) {
        print "That was just a blank line!\n";
}else{
        print "That line of input was: $line";
}


数组：
数组是由括号括起来并且其元素由逗号分隔开的列表。例如：（1，2，3） #含有1，2，3 的列表
刚才使用的rocks 数组，其最后一个元素的索引为$#rocks

#!/usr/bin/perl -w
@arr = (0..99);
print "the last index of arr is $#arr\n";# last index = 99
print "the size of the array is ".scalar(@arr)."\n"; # size = 100


有一种简便的方法可以不用输入大量的引号而达到类似的功能，
那就是使用qw，“quoted words”
qw(fred barney betty wilma dino ) #同（“fred”, “barney”, “betty”, “wilma”, “dino”），但输入更少



Perl 最常用的默认变量：$_
$_ =“Yabba dabba doo\n”;
print; #打印出默认变量$_。



带参数的子程序：
sub max{
#和&larger_of_fred_or_barney 比较
if($_[0] > $_[1]){
$_[0];
}else{
$_[1];
}
}

当然，这些参存放在某个地方，在Perl 中，会自动将此参数列表自动存放在一个叫做@_的数组中。
#!/usr/bin/perl -w
sub max {
        my($m,$n); #新的，私有变量
        ($m,$n) = @_; #赋值
        if($m > $n) {$m} else{$n}
}

$a = 5;
$b = 6;
print "max of $a, $b is : ".max( $a, $b )."\n";



my($square) = $_*$_; #本循环中的私有变量




文件的打开和使用
#!/usr/bin/perl -w
if(! open PASSWD, "/etc/passwd" ) {
        die "How did you get logged in?($!)";
}
while( $line = <PASSWD>){ #每次读入一行文本到变量 $line
        print $line;
}



多行注释：
=h
	return 0 :right
		other:error
	para1
	para2
=cut











############################################
#
# run a cmd, if it failed, retry
# @param1[in] cmd
# @param2[in] retry times, >= 0
# @param3[in] retry inteval time, uint : seconds, > 0
# @param4[in] the exit value of the cmd normally excution, a integer
# @param5[out] the exit value of the cmd excution this time
# 
#
# @return 0, success
#       -1, failed
#
sub runCmdRetry
{   
    if( scalar(@_) ne 5 )
    {   
        print STDERR ( "the param is not right\n" );
        return -1;
    }
    
    my ($cmd, $retrytime, $retryinterval, $successval, $) = @_;
    
    
    
    
    
    
    
    
    
    
php:
$_POST['key'] form表单的值传递到另一个页面
$_GET['key'] url地址栏传递的参数

调试方式：
print_r($array);die;
var_dump($val);















如何建立机器间的信任关系
假设我们需要实现的目标是：使ps30成为ps24的信任机器（让ps30登陆ps24无需输入密码）。
（1）	进入ps30的隐藏目录.ssh：cd .ssh（当前目录为/home/work/）
（2）	用ll命令查看是否有id_rsa.pub文件，该文件记录了本机的用户名密码等信息。如果没有，转（3）。
（3）	生成id_rsa.pub和id_rsa文件：ssh-keygen -t rsa。回车之后输入id_rsa，提示输入密码的时候连续回车就可以了，因为该密码是对id_rsa.pub进行加密的，没有必要。
（4）	然后scp id_rsa.pub work@testing-ps24.baidu.com:/home/work/.ssh/weizili.pub （注意：一定要改名，不然会把目的机器的id_rsa.pub文件覆盖）。
（5）	进入ps24机器的.ssh目录：cat weizili.pub >>authorized_keys
（6）	付于ps24上的authorized_keys文件以执行的权限：chmod 744 authorized_keys （744表示文件的属主有rwx的权限，而其余用户只有r的权限）
（7）	在ps30上验证建立信任关系是否成功：ssh testing-ps24，如果不需要输入密码就进入ps24机器，证明已经成功。








java_ee 安装
用户：admin
密码：administrator



密码: 123456
加密后iso-8859-1: e100dc0000ba00abbe00e000f2008800




rsync  -e  ssh  --timeout=10  -r  --progress cc_  work@tc-test-aos00.tc.baidu.com:/home/work/weizili.
 scp  -o   ConnectTimeout=$ConnectTimeout  -r   -B  $src_file  $user\@$dest_ip:$dest_file 
$ rsync -av '-e ssh -p 6600' root@lcuc.org.cn:/home/lcuc  /data


rsync  '-e  ssh -o ConnectTimeout = 3'  --timeout=10  -r  --progress cc_  work@tc-test-aos00.tc.baidu.com:/home/work/weizili.