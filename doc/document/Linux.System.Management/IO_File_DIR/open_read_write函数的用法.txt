摘要：本文简单介绍文件操作的三个函数（open，read，write）的基本用法。
	详细说明了open函数的用法。

所需头文件：
	#include<sys/types.h>
	#include<sys/stat.h>
	#include<fcntl.h>

函数定义：
	int open( const char * pathname, int flags);
	int open( const char * pathname,int flags, mode_t mode);

函数说明：
	参数 pathname 指向欲打开的文件路径字符串。下列是参数 flags 所能使用的旗标:
	O_RDONLY 以只读方式打开文件
	O_WRONLY 以只写方式打开文件
	O_RDWR以可读写方式打开文件。
	上述三种旗标是互斥的,也就是不可同时使用,但可与下列的旗标利用 OR(|)运算符组合。

	O_CREAT 若欲打开的文件不存在则自动建立该文件。
	O_EXCL 如果 O_CREAT 也被设置,     此指令会去检查文件是否存在。文件若不存在则建立该文件,          
			否则将导致打开文件错误。 此外,若 O_CREAT 与 O_EXCL 同时设置,  并且欲打开的文件为符号连接,则会打开文件失败。
	O_NOCTTY 如果欲打开的文件为终端机设备时,则不会将该终端机当成进程控制终端机。
	O_TRUNC 若文件存在并且以可写的方式打开时,此旗标会令文件长度清为 0,而原来存于该文件的资料也会消失。
	O_APPEND 当读写文件时会从文件尾开始移动,        也就是所写入的数据会以附加的方式加入到文件后面。
	O_NONBLOCK 以不可阻断的方式打开文件,也就是无论有无数据读取或等待,都会立即返回进程之中。
	O_NDELAY 同 O_NONBLOCK。
	O_SYNC 以同步的方式打开文件。
	O_NOFOLLOW 如果参数 pathname 所指的文件为一符号连接,则会令打开文件失败。
	O_DIRECTORY 如果参数 pathname 所指的文件并非为一目录,  则
				会令打开文件失败。此为 Linux2.2 以后特有的旗标,以避免一些系
				统安全问题。参数 mode 则有下列数种组合,只有在建立新文件时
				才会生效,此外真正建文件时的权限会受到 umask 值所影响,因此
				该文件权限应该为(mode-umaks).
	S_IRWXU00700 权限, 代表该文件所有者具有可读、    可写及可执行的权限。
	S_IRUSR 或 S_IREAD,00400 权限,代表该文件所有者具有可读取的权限。
	S_IWUSR 或 S_IWRITE,00200 权限,代表该文件所有者具有可写入的权限。
	S_IXUSR 或 S_IEXEC,00100 权限,代表该文件所有者具有可执行的权限。
	S_IRWXG 00070 权限,代表该文件用户组具有可读、    可写及可执行的权限。
	S_IRGRP 00040 权限,代表该文件用户组具有可读的权限。
	S_IWGRP 00020 权限,代表该文件用户组具有可写入的权限。
	S_IXGRP 00010 权限,代表该文件用户组具有可执行的权限。
	S_IRWXO 00007 权限,代表其他用户具有可读、可写及可执行的权限。
	S_IROTH 00004 权限,代表其他用户具有可读的权限
	S_IWOTH 00002 权限,代表其他用户具有可写入的权限。
	S_IXOTH 00001 权限,代表其他用户具有可执行的权限。


返回值：
    	若所有欲核查的权限都通过了检查则返回 0 值,表示成功,只要有 一个权限被禁止则返回-1。

错误代码：
	EEXIST 参数 pathname 所指的文件已存在,却使用了 O_CREAT和 O_EXCL 旗标
	EACCESS 参数 pathname 所指的文件不符合所要求测试的权限。
	EROFS	欲测试写入权限的文件存在于只读文件系统内。
	EFAULT 参数 pathname 指针超出可存取内存空间。
	EINVAL 参数 mode 不正确。
	ENAMETOOLONG 参数 pathname 太长。
	ENOTDIR 参数 pathname 不是目录。
	ENOMEM 核心内存不足。
	ELOOP 参数 pathname 有过多符号连接问题。
	EIO I/O 存取错误。

范例：
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>

int main(void)
{
	int fd,size;
	char s[]="This program is used to show how to use open(),write(),read() function.\nHave fun!\n";
	char buffer[80];
	
	fd = open( "temp.log", O_WRONLY|O_CREAT );//以可读写的方式打开一个文件，如果不存在则创建该文件
	if ( -1 == fd )
	{
		printf("Open or create file named \"temp.log\" failed.\n");
		return -1;
	}
	write( fd, s, sizeof(s) );//向该文件中写入一个字符串
	close( fd );
	
	fd = open( "temp.log", O_RDONLY );
	if ( -1 == fd )
	{
		printf("Open file named \"temp.log\" failed.\n");
		return -1;
	}
	size = read( fd, buffer, sizeof(buffer) );//读取文件内容保存到buffer指定的字符串数组中，返回读取的字符个数
	close( fd );
	printf( "%s", buffer );
	
	return 0;
}


2. read

	#include <unistd.h>
	ssize_t read(int filedes, void *buf, size_t nbytes);

	返回值：读取到的字节数；0（读到 EOF）；-1（出错）

	read 函数从 filedes 指定的已打开文件中读取 nbytes 字节到 buf 中。以下几种情况会导致读取到的字节数小于 nbytes ：

	A. 读取普通文件时，读到文件末尾还不够 nbytes 字节。例如：如果文件只有 30 字节，而我们想读取 100 字节，那么实际读到的只有 30 字节，read 函数返回 30 。此时再使用 read 函数作用于这个文件会导致 read 返回 0 。

	B. 从终端设备（terminal device）读取时，一般情况下每次只能读取一行。

	C. 从网络读取时，网络缓存可能导致读取的字节数小于 nbytes 字节。

	D. 读取 pipe 或者 FIFO 时，pipe 或 FIFO 里的字节数可能小于 nbytes 。

	E. 从面向记录（record-oriented）的设备读取时，某些面向记录的设备（如磁带）每次最多只能返回一个记录。

	F. 在读取了部分数据时被信号中断。

	读操作始于 cfo 。在成功返回之前，cfo 增加，增量为实际读取到的字节数。


3. write

	#include <unistd.h>
	ssize_t write(int filedes, const void *buf, size_t nbytes);

	返回值：写入文件的字节数（成功）；-1（出错）

	write 函数向 filedes 中写入 nbytes 字节数据，数据来源为 buf 。返回值一般总是等于 nbytes，否则就是出错了。常见的出错原因是磁盘空间满了或者超过了文件大小限制。

	对于普通文件，写操作始于 cfo 。如果打开文件时使用了 O_APPEND，则每次写操作都将数据写入文件末尾。成功写入后，cfo 增加，增量为实际写入的字节数。
