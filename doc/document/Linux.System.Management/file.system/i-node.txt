索引节点（又称为i节点）是记录每一个文件（目录是一个特殊的文件）的控制信息，如文件的类型、访问权限、创建、修改和访问文件的时间、用户 ID、组ID、文件的连接数、文件的大小和文件数据块在磁盘上的地址的一个数据结构。其目的是加快目录的探索速度，便于实施文件共享。
   在文件系统中开辟许多个连续的区域，用来存放i节点，每个i节点都记录一个文件的控制信息和位置信息，从本质上讲，一个i节点是一个指向文件数据块的指针。
   在AIX系统中，文件的目录项只包括文件名和文件的i节点号，用户根据文件名来访问文件，系统首先根据文件名在目录中查找对应的i节点号，然后根据i节点号确定i节位置，最后根据i节点的地址来找到存放文件具体内容的数据块。
   JFS和JFS2的i节点,在结构上有很大的区别，因此，它们的寻址方式也不相同，jfs使用直接地址和间接地址块来寻址，而jfs2使用B+树来寻址。但是两者在对磁盘i节点和内核i节点的处理方面仍然是相同的。
   索引节点（i节点)的结构：
日志型文件系统的i节点是由128字节构成的数据结构。jfs2文件系统的i节点是一个512字节构成的数据结构。其内容如下：
jfs的i节点的字段	jfs2的i节点字段		描述
i_gen    			di_gen				生成的编号,i节点号
i_mode				di_mode				文件和类型和访问权限，用位表示，一般可调用stat()获得
i_nlink				di_nlink			所建立的文件连接的数量。如果是0，则该i节点可用于分配给其他文件
i_uid				di_uid				文件所属用户id
i_gid				di_gid				文件所属组id
i_size				di_size				文件的大小，以字节为单位
i_nblocks			di_nblocks			被该文件实际使用的块数
i_mtime				di_mtime			最近一次修改该文件的时间
i_atime				di_atime			最近一次修改该id节点的时间
i_rdev				di_rdev				特殊文件（设备文件）的主、次设备号
i_rdaddr(8)			________			指向数据的实际磁盘地址，也称为地址指针
i_rindrect			________			指向间接地址块的实际磁盘地址（如果需要用间接地址块）
 		
    在jfs2文件系统的i节点中，还有一个di_btroot字段，它指向一个B+树的根，这个B+树描述i节点所管理的数据。一个512字节的i节点由4 部分组成，各占用了128字节，第1部分是基本区，包含上述表内的基本字段；第2部分是扩展区，包含96个字节的文件系统扩展属性和32个字节的B+树根 节点的头信息。第3部分是类型依赖区，描述B+树根节点的xad数组和联机数据。第4部分是类型依赖扩展区，包含用户定义的属性，或者联机数据的延续部分 或B+树根节点的延续部分。
    磁盘i节点的i_rdaddr字段包含着8个磁盘地址，这些地址指向分配给这个文件的前8个数据块。i_rindirect字段中的磁盘地址指向一个间接 地址块，这个间接地址块可以是单次间接地址块，也可以是二次间接地址块，因此有3种可能的寻址方法：直接寻址、单次间接寻址和二次间接寻址。
    文件名并没有保存在i节点中，而是保存在文件所在的目录文件中。目录中的记录把文件名和它的i节点做了映射,任何i节点可以用link或symlink函 数链接成多个文件名，也就是在目录中添加多条关于一个i节点的记录。用ls -i 命令可以查看文件的i节点号。
    设备文件的i节点与普通文件的i节点所包含的信息有所不同，它不包含数据块的地址，而是在i_rdev或di_rdev中记录设备的主、次设备号。
    i节点记录着文件的属性以及存储文件内容的磁盘块地址，因此修改文件的内容，一定也会修改它的i节点。只改变文件的内容而不改变文件的i节点是不可能的事，但是存在着不改变i节点而不改变文件内容的情况。
    使用istat可以查看文件的i节点内容。其中包括设备文件的主、次设备号，如"device 10/7"，则10是主设备号，7是次设备号。
    用ls命令可以年看到包括i节点号在内的文件的目录信息，所列目录的第1列是i节点号
#ls -ail now.txt
4102 -rw-r--r-- 1 root system 31 Apr 06 09:07 now.txt
________________________________________
磁盘i节点和内核i节点
 
当打开一个文件时，操作系统就会在内核中创建一个i节点，该节点被称之为内核i节点。
jfs的内核i节点的数据结构在/usr/include/jfs/inode.h头文件中做了定义。
jfs2的内核i节点的数据结构在/usr/include/j2/j2_inode.h头文件中做了定义。
 
1.磁盘i节点
一 个文件系统中包含可用的i节点数取决于这个文件系统的大小、分配组的大小（ 默认是8MB)和nbpi比率（默认是4096字节）。这些参数是在用mkfs命令创建文件系统时给定的。当一个文件系统中所有可用的i节点全部用完之 后，就不能再创建一个文件或目录，即使这个文件系统还有很多空闲的空间。用df -v 命令可以查看一个文件系统中可用的i节点数。
jfs的磁盘i节点的数据结构在/usr/include/jfs/ino.h头文件中被定义
jfs2的磁盘i节点的数据结构在/usr/include/j2/j2_dinode.h头文件中做了定义
2.内核i节点
当一个文件被打开之后，该文件的磁盘i节点信息就会复制到内核i节点中，它所跟踪的信息有：
（1）内核i节点的状态：
?	一个i节点锁
?	一个等待i节点被解锁的过程
?	在这个文件对应的i节点中所做的修改
?	对这个文件数据的修改
（2）包含这个文件的文件系统对应的逻辑设备号
（3）用于标识这个i节点的i节点号
（4）参考数（reference count)当该值为0时，这个内核i节点就被释放。
________________________________________
磁盘地址的格式
 
   磁盘地址格式由两个字段组成,分别是nfrags和addr字段，nfrags字段指出这个地址未使用的连续碎片总数，addr字段指出磁盘上哪个碎片是 开始碎片。例如，一个文件系统的碎片大小是512字节，那么一个逻辑块就被分为8个碎片，如果nfrags的值是3，说明有5个碎片包含在这个地址中，后 3个碎片没有被这个地址使用。
   表示一个碎片的地址：addr=123,nfrags=7。这个地址指了数据的开始位置是磁盘上的第123号碎片，nfrags指出这个地址包含的碎片总数是1。如果一个碎片的大小不是512节，则nfrags字段值会有所变化。
   磁盘地址占两个字节，即32个位（bit)，位编号从0到31，0会一直被保留（未使用）。从1到3保存nfrags字段的值，4到31保存addr字段的值。
________________________________________
JFS的.indirect（间接地址块问题
 
   JFS使用间接磁盘地址块来分配给“大”文件的磁盘空间进行寻址。间接地址块使得文件的大小具有最大的灵活性或者能够获得最短的检索时间。磁盘i节点的i_rindirect字段来指定间接地址块的地址，即i_rindirect字段中保存着间接地址块的磁盘地址。
   在普通的JFS中，用i_rindirect字段来对磁盘空间的寻址有3种方法：
?	直接寻址（Direct Addressing)：适合较小的文件。
?	单次间接寻址(Single Indirect Addressing):适合于中等的文件。
?	二次间接寻址
直接寻址是用i节点的i_rdaddr[8]字段存储8个实际的磁盘地址，直接指向8个磁盘碎片。如果碎片的大小为4096字节，则用直接寻址的方法能够存储的最大文件是8X4096字节（32KB).
但文件大于32KB时，就要使用间寻址，在i节点的i_rindirect字段中存放一个磁盘地址，该地址指向一个间接磁盘地址块，间接磁盘块中有许多个存储磁盘地址的单元，指向存放文件的所有磁盘碎片。
使用单次间接寻址的方法，i_rindirect字段指各一个包含1024个地址的间接磁盘地址块，这1024个地址都指向已分配给文件的磁盘碎片，这种方法可存储的最大文件是1024x4096 (4M)。
对于大于4M的文件，则采用二次间接寻址。二次间接磁盘块包含512个地址，分别指向单次间接磁盘块，因此它的最大存储文件为512x1024x4096(2GB)字节。
如 果文件大小超过了2GB，则要创建允许巨型文件的文件系统。从AIX 4.2起，JFS能够存储小于64GB的巨型文件。允许巨型文件的文件系统让一些间接磁盘块地址包含指向大块碎片（128K）的磁盘地址。第1个单次间接 寻址指向4K的碎片，其余的511个间接磁盘地址块指向32x4096(128k)的大碎片，则它的最大存储文件为 1x1024x4096+511x1024x4096x32=64GB.

