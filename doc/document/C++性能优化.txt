C++性能优化

注：针对32位机。

1、内存边界对齐
看看下面的一个结构体定义：
struct CPOINT
{
	short x;
	short y;
	unsigned char c;
} // end CPOINT
这不是一个好的定义，首先他是5字节长度，另外它还有可能导致内存地址访问错误。
下面这个新的定义就好多了，

struct CPOINT
{
	int x;
	int y;
	int c;
} // end CPOINT
这个结构的内部成员都是4字节的，32位机正好可以进行内存边界对齐，去内存内容将变得更加快，这样将明显提升性能。


2、CPU流水线作业
看这个段代码，
if ((x+=(2*buffer[index++]))>10)
{
// do work
} // end if

应该这样做，

x+=(2*buffer[index]);
index++;
if (x > 10)
{
// do work
} // end if

使用第二种方式组织代码，原因有二。首先能够在代码各个地方放置断点，便于调试。
其次，也是最重要的原因，这样便于编译器向CPU传送简单指令，这样将使CPU使用更多的执行单元处理并行计算，发挥CPU流水线作业优势。