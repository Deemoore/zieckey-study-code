/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Logger_H
#define Logger_H

#include <TProcessor.h>
#include "logger_types.h"

namespace logger {

class LoggerIf {
 public:
  virtual ~LoggerIf() {}
  virtual void log(const LogMessage& lm) = 0;
  virtual void batch(const LogMessageBatch& lmb) = 0;
  virtual void getLastMessage(LogMessage& _return) = 0;
};

class LoggerNull : virtual public LoggerIf {
 public:
  virtual ~LoggerNull() {}
  void log(const LogMessage& /* lm */) {
    return;
  }
  void batch(const LogMessageBatch& /* lmb */) {
    return;
  }
  void getLastMessage(LogMessage& /* _return */) {
    return;
  }
};

typedef struct _Logger_log_args__isset {
  _Logger_log_args__isset() : lm(false) {}
  bool lm;
} _Logger_log_args__isset;

class Logger_log_args {
 public:

  Logger_log_args() {
  }

  virtual ~Logger_log_args() throw() {}

  LogMessage lm;

  _Logger_log_args__isset __isset;

  void __set_lm(const LogMessage& val) {
    lm = val;
  }

  bool operator == (const Logger_log_args & rhs) const
  {
    if (!(lm == rhs.lm))
      return false;
    return true;
  }
  bool operator != (const Logger_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_log_pargs {
 public:


  virtual ~Logger_log_pargs() throw() {}

  const LogMessage* lm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_log_result {
 public:

  Logger_log_result() {
  }

  virtual ~Logger_log_result() throw() {}


  bool operator == (const Logger_log_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Logger_log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_log_presult {
 public:


  virtual ~Logger_log_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Logger_batch_args__isset {
  _Logger_batch_args__isset() : lmb(false) {}
  bool lmb;
} _Logger_batch_args__isset;

class Logger_batch_args {
 public:

  Logger_batch_args() {
  }

  virtual ~Logger_batch_args() throw() {}

  LogMessageBatch lmb;

  _Logger_batch_args__isset __isset;

  void __set_lmb(const LogMessageBatch& val) {
    lmb = val;
  }

  bool operator == (const Logger_batch_args & rhs) const
  {
    if (!(lmb == rhs.lmb))
      return false;
    return true;
  }
  bool operator != (const Logger_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_batch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_batch_pargs {
 public:


  virtual ~Logger_batch_pargs() throw() {}

  const LogMessageBatch* lmb;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_batch_result {
 public:

  Logger_batch_result() {
  }

  virtual ~Logger_batch_result() throw() {}


  bool operator == (const Logger_batch_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Logger_batch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_batch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_batch_presult {
 public:


  virtual ~Logger_batch_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Logger_getLastMessage_args {
 public:

  Logger_getLastMessage_args() {
  }

  virtual ~Logger_getLastMessage_args() throw() {}


  bool operator == (const Logger_getLastMessage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Logger_getLastMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_getLastMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_getLastMessage_pargs {
 public:


  virtual ~Logger_getLastMessage_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_getLastMessage_result__isset {
  _Logger_getLastMessage_result__isset() : success(false) {}
  bool success;
} _Logger_getLastMessage_result__isset;

class Logger_getLastMessage_result {
 public:

  Logger_getLastMessage_result() {
  }

  virtual ~Logger_getLastMessage_result() throw() {}

  LogMessage success;

  _Logger_getLastMessage_result__isset __isset;

  void __set_success(const LogMessage& val) {
    success = val;
  }

  bool operator == (const Logger_getLastMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Logger_getLastMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_getLastMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_getLastMessage_presult__isset {
  _Logger_getLastMessage_presult__isset() : success(false) {}
  bool success;
} _Logger_getLastMessage_presult__isset;

class Logger_getLastMessage_presult {
 public:


  virtual ~Logger_getLastMessage_presult() throw() {}

  LogMessage* success;

  _Logger_getLastMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LoggerClient : virtual public LoggerIf {
 public:
  LoggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  LoggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void log(const LogMessage& lm);
  void send_log(const LogMessage& lm);
  void recv_log();
  void batch(const LogMessageBatch& lmb);
  void send_batch(const LogMessageBatch& lmb);
  void recv_batch();
  void getLastMessage(LogMessage& _return);
  void send_getLastMessage();
  void recv_getLastMessage(LogMessage& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LoggerProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<LoggerIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (LoggerProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LoggerProcessor(boost::shared_ptr<LoggerIf> iface) :
    iface_(iface) {
    processMap_["log"] = &LoggerProcessor::process_log;
    processMap_["batch"] = &LoggerProcessor::process_batch;
    processMap_["getLastMessage"] = &LoggerProcessor::process_getLastMessage;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~LoggerProcessor() {}
};

class LoggerMultiface : virtual public LoggerIf {
 public:
  LoggerMultiface(std::vector<boost::shared_ptr<LoggerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LoggerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LoggerIf> > ifaces_;
  LoggerMultiface() {}
  void add(boost::shared_ptr<LoggerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void log(const LogMessage& lm) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->log(lm);
    }
  }

  void batch(const LogMessageBatch& lmb) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->batch(lmb);
    }
  }

  void getLastMessage(LogMessage& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getLastMessage(_return);
        return;
      } else {
        ifaces_[i]->getLastMessage(_return);
      }
    }
  }

};

} // namespace

#endif
