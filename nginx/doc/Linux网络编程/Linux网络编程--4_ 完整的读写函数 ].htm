<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://fanqiang.chinaunix.net/a4/b7/20010508/112052.html -->
<HTML><HEAD><TITLE>[ 永远的UNIX > Linux网络编程--4. 完整的读写函数 ]</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<STYLE type=text/css>BODY {
	FONT: 12pt 宋体
}
TH {
	FONT: 12pt 宋体
}
INPUT {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
TEXTAREA {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
checkbox {
	FONT: 12pt 宋体
}
A:link {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:visited {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:hover {
	COLOR: #ffff00; TEXT-DECORATION: underline
}
BODY {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
TD {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
P {
	FONT-SIZE: 9pt; LINE-HEIGHT: 150%
}
</STYLE>

<META content="MSHTML 6.00.2900.3157" name=GENERATOR></HEAD>
<BODY text=#ffffff bgColor=#000000 
background="Linux网络编程--4_ 完整的读写函数 ].files/bline.gif">
<DIV align=center>
<CENTER>
<TABLE height=400 cellSpacing=0 cellPadding=0 width=750 border=0>
  <TBODY>
  <TR>
    <TD height=45>
      <P align=center><IMG alt="[ 永远的UNIX::UNIX技术资料的宝库 ]" 
      src="Linux网络编程--4_ 完整的读写函数 ].files/title.gif"></P></TD></TR>
  <TR>
  <TR>
    <TD vAlign=bottom align=left height=40><SMALL><A 
      href="http://fanqiang.chinaunix.net/">首页</A> &gt; 编程技术 &gt; 网络编程 &gt; 
      正文</SMALL></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--4_ 完整的读写函数 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=center align=middle height=40><FONT size=5><B>Linux网络编程--4. 
      完整的读写函数</B></FONT></TD></TR>
  <TR>
    <TD align=middle height=20><FONT color=#999999><SMALL>http://linuxc.51.net 
      作者:hoyt<HOYTLUO@21CN.COM> (2001-05-08 11:20:52)</SMALL></FONT></TD></TR>
  <TR>
    <TD align=middle>
      <TABLE cellSpacing=0 cellPadding=0 width=700 align=center border=0>
        <TBODY>
        <TR>
          <TD vAlign=top><FONT 
            color=#cccccc><BR>一旦我们建立了连接,我们的下一步就是进行通信了.在Linux下面把我们前面建立的通道&nbsp;看成是文件描述符,这样服务器端和客户端进行通信时候,只要往文件描述符里面读写东西了.&nbsp;就象我们往文件读写一样.&nbsp; 
            <BR><BR><BR>4.1&nbsp;写函数write&nbsp; 
            <BR><BR>&nbsp;ssize_t&nbsp;write(int&nbsp;fd,const&nbsp;void&nbsp;*buf,size_t&nbsp;nbytes) 
            <BR><BR>write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数.失败时返回-1.&nbsp;并设置errno变量.&nbsp;在网络程序中,当我们向套接字文件描述符写时有俩种可能.&nbsp; 
            <BR><BR>1)write的返回值大于0,表示写了部分或者是全部的数据.&nbsp; 
            <BR><BR>2)返回的值小于0,此时出现了错误.我们要根据错误类型来处理.&nbsp; 
            <BR><BR>如果错误为EINTR表示在写的时候出现了中断错误.&nbsp; 
            <BR><BR>如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接).&nbsp; 
            <BR><BR>为了处理以上的情况,我们自己编写一个写函数来处理这几种情况.&nbsp; 
            <BR><BR><BR>int&nbsp;my_write(int&nbsp;fd,void&nbsp;*buffer,int&nbsp;length) 
            <BR>{ <BR>&nbsp;int&nbsp;bytes_left; 
            <BR>&nbsp;int&nbsp;written_bytes; <BR>&nbsp;char&nbsp;*ptr; 
            <BR><BR>&nbsp;ptr=buffer; <BR>&nbsp;bytes_left=length; 
            <BR>&nbsp;while(bytes_left&gt;0) <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;开始写*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;written_bytes=write(fd,ptr,bytes_left); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(written_bytes&lt;=0)&nbsp;/*&nbsp;出错了*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(errno==EINTR)&nbsp;/*&nbsp;中断错误&nbsp;我们继续写*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;written_bytes=0; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;其他错误&nbsp;没有办法,只好撤退了*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(-1); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytes_left-=written_bytes; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr+=written_bytes;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;从剩下的地方继续写&nbsp;&nbsp;*/ 
            <BR>&nbsp;} <BR>&nbsp;return(0); <BR>} 
            <BR><BR>4.2&nbsp;读函数read&nbsp; 
            <BR>ssize_t&nbsp;read(int&nbsp;fd,void&nbsp;*buf,size_t&nbsp;nbyte)&nbsp;read函数是负责从fd中读取内容.当读成功时,read返回实际所读的字节数,如果返回的值是0&nbsp;表示已经读到文件的结束了,小于0表示出现了错误.如果错误为EINTR说明读是由中断引起的,&nbsp;如果是ECONNREST表示网络连接出了问题.&nbsp;和上面一样,我们也写一个自己的读函数.&nbsp; 
            <BR><BR>int&nbsp;my_read(int&nbsp;fd,void&nbsp;*buffer,int&nbsp;length) 
            <BR>{ <BR>&nbsp;int&nbsp;bytes_left; <BR>&nbsp;int&nbsp;bytes_read; 
            <BR>&nbsp;char&nbsp;*ptr; <BR>&nbsp;&nbsp; 
            <BR>&nbsp;bytes_left=length; <BR>&nbsp;while(bytes_left&gt;0) 
            <BR>&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;bytes_read=read(fd,ptr,bytes_read); 
            <BR>&nbsp;&nbsp;&nbsp;if(bytes_read&lt;0) <BR>&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(errno==EINTR) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bytes_read=0; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(-1); 
            <BR>&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;else&nbsp;if(bytes_read==0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;bytes_left-=bytes_read; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;ptr+=bytes_read; <BR>&nbsp;} 
            <BR>&nbsp;return(length-bytes_left); <BR>} 
            <BR><BR>4.3&nbsp;数据的传递&nbsp; 
            <BR>有了上面的两个函数,我们就可以向客户端或者是服务端传递数据了.比如我们要传递一个结构.可以使用如下方式&nbsp; 
            <BR><BR>&nbsp;/*&nbsp;&nbsp;客户端向服务端写&nbsp;*/ 
            <BR><BR>&nbsp;struct&nbsp;my_struct&nbsp;my_struct_client; 
            <BR>&nbsp;write(fd,(void&nbsp;*)&amp;my_struct_client,sizeof(struct&nbsp;my_struct); 
            <BR><BR>&nbsp;/*&nbsp;服务端的读*/&nbsp; 
            <BR>&nbsp;char&nbsp;buffer[sizeof(struct&nbsp;my_struct)]; 
            <BR>&nbsp;struct&nbsp;*my_struct_server; 
            <BR>&nbsp;read(fd,(void&nbsp;*)buffer,sizeof(struct&nbsp;my_struct));&nbsp; 
            <BR>&nbsp;my_struct_server=(struct&nbsp;my_struct&nbsp;*)buffer;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR><BR>在网络上传递数据时我们一般都是把数据转化为char类型的数据传递.接收的时候也是一样的&nbsp;注意的是我们没有必要在网络上传递指针(因为传递指针是没有任何意义的,我们必须传递指针所指向的内容)&nbsp; 
            <BR>(<A 
            href="http://www.fanqiang.com/">http://www.fanqiang.com/</A>) 
            </FONT>&nbsp;&nbsp;&nbsp;&nbsp;进入【<A 
            href="http://www.chinaunix.net/">UNIX论坛</A>】 </TD></TR>
        <TR>
          <TD>
            <HR>
          </TD></TR>
        <TR>
          <TD><B>相关文章</B> </TD></TR>
        <TR>
          <TD><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010810/1200001101.html">Proxy源代码分析--谈谈如何学习linux网络编程</A> 
            <SMALL>(2001-08-10 12:00:00)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112433.html">Linux网络编程--10. 
            原始套接字 --11. 后记</A> <SMALL>(2001-05-08 11:26:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112359.html">Linux网络编程--9. 
            服务器模型</A> <SMALL>(2001-05-08 11:23:59)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112324.html">Linux网络编程--8. 
            套接字选项</A> <SMALL>(2001-05-08 11:23:24)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112240.html">Linux网络编程--7. 
            TCP/IP协议</A> <SMALL>(2001-05-08 11:22:40)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112209.html">Linux网络编程--6. 
            高级套接字函数</A> <SMALL>(2001-05-08 11:22:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112131.html">Linux网络编程--5. 
            用户数据报发送</A> <SMALL>(2001-05-08 11:21:31)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112052.html">Linux网络编程--4. 
            完整的读写函数</A> <SMALL>(2001-05-08 11:20:52)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112014.html">Linux网络编程--3. 
            服务器和客户机的信息函数</A> <SMALL>(2001-05-08 11:20:14)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/111934.html">Linux网络编程--2. 
            初等网络函数介绍（TCP）</A> <SMALL>(2001-05-08 
        11:19:34)</SMALL></FONT><BR></TD></TR>
        <TR>
        <TR>
          <TD><BR>===<A 
            href="http://fanqiang.chinaunix.net/cgi-bin/find.cgi?key=Linux网络编程">更多相关</A>===</TD></TR>
        <TR>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--4_ 完整的读写函数 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=top width="100%" colSpan=5 height=40>
      <P align=center><FONT color=#ffffff>★&nbsp;&nbsp;樊强制作 欢迎分享&nbsp;&nbsp;★ 
      </FONT></P></TD></TR></TBODY></TABLE></CENTER></DIV></BODY></HTML>
