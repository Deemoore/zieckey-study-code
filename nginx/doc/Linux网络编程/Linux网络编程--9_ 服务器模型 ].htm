<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://fanqiang.chinaunix.net/a4/b7/20010508/112359.html -->
<HTML><HEAD><TITLE>[ 永远的UNIX > Linux网络编程--9. 服务器模型 ]</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<STYLE type=text/css>BODY {
	FONT: 12pt 宋体
}
TH {
	FONT: 12pt 宋体
}
INPUT {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
TEXTAREA {
	FONT: 12pt 宋体
}
SELECT {
	FONT: 12pt 宋体
}
checkbox {
	FONT: 12pt 宋体
}
A:link {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:visited {
	COLOR: #e6a306; TEXT-DECORATION: underline
}
A:hover {
	COLOR: #ffff00; TEXT-DECORATION: underline
}
BODY {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
TD {
	FONT-SIZE: 12pt; FONT-FAMILY: "宋体", "serif"
}
P {
	FONT-SIZE: 9pt; LINE-HEIGHT: 150%
}
</STYLE>

<META content="MSHTML 6.00.2900.3157" name=GENERATOR></HEAD>
<BODY text=#ffffff bgColor=#000000 
background="Linux网络编程--9_ 服务器模型 ].files/bline.gif">
<DIV align=center>
<CENTER>
<TABLE height=400 cellSpacing=0 cellPadding=0 width=750 border=0>
  <TBODY>
  <TR>
    <TD height=45>
      <P align=center><IMG alt="[ 永远的UNIX::UNIX技术资料的宝库 ]" 
      src="Linux网络编程--9_ 服务器模型 ].files/title.gif"></P></TD></TR>
  <TR>
  <TR>
    <TD vAlign=bottom align=left height=40><SMALL><A 
      href="http://fanqiang.chinaunix.net/">首页</A> &gt; 编程技术 &gt; 网络编程 &gt; 
      正文</SMALL></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--9_ 服务器模型 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=center align=middle height=40><FONT size=5><B>Linux网络编程--9. 
      服务器模型</B></FONT></TD></TR>
  <TR>
    <TD align=middle height=20><FONT color=#999999><SMALL>http://linuxc.51.net 
      作者:hoyt<HOYTLUO@21CN.COM> (2001-05-08 11:23:59)</SMALL></FONT></TD></TR>
  <TR>
    <TD align=middle>
      <TABLE cellSpacing=0 cellPadding=0 width=700 align=center border=0>
        <TBODY>
        <TR>
          <TD vAlign=top><FONT 
            color=#cccccc><BR>&nbsp;&nbsp;&nbsp;&nbsp;学习过《软件工程》吧.软件工程可是每一个程序员"必修"的课程啊.如果你没有学习过,&nbsp;建议你去看一看.&nbsp;在这一章里面,我们一起来从软件工程的角度学习网络编程的思想.在我们写程序之前,&nbsp;我们都应该从软件工程的角度规划好我们的软件,这样我们开发软件的效率才会高.&nbsp;在网络程序里面,一般的来说都是许多客户机对应一个服务器.为了处理客户机的请求,&nbsp;对服务端的程序就提出了特殊的要求.我们学习一下目前最常用的服务器模型.&nbsp; 
            <BR><BR>循环服务器:循环服务器在同一个时刻只可以响应一个客户端的请求&nbsp; 
            <BR><BR>并发服务器:并发服务器在同一个时刻可以响应多个客户端的请求&nbsp; 
            <BR><BR><BR>9.1&nbsp;循环服务器:UDP服务器&nbsp; 
            <BR>UDP循环服务器的实现非常简单:UDP服务器每次从套接字上读取一个客户端的请求,处理,&nbsp;然后将结果返回给客户机.&nbsp; 
            <BR><BR>可以用下面的算法来实现.&nbsp; <BR><BR>&nbsp;&nbsp;&nbsp;socket(...); 
            <BR>&nbsp;&nbsp;&nbsp;bind(...); <BR>&nbsp;&nbsp;&nbsp;while(1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recvfrom(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendto(...); 
            <BR>&nbsp;&nbsp;&nbsp;} 
            <BR><BR>因为UDP是非面向连接的,没有一个客户端可以老是占住服务端.&nbsp;只要处理过程不是死循环,&nbsp;服务器对于每一个客户机的请求总是能够满足.&nbsp; 
            <BR>9.2&nbsp;循环服务器:TCP服务器&nbsp; 
            <BR>TCP循环服务器的实现也不难:TCP服务器接受一个客户端的连接,然后处理,完成了这个客户的所有请求后,断开连接.&nbsp; 
            <BR><BR>算法如下:&nbsp; 
            <BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accept(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR><BR>TCP循环服务器一次只能处理一个客户端的请求.只有在这个客户的所有请求都满足后,&nbsp;服务器才可以继续后面的请求.这样如果有一个客户端占住服务器不放时,其它的客户机都不能工作了.因此,TCP服务器一般很少用循环服务器模型的.&nbsp; 
            <BR><BR>9.3&nbsp;并发服务器:TCP服务器&nbsp; 
            <BR>为了弥补循环TCP服务器的缺陷,人们又想出了并发服务器的模型.&nbsp;并发服务器的思想是每一个客户机的请求并不由服务器直接处理,而是服务器创建一个&nbsp;子进程来处理.&nbsp; 
            <BR><BR>算法如下:&nbsp; <BR><BR>&nbsp;&nbsp;socket(...); 
            <BR>&nbsp;&nbsp;bind(...); <BR>&nbsp;&nbsp;listen(...); 
            <BR>&nbsp;&nbsp;while(1) <BR>&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accept(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(fork(..)==0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;read(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;process(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(...); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(...); 
            <BR>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR><BR>TCP并发服务器可以解决TCP循环服务器客户机独占服务器的情况.&nbsp;不过也同时带来了一个不小的问题.为了响应客户机的请求,服务器要创建子进程来处理.&nbsp;而创建子进程是一种非常消耗资源的操作.&nbsp; 
            <BR><BR>9.4&nbsp;并发服务器:多路复用I/O&nbsp; 
            <BR>为了解决创建子进程带来的系统资源消耗,人们又想出了多路复用I/O模型.&nbsp; 
            <BR><BR>首先介绍一个函数select&nbsp; 
            <BR><BR>&nbsp;int&nbsp;select(int&nbsp;nfds,fd_set&nbsp;*readfds,fd_set&nbsp;*writefds, 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd_set&nbsp;*except&nbsp;fds,struct&nbsp;timeval&nbsp;*timeout) 
            <BR>&nbsp;void&nbsp;FD_SET(int&nbsp;fd,fd_set&nbsp;*fdset) 
            <BR>&nbsp;void&nbsp;FD_CLR(int&nbsp;fd,fd_set&nbsp;*fdset) 
            <BR>&nbsp;void&nbsp;FD_ZERO(fd_set&nbsp;*fdset) 
            <BR>&nbsp;int&nbsp;FD_ISSET(int&nbsp;fd,fd_set&nbsp;*fdset) 
            <BR><BR>一般的来说当我们在向文件读写时,进程有可能在读写出阻塞,直到一定的条件满足.&nbsp;比如我们从一个套接字读数据时,可能缓冲区里面没有数据可读(通信的对方还没有&nbsp;发送数据过来),这个时候我们的读调用就会等待(阻塞)直到有数据可读.如果我们不&nbsp;希望阻塞,我们的一个选择是用select系统调用.&nbsp;只要我们设置好select的各个参数,那么当文件可以读写的时候select回"通知"我们&nbsp;说可以读写了.&nbsp;readfds所有要读的文件文件描述符的集合&nbsp; 
            <BR>writefds所有要的写文件文件描述符的集合&nbsp; 
            <BR><BR>exceptfds其他的服要向我们通知的文件描述符&nbsp; <BR><BR>timeout超时设置.&nbsp; 
            <BR><BR>nfds所有我们监控的文件描述符中最大的那一个加1&nbsp; 
            <BR><BR>在我们调用select时进程会一直阻塞直到以下的一种情况发生.&nbsp;1)有文件可以读.2)有文件可以写.3)超时所设置的时间到.&nbsp; 
            <BR><BR>为了设置文件描述符我们要使用几个宏.&nbsp;FD_SET将fd加入到fdset&nbsp; 
            <BR><BR>FD_CLR将fd从fdset里面清除&nbsp; 
            <BR><BR>FD_ZERO从fdset中清除所有的文件描述符&nbsp; 
            <BR><BR>FD_ISSET判断fd是否在fdset集合中&nbsp; <BR><BR>使用select的一个例子&nbsp; 
            <BR><BR>int&nbsp;use_select(int&nbsp;*readfd,int&nbsp;n) <BR>{ 
            <BR>&nbsp;&nbsp;&nbsp;fd_set&nbsp;my_readfd; 
            <BR>&nbsp;&nbsp;&nbsp;int&nbsp;maxfd; 
            <BR>&nbsp;&nbsp;&nbsp;int&nbsp;i; <BR>&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;maxfd=readfd[0]; 
            <BR>&nbsp;&nbsp;&nbsp;for(i=1;i<N;I++) 
            <br>&nbsp;&nbsp;&nbsp;&nbsp;if(readfd[i]&gt;maxfd)&nbsp;maxfd=readfd[i]; 
            <BR>&nbsp;&nbsp;&nbsp;while(1) <BR>&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;将所有的文件描述符加入&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_ZERO(&amp;my_readfd); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=0;i<N;I++) 
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FD_SET(readfd[i],*my_readfd); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进程阻塞&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select(maxfd+1,&amp;&nbsp;my_readfd,NULL,NULL,NULL);&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有东西可以读了&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i=0;i<N;I++) 
            <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(FD_ISSET(readfd[i],&amp;my_readfd)) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;原来是我可以读了&nbsp;&nbsp;*/&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;we_read(readfd[i]); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;} <BR>} <BR><BR>使用select后我们的服务器程序就变成了.&nbsp; 
            <BR><BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;初始话(socket,bind,listen); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;while(1) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置监听读写文件描述符(FD_*);&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用select; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果是倾听套接字就绪,说明一个新的连接请求建立 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;建立连接(accept); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加入到监听文件描述符中去; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;否则说明是一个已经连接过的描述符 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进行操作(read或者write); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            <BR><BR>多路复用I/O可以解决资源限制的问题.着模型实际上是将UDP循环模型用在了TCP上面.&nbsp;这也就带来了一些问题.如由于服务器依次处理客户的请求,所以可能会导致有的客户&nbsp;会等待很久.&nbsp; 
            <BR><BR>9.5&nbsp;并发服务器:UDP服务器&nbsp; 
            <BR>人们把并发的概念用于UDP就得到了并发UDP服务器模型.&nbsp;并发UDP服务器模型其实是简单的.和并发的TCP服务器模型一样是创建一个子进程来处理的&nbsp;算法和并发的TCP模型一样.&nbsp; 
            <BR><BR>除非服务器在处理客户端的请求所用的时间比较长以外,人们实际上很少用这种模型.&nbsp; 
            <BR><BR><BR>9.6&nbsp;一个并发TCP服务器实例&nbsp; <BR><BR>#include&nbsp;<SYS 
            socket.h> <BR>#include&nbsp;<SYS types.h> <BR>#include&nbsp;<NETINET 
            in.h> <BR>#include&nbsp;<STRING.H> <BR>#include&nbsp;<ERRNO.H> 
            <BR>#define&nbsp;MY_PORT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8888 
            <BR><BR>int&nbsp;main(int&nbsp;argc&nbsp;,char&nbsp;**argv) <BR>{ 
            <BR>&nbsp;int&nbsp;listen_fd,accept_fd; 
            <BR>&nbsp;struct&nbsp;sockaddr_in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client_addr; 
            <BR>&nbsp;int&nbsp;n; <BR>&nbsp; 
            <BR>&nbsp;if((listen_fd=socket(AF_INET,SOCK_STREAM,0))&lt;0) 
            <BR>&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Socket&nbsp;Error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;} <BR>&nbsp; 
            <BR>&nbsp;bzero(&amp;client_addr,sizeof(struct&nbsp;sockaddr_in)); 
            <BR>&nbsp;client_addr.sin_family=AF_INET; 
            <BR>&nbsp;client_addr.sin_port=htons(MY_PORT); 
            <BR>&nbsp;client_addr.sin_addr.s_addr=htonl(INADDR_ANY); 
            <BR>&nbsp;n=1; 
            <BR>&nbsp;/*&nbsp;如果服务器终止后,服务器可以第二次快速启动而不用等待一段时间&nbsp;&nbsp;*/ 
            <BR>&nbsp;setsockopt(listen_fd,SOL_SOCKET,SO_REUSEADDR,&amp;n,sizeof(int)); 
            <BR>&nbsp;if(bind(listen_fd,(struct&nbsp;sockaddr&nbsp;*)&amp;client_addr,sizeof(client_addr))&lt;0) 
            <BR>&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Bind&nbsp;Error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(1); 
            <BR>&nbsp;&nbsp;} <BR>&nbsp;&nbsp;listen(listen_fd,5); 
            <BR>&nbsp;&nbsp;while(1) <BR>&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;accept_fd=accept(listen_fd,NULL,NULL); 
            <BR>&nbsp;&nbsp;&nbsp;if((accept_fd&lt;0)&amp;&amp;(errno==EINTR)) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue; 
            <BR>&nbsp;&nbsp;&nbsp;else&nbsp;if(accept_fd&lt;0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Accept&nbsp;Error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue; 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;} <BR>&nbsp;&nbsp;if((n=fork())==0) 
            <BR>&nbsp;&nbsp;&nbsp;{ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;子进程处理客户端的连接&nbsp;*/ 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;buffer[1024]; 
            <BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(listen_fd); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n=read(accept_fd,buffer,1024); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write(accept_fd,buffer,n); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(accept_fd); 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(0); 
            <BR>&nbsp;&nbsp;&nbsp;} <BR>&nbsp;&nbsp;&nbsp;else&nbsp;if(n&lt;0) 
            <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Fork&nbsp;Error:%s\n\a",strerror(errno)); 
            <BR>&nbsp;&nbsp;&nbsp;close(accept_fd); <BR>&nbsp;&nbsp;} 
            <BR>}&nbsp; <BR><BR>你可以用我们前面写客户端程序来调试着程序,或者是用来telnet调试&nbsp; <BR>(<A 
            href="http://www.fanqiang.com/">http://www.fanqiang.com/</A>) 
            </FONT>&nbsp;&nbsp;&nbsp;&nbsp;进入【<A 
            href="http://www.chinaunix.net/">UNIX论坛</A>】 </TD></TR>
        <TR>
          <TD>
            <HR>
          </TD></TR>
        <TR>
          <TD><B>相关文章</B> </TD></TR>
        <TR>
          <TD><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010810/1200001101.html">Proxy源代码分析--谈谈如何学习linux网络编程</A> 
            <SMALL>(2001-08-10 12:00:00)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112433.html">Linux网络编程--10. 
            原始套接字 --11. 后记</A> <SMALL>(2001-05-08 11:26:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112359.html">Linux网络编程--9. 
            服务器模型</A> <SMALL>(2001-05-08 11:23:59)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112324.html">Linux网络编程--8. 
            套接字选项</A> <SMALL>(2001-05-08 11:23:24)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112240.html">Linux网络编程--7. 
            TCP/IP协议</A> <SMALL>(2001-05-08 11:22:40)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112209.html">Linux网络编程--6. 
            高级套接字函数</A> <SMALL>(2001-05-08 11:22:09)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112131.html">Linux网络编程--5. 
            用户数据报发送</A> <SMALL>(2001-05-08 11:21:31)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112052.html">Linux网络编程--4. 
            完整的读写函数</A> <SMALL>(2001-05-08 11:20:52)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/112014.html">Linux网络编程--3. 
            服务器和客户机的信息函数</A> <SMALL>(2001-05-08 11:20:14)</SMALL></FONT><BR><A 
            href="http://fanqiang.chinaunix.net/a4/b7/20010508/111934.html">Linux网络编程--2. 
            初等网络函数介绍（TCP）</A> <SMALL>(2001-05-08 
        11:19:34)</SMALL></FONT><BR></TD></TR>
        <TR>
        <TR>
          <TD><BR>===<A 
            href="http://fanqiang.chinaunix.net/cgi-bin/find.cgi?key=Linux网络编程">更多相关</A>===</TD></TR>
        <TR>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD width="100%" bgColor=#d09f0d colSpan=5 height=2><IMG height=1 
      src="Linux网络编程--9_ 服务器模型 ].files/c.gif" width=1></TD></TR>
  <TR>
    <TD vAlign=top width="100%" colSpan=5 height=40>
      <P align=center><FONT color=#ffffff>★&nbsp;&nbsp;樊强制作 欢迎分享&nbsp;&nbsp;★ 
      </FONT></P></TD></TR></TBODY></TABLE></CENTER></DIV></BODY></HTML>
